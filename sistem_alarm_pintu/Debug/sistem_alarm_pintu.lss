
sistem_alarm_pintu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00802000  000035b0  00003644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000301  00802094  00802094  000036d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b0  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000124fb  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005714  00000000  00000000  00016223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009f3f  00000000  00000000  0001b937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001254  00000000  00000000  00025878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00039601  00000000  00000000  00026acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009328  00000000  00000000  000600cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000740  00000000  00000000  000693f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8ec  00000000  00000000  00069b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c2       	rjmp	.+1202   	; 0x4e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_14>
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c2       	rjmp	.+1146   	; 0x4e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c2       	rjmp	.+1106   	; 0x4e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c2       	rjmp	.+1102   	; 0x4e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	23 c2       	rjmp	.+1094   	; 0x4e4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c2       	rjmp	.+1046   	; 0x4e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c2       	rjmp	.+1042   	; 0x4e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c2       	rjmp	.+1034   	; 0x4e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c2       	rjmp	.+1030   	; 0x4e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff c1       	rjmp	.+1022   	; 0x4e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fd c1       	rjmp	.+1018   	; 0x4e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fb c1       	rjmp	.+1014   	; 0x4e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f9 c1       	rjmp	.+1010   	; 0x4e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f7 c1       	rjmp	.+1006   	; 0x4e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f5 c1       	rjmp	.+1002   	; 0x4e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f3 c1       	rjmp	.+998    	; 0x4e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f1 c1       	rjmp	.+994    	; 0x4e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	ef c1       	rjmp	.+990    	; 0x4e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	ed c1       	rjmp	.+986    	; 0x4e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	eb c1       	rjmp	.+982    	; 0x4e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e9 c1       	rjmp	.+978    	; 0x4e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	e7 c1       	rjmp	.+974    	; 0x4e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	e5 c1       	rjmp	.+970    	; 0x4e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e3 c1       	rjmp	.+966    	; 0x4e4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e1 c1       	rjmp	.+962    	; 0x4e4 <__bad_interrupt>
     122:	00 00       	nop
     124:	df c1       	rjmp	.+958    	; 0x4e4 <__bad_interrupt>
     126:	00 00       	nop
     128:	dd c1       	rjmp	.+954    	; 0x4e4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	db c1       	rjmp	.+950    	; 0x4e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d9 c1       	rjmp	.+946    	; 0x4e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d7 c1       	rjmp	.+942    	; 0x4e4 <__bad_interrupt>
     136:	00 00       	nop
     138:	d5 c1       	rjmp	.+938    	; 0x4e4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d3 c1       	rjmp	.+934    	; 0x4e4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d1 c1       	rjmp	.+930    	; 0x4e4 <__bad_interrupt>
     142:	00 00       	nop
     144:	cf c1       	rjmp	.+926    	; 0x4e4 <__bad_interrupt>
     146:	00 00       	nop
     148:	cd c1       	rjmp	.+922    	; 0x4e4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	cb c1       	rjmp	.+918    	; 0x4e4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c9 c1       	rjmp	.+914    	; 0x4e4 <__bad_interrupt>
     152:	00 00       	nop
     154:	c7 c1       	rjmp	.+910    	; 0x4e4 <__bad_interrupt>
     156:	00 00       	nop
     158:	c5 c1       	rjmp	.+906    	; 0x4e4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c3 c1       	rjmp	.+902    	; 0x4e4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c1 c1       	rjmp	.+898    	; 0x4e4 <__bad_interrupt>
     162:	00 00       	nop
     164:	bf c1       	rjmp	.+894    	; 0x4e4 <__bad_interrupt>
     166:	00 00       	nop
     168:	bd c1       	rjmp	.+890    	; 0x4e4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	bb c1       	rjmp	.+886    	; 0x4e4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b9 c1       	rjmp	.+882    	; 0x4e4 <__bad_interrupt>
     172:	00 00       	nop
     174:	b7 c1       	rjmp	.+878    	; 0x4e4 <__bad_interrupt>
     176:	00 00       	nop
     178:	b5 c1       	rjmp	.+874    	; 0x4e4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b3 c1       	rjmp	.+870    	; 0x4e4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b1 c1       	rjmp	.+866    	; 0x4e4 <__bad_interrupt>
     182:	00 00       	nop
     184:	af c1       	rjmp	.+862    	; 0x4e4 <__bad_interrupt>
     186:	00 00       	nop
     188:	ad c1       	rjmp	.+858    	; 0x4e4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ab c1       	rjmp	.+854    	; 0x4e4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a9 c1       	rjmp	.+850    	; 0x4e4 <__bad_interrupt>
     192:	00 00       	nop
     194:	a7 c1       	rjmp	.+846    	; 0x4e4 <__bad_interrupt>
     196:	00 00       	nop
     198:	a5 c1       	rjmp	.+842    	; 0x4e4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a3 c1       	rjmp	.+838    	; 0x4e4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9f c1       	rjmp	.+830    	; 0x4e4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9d c1       	rjmp	.+826    	; 0x4e4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9b c1       	rjmp	.+822    	; 0x4e4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c1       	rjmp	.+818    	; 0x4e4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	97 c1       	rjmp	.+814    	; 0x4e4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	95 c1       	rjmp	.+810    	; 0x4e4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	93 c1       	rjmp	.+806    	; 0x4e4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	91 c1       	rjmp	.+802    	; 0x4e4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8f c1       	rjmp	.+798    	; 0x4e4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8d c1       	rjmp	.+794    	; 0x4e4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8b c1       	rjmp	.+790    	; 0x4e4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	89 c1       	rjmp	.+786    	; 0x4e4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	87 c1       	rjmp	.+782    	; 0x4e4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	85 c1       	rjmp	.+778    	; 0x4e4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	83 c1       	rjmp	.+774    	; 0x4e4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	81 c1       	rjmp	.+770    	; 0x4e4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7f c1       	rjmp	.+766    	; 0x4e4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7d c1       	rjmp	.+762    	; 0x4e4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7b c1       	rjmp	.+758    	; 0x4e4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	79 c1       	rjmp	.+754    	; 0x4e4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	77 c1       	rjmp	.+750    	; 0x4e4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	75 c1       	rjmp	.+746    	; 0x4e4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	60 14       	cp	r6, r0
     1fe:	60 14       	cp	r6, r0
     200:	60 14       	cp	r6, r0
     202:	96 14       	cp	r9, r6
     204:	86 14       	cp	r8, r6
     206:	93 14       	cp	r9, r3
     208:	60 14       	cp	r6, r0
     20a:	60 14       	cp	r6, r0
     20c:	96 14       	cp	r9, r6
     20e:	86 14       	cp	r8, r6

00000210 <__trampolines_end>:
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 00       	nop
     216:	00 20       	and	r0, r0
     218:	20 20       	and	r2, r0
     21a:	20 20       	and	r2, r0
     21c:	00 20       	and	r0, r0
     21e:	50 50       	subi	r21, 0x00	; 0
     220:	50 00       	.word	0x0050	; ????
     222:	00 00       	nop
     224:	00 50       	subi	r16, 0x00	; 0
     226:	50 f8       	bld	r5, 0
     228:	50 f8       	bld	r5, 0
     22a:	50 50       	subi	r21, 0x00	; 0
     22c:	20 78       	andi	r18, 0x80	; 128
     22e:	a0 70       	andi	r26, 0x00	; 0
     230:	28 f0       	brcs	.+10     	; 0x23c <__trampolines_end+0x2c>
     232:	20 c0       	rjmp	.+64     	; 0x274 <__trampolines_end+0x64>
     234:	c8 10       	cpse	r12, r8
     236:	20 40       	sbci	r18, 0x00	; 0
     238:	98 18       	sub	r9, r8
     23a:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d0b>
     23e:	a8 90       	.word	0x90a8	; ????
     240:	68 60       	ori	r22, 0x08	; 8
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	00 00       	nop
     246:	00 00       	nop
     248:	10 20       	and	r1, r0
     24a:	40 40       	sbci	r20, 0x00	; 0
     24c:	40 20       	and	r4, r0
     24e:	10 40       	sbci	r17, 0x00	; 0
     250:	20 10       	cpse	r2, r0
     252:	10 10       	cpse	r1, r0
     254:	20 40       	sbci	r18, 0x00	; 0
     256:	00 50       	subi	r16, 0x00	; 0
     258:	20 f8       	bld	r2, 0
     25a:	20 50       	subi	r18, 0x00	; 0
     25c:	00 00       	nop
     25e:	20 20       	and	r2, r0
     260:	f8 20       	and	r15, r8
     262:	20 00       	.word	0x0020	; ????
     264:	00 00       	nop
     266:	00 00       	nop
     268:	60 20       	and	r6, r0
     26a:	40 00       	.word	0x0040	; ????
     26c:	00 00       	nop
     26e:	f8 00       	.word	0x00f8	; ????
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 60       	ori	r16, 0x00	; 0
     278:	60 00       	.word	0x0060	; ????
     27a:	08 10       	cpse	r0, r8
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 00       	.word	0x0080	; ????
     280:	70 88       	ldd	r7, Z+16	; 0x10
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	c8 88       	ldd	r12, Y+16	; 0x10
     286:	70 20       	and	r7, r0
     288:	60 20       	and	r6, r0
     28a:	20 20       	and	r2, r0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	70 88       	ldd	r7, Z+16	; 0x10
     290:	08 10       	cpse	r0, r8
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	f8 f8       	.word	0xf8f8	; ????
     296:	10 20       	and	r1, r0
     298:	10 08       	sbc	r1, r0
     29a:	88 70       	andi	r24, 0x08	; 8
     29c:	10 30       	cpi	r17, 0x00	; 0
     29e:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     2a2:	10 f8       	bld	r1, 0
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <__trampolines_end+0xb6>
     2a6:	08 08       	sbc	r0, r8
     2a8:	88 70       	andi	r24, 0x08	; 8
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	80 f0       	brcs	.+32     	; 0x2ce <__trampolines_end+0xbe>
     2ae:	88 88       	ldd	r8, Y+16	; 0x10
     2b0:	70 f8       	bld	r7, 0
     2b2:	08 10       	cpse	r0, r8
     2b4:	20 40       	sbci	r18, 0x00	; 0
     2b6:	40 40       	sbci	r20, 0x00	; 0
     2b8:	70 88       	ldd	r7, Z+16	; 0x10
     2ba:	88 70       	andi	r24, 0x08	; 8
     2bc:	88 88       	ldd	r8, Y+16	; 0x10
     2be:	70 70       	andi	r23, 0x00	; 0
     2c0:	88 88       	ldd	r8, Y+16	; 0x10
     2c2:	78 08       	sbc	r7, r8
     2c4:	10 60       	ori	r17, 0x00	; 0
     2c6:	00 60       	ori	r16, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	00 00       	nop
     2ce:	60 60       	ori	r22, 0x00	; 0
     2d0:	00 60       	ori	r16, 0x00	; 0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	08 10       	cpse	r0, r8
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	20 10       	cpse	r2, r0
     2da:	08 00       	.word	0x0008	; ????
     2dc:	00 f8       	bld	r0, 0
     2de:	00 f8       	bld	r0, 0
     2e0:	00 00       	nop
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	20 10       	cpse	r2, r0
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 70       	andi	r24, 0x00	; 0
     2ea:	88 08       	sbc	r8, r8
     2ec:	10 20       	and	r1, r0
     2ee:	00 20       	and	r0, r0
     2f0:	70 88       	ldd	r7, Z+16	; 0x10
     2f2:	08 68       	ori	r16, 0x88	; 136
     2f4:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f6:	70 70       	andi	r23, 0x00	; 0
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	88 f8       	.word	0xf888	; ????
     2fc:	88 88       	ldd	r8, Y+16	; 0x10
     2fe:	f0 88       	ldd	r15, Z+16	; 0x10
     300:	88 f0       	brcs	.+34     	; 0x324 <__trampolines_end+0x114>
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	f0 70       	andi	r31, 0x00	; 0
     306:	88 80       	ld	r8, Y
     308:	80 80       	ld	r8, Z
     30a:	88 70       	andi	r24, 0x08	; 8
     30c:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x64f3>
     310:	88 90       	.word	0x9088	; ????
     312:	e0 f8       	bld	r14, 0
     314:	80 80       	ld	r8, Z
     316:	f0 80       	ld	r15, Z
     318:	80 f8       	bld	r8, 0
     31a:	f8 80       	ld	r15, Y
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	80 80       	ld	r8, Z
     320:	80 70       	andi	r24, 0x00	; 0
     322:	88 80       	ld	r8, Y
     324:	80 98       	cbi	0x10, 0	; 16
     326:	88 70       	andi	r24, 0x08	; 8
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 f8       	.word	0xf888	; ????
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	88 70       	andi	r24, 0x08	; 8
     330:	20 20       	and	r2, r0
     332:	20 20       	and	r2, r0
     334:	20 70       	andi	r18, 0x00	; 0
     336:	38 10       	cpse	r3, r8
     338:	10 10       	cpse	r1, r0
     33a:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x64cb>
     33e:	90 a0       	ldd	r9, Z+32	; 0x20
     340:	c0 a0       	ldd	r12, Z+32	; 0x20
     342:	90 88       	ldd	r9, Z+16	; 0x10
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	80 80       	ld	r8, Z
     34a:	f8 88       	ldd	r15, Y+16	; 0x10
     34c:	d8 a8       	ldd	r13, Y+48	; 0x30
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	88 88       	ldd	r8, Y+16	; 0x10
     354:	c8 a8       	ldd	r12, Y+48	; 0x30
     356:	98 88       	ldd	r9, Y+16	; 0x10
     358:	88 70       	andi	r24, 0x08	; 8
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 88       	ldd	r8, Y+16	; 0x10
     35e:	88 70       	andi	r24, 0x08	; 8
     360:	f0 88       	ldd	r15, Z+16	; 0x10
     362:	88 f0       	brcs	.+34     	; 0x386 <__trampolines_end+0x176>
     364:	80 80       	ld	r8, Z
     366:	80 70       	andi	r24, 0x00	; 0
     368:	88 88       	ldd	r8, Y+16	; 0x10
     36a:	88 a8       	ldd	r8, Y+48	; 0x30
     36c:	90 68       	ori	r25, 0x80	; 128
     36e:	f0 88       	ldd	r15, Z+16	; 0x10
     370:	88 f0       	brcs	.+34     	; 0x394 <__trampolines_end+0x184>
     372:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x54f3>
     376:	80 80       	ld	r8, Z
     378:	70 08       	sbc	r7, r0
     37a:	08 f0       	brcs	.+2      	; 0x37e <__trampolines_end+0x16e>
     37c:	f8 20       	and	r15, r8
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 88       	ldd	r2, Z+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 88       	ldd	r8, Y+16	; 0x10
     388:	88 70       	andi	r24, 0x08	; 8
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 88       	ldd	r8, Y+16	; 0x10
     38e:	88 50       	subi	r24, 0x08	; 8
     390:	20 88       	ldd	r2, Z+16	; 0x10
     392:	88 88       	ldd	r8, Y+16	; 0x10
     394:	a8 a8       	ldd	r10, Y+48	; 0x30
     396:	d8 88       	ldd	r13, Y+16	; 0x10
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	50 20       	and	r5, r0
     39c:	50 88       	ldd	r5, Z+16	; 0x10
     39e:	88 88       	ldd	r8, Y+16	; 0x10
     3a0:	88 50       	subi	r24, 0x08	; 8
     3a2:	20 20       	and	r2, r0
     3a4:	20 20       	and	r2, r0
     3a6:	f8 08       	sbc	r15, r8
     3a8:	10 20       	and	r1, r0
     3aa:	40 80       	ld	r4, Z
     3ac:	f8 38       	cpi	r31, 0x88	; 136
     3ae:	20 20       	and	r2, r0
     3b0:	20 20       	and	r2, r0
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	00 80       	ld	r0, Z
     3b6:	40 20       	and	r4, r0
     3b8:	10 08       	sbc	r1, r0
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	20 20       	and	r2, r0
     3be:	20 20       	and	r2, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	20 50       	subi	r18, 0x00	; 0
     3c4:	88 00       	.word	0x0088	; ????
	...
     3ce:	00 f8       	bld	r0, 0
     3d0:	40 20       	and	r4, r0
     3d2:	10 00       	.word	0x0010	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	00 70       	andi	r16, 0x00	; 0
     3da:	08 78       	andi	r16, 0x88	; 136
     3dc:	88 78       	andi	r24, 0x88	; 136
     3de:	80 80       	ld	r8, Z
     3e0:	b0 c8       	rjmp	.-3744   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	f0 00       	.word	0x00f0	; ????
     3e6:	00 70       	andi	r16, 0x00	; 0
     3e8:	80 80       	ld	r8, Z
     3ea:	88 70       	andi	r24, 0x08	; 8
     3ec:	08 08       	sbc	r0, r8
     3ee:	68 98       	cbi	0x0d, 0	; 13
     3f0:	88 88       	ldd	r8, Y+16	; 0x10
     3f2:	78 00       	.word	0x0078	; ????
     3f4:	00 70       	andi	r16, 0x00	; 0
     3f6:	88 f8       	.word	0xf888	; ????
     3f8:	80 70       	andi	r24, 0x00	; 0
     3fa:	30 48       	sbci	r19, 0x80	; 128
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	40 00       	.word	0x0040	; ????
     402:	00 78       	andi	r16, 0x80	; 128
     404:	88 78       	andi	r24, 0x88	; 136
     406:	08 30       	cpi	r16, 0x08	; 8
     408:	80 80       	ld	r8, Z
     40a:	b0 c8       	rjmp	.-3744   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     40c:	88 88       	ldd	r8, Y+16	; 0x10
     40e:	88 20       	and	r8, r8
     410:	00 60       	ori	r16, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 70       	andi	r18, 0x00	; 0
     416:	10 00       	.word	0x0010	; ????
     418:	30 10       	cpse	r3, r0
     41a:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1ccb>
     41e:	40 48       	sbci	r20, 0x80	; 128
     420:	50 60       	ori	r21, 0x00	; 0
     422:	50 48       	sbci	r21, 0x80	; 128
     424:	60 20       	and	r6, r0
     426:	20 20       	and	r2, r0
     428:	20 20       	and	r2, r0
     42a:	70 00       	.word	0x0070	; ????
     42c:	00 d0       	rcall	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	a8 a8       	ldd	r10, Y+48	; 0x30
     430:	88 88       	ldd	r8, Y+16	; 0x10
     432:	00 00       	nop
     434:	b0 c8       	rjmp	.-3744   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     436:	88 88       	ldd	r8, Y+16	; 0x10
     438:	88 00       	.word	0x0088	; ????
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	88 88       	ldd	r8, Y+16	; 0x10
     43e:	88 70       	andi	r24, 0x08	; 8
     440:	00 00       	nop
     442:	f0 88       	ldd	r15, Z+16	; 0x10
     444:	f0 80       	ld	r15, Z
     446:	80 00       	.word	0x0080	; ????
     448:	00 68       	ori	r16, 0x80	; 128
     44a:	98 78       	andi	r25, 0x88	; 136
     44c:	08 08       	sbc	r0, r8
     44e:	00 00       	nop
     450:	b0 c8       	rjmp	.-3744   	; 0xfffff5b2 <__eeprom_end+0xff7ef5b2>
     452:	80 80       	ld	r8, Z
     454:	80 00       	.word	0x0080	; ????
     456:	00 70       	andi	r16, 0x00	; 0
     458:	80 70       	andi	r24, 0x00	; 0
     45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e0 40       	sbci	r30, 0x00	; 0
     460:	40 48       	sbci	r20, 0x80	; 128
     462:	30 00       	.word	0x0030	; ????
     464:	00 88       	ldd	r0, Z+16	; 0x10
     466:	88 88       	ldd	r8, Y+16	; 0x10
     468:	98 68       	ori	r25, 0x88	; 136
     46a:	00 00       	nop
     46c:	88 88       	ldd	r8, Y+16	; 0x10
     46e:	88 50       	subi	r24, 0x08	; 8
     470:	20 00       	.word	0x0020	; ????
     472:	00 88       	ldd	r0, Z+16	; 0x10
     474:	88 a8       	ldd	r8, Y+48	; 0x30
     476:	a8 50       	subi	r26, 0x08	; 8
     478:	00 00       	nop
     47a:	88 50       	subi	r24, 0x08	; 8
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	88 00       	.word	0x0088	; ????
     480:	00 88       	ldd	r0, Z+16	; 0x10
     482:	88 78       	andi	r24, 0x88	; 136
     484:	08 70       	andi	r16, 0x08	; 8
     486:	00 00       	nop
     488:	f8 10       	cpse	r15, r8
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	f8 10       	cpse	r15, r8
     48e:	20 20       	and	r2, r0
     490:	40 20       	and	r4, r0
     492:	20 10       	cpse	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 20       	and	r2, r0
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	10 20       	and	r1, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df e5       	ldi	r29, 0x5F	; 95
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	10 e2       	ldi	r17, 0x20	; 32
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
     4b8:	e0 eb       	ldi	r30, 0xB0	; 176
     4ba:	f5 e3       	ldi	r31, 0x35	; 53
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a4 39       	cpi	r26, 0x94	; 148
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	23 e2       	ldi	r18, 0x23	; 35
     4ce:	a4 e9       	ldi	r26, 0x94	; 148
     4d0:	b0 e2       	ldi	r27, 0x20	; 32
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a5 39       	cpi	r26, 0x95	; 149
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <main>
     4e0:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e8:	61 50       	subi	r22, 0x01	; 1
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 09       	sbc	r24, r1
     4ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	81 05       	cpc	r24, r1
     4f6:	91 05       	cpc	r25, r1
     4f8:	b9 f7       	brne	.-18     	; 0x4e8 <__portable_avr_delay_cycles+0x2>
     4fa:	08 95       	ret

000004fc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	16 e0       	ldi	r17, 0x06	; 6
     518:	68 94       	set
     51a:	ff 24       	eor	r15, r15
     51c:	f3 f8       	bld	r15, 3
     51e:	f8 01       	movw	r30, r16
     520:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	dd df       	rcall	.-70     	; 0x4e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52c:	f8 01       	movw	r30, r16
     52e:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	d6 df       	rcall	.-84     	; 0x4e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     53a:	0f 2e       	mov	r0, r31
     53c:	fb e2       	ldi	r31, 0x2B	; 43
     53e:	bf 2e       	mov	r11, r31
     540:	f0 2d       	mov	r31, r0
     542:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	2e d4       	rcall	.+2140   	; 0xda6 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
     550:	00 e4       	ldi	r16, 0x40	; 64
     552:	12 e4       	ldi	r17, 0x42	; 66
     554:	2f e0       	ldi	r18, 0x0F	; 15
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	43 e0       	ldi	r20, 0x03	; 3
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	80 ea       	ldi	r24, 0xA0	; 160
     562:	99 e0       	ldi	r25, 0x09	; 9
     564:	4f d4       	rcall	.+2206   	; 0xe04 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     566:	00 e6       	ldi	r16, 0x60	; 96
     568:	16 e0       	ldi	r17, 0x06	; 6
     56a:	ff 24       	eor	r15, r15
     56c:	f3 94       	inc	r15
     56e:	f8 01       	movw	r30, r16
     570:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     572:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	99 e0       	ldi	r25, 0x09	; 9
     57e:	5c d4       	rcall	.+2232   	; 0xe38 <usart_spi_select_device>
     580:	f8 01       	movw	r30, r16
     582:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     584:	e0 ea       	ldi	r30, 0xA0	; 160
     586:	f9 e0       	ldi	r31, 0x09	; 9
     588:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     58a:	85 ff       	sbrs	r24, 5
     58c:	fd cf       	rjmp	.-6      	; 0x588 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     594:	e0 ea       	ldi	r30, 0xA0	; 160
     596:	f9 e0       	ldi	r31, 0x09	; 9
     598:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     59a:	86 ff       	sbrs	r24, 6
     59c:	fd cf       	rjmp	.-6      	; 0x598 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     59e:	e0 ea       	ldi	r30, 0xA0	; 160
     5a0:	f9 e0       	ldi	r31, 0x09	; 9
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5a6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	80 ea       	ldi	r24, 0xA0	; 160
     5b0:	99 e0       	ldi	r25, 0x09	; 9
     5b2:	58 d4       	rcall	.+2224   	; 0xe64 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5b4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	80 ea       	ldi	r24, 0xA0	; 160
     5c0:	99 e0       	ldi	r25, 0x09	; 9
     5c2:	3a d4       	rcall	.+2164   	; 0xe38 <usart_spi_select_device>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5ca:	e0 ea       	ldi	r30, 0xA0	; 160
     5cc:	f9 e0       	ldi	r31, 0x09	; 9
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5d0:	85 ff       	sbrs	r24, 5
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5d4:	86 ea       	ldi	r24, 0xA6	; 166
     5d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5e0:	86 ff       	sbrs	r24, 6
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ea:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ec:	80 81       	ld	r24, Z
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f8:	35 d4       	rcall	.+2154   	; 0xe64 <usart_spi_deselect_device>
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 ea       	ldi	r24, 0xA0	; 160
     606:	99 e0       	ldi	r25, 0x09	; 9
     608:	17 d4       	rcall	.+2094   	; 0xe38 <usart_spi_select_device>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     610:	e0 ea       	ldi	r30, 0xA0	; 160
     612:	f9 e0       	ldi	r31, 0x09	; 9
     614:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     616:	85 ff       	sbrs	r24, 5
     618:	fd cf       	rjmp	.-6      	; 0x614 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     61a:	88 ec       	ldi	r24, 0xC8	; 200
     61c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     620:	e0 ea       	ldi	r30, 0xA0	; 160
     622:	f9 e0       	ldi	r31, 0x09	; 9
     624:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     626:	86 ff       	sbrs	r24, 6
     628:	fd cf       	rjmp	.-6      	; 0x624 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     62a:	e0 ea       	ldi	r30, 0xA0	; 160
     62c:	f9 e0       	ldi	r31, 0x09	; 9
     62e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     630:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     632:	80 81       	ld	r24, Z
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	80 ea       	ldi	r24, 0xA0	; 160
     63c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63e:	12 d4       	rcall	.+2084   	; 0xe64 <usart_spi_deselect_device>
     640:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	be 01       	movw	r22, r28
     646:	6f 5f       	subi	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	80 ea       	ldi	r24, 0xA0	; 160
     64c:	99 e0       	ldi	r25, 0x09	; 9
     64e:	f4 d3       	rcall	.+2024   	; 0xe38 <usart_spi_select_device>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     656:	e0 ea       	ldi	r30, 0xA0	; 160
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65c:	85 ff       	sbrs	r24, 5
     65e:	fd cf       	rjmp	.-6      	; 0x65a <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     660:	82 ea       	ldi	r24, 0xA2	; 162
     662:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     666:	e0 ea       	ldi	r30, 0xA0	; 160
     668:	f9 e0       	ldi	r31, 0x09	; 9
     66a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	fd cf       	rjmp	.-6      	; 0x66a <st7565r_init+0x16e>
     670:	e0 ea       	ldi	r30, 0xA0	; 160
     672:	f9 e0       	ldi	r31, 0x09	; 9
     674:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	80 81       	ld	r24, Z
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	80 ea       	ldi	r24, 0xA0	; 160
     682:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     684:	ef d3       	rcall	.+2014   	; 0xe64 <usart_spi_deselect_device>
     686:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	d1 d3       	rcall	.+1954   	; 0xe38 <usart_spi_select_device>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a2:	85 ff       	sbrs	r24, 5
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a6:	8f e2       	ldi	r24, 0x2F	; 47
     6a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ac:	e0 ea       	ldi	r30, 0xA0	; 160
     6ae:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <st7565r_init+0x1b4>
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f9 e0       	ldi	r31, 0x09	; 9
     6ba:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6bc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6be:	80 81       	ld	r24, Z
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	80 ea       	ldi	r24, 0xA0	; 160
     6c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ca:	cc d3       	rcall	.+1944   	; 0xe64 <usart_spi_deselect_device>
     6cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	99 e0       	ldi	r25, 0x09	; 9
     6da:	ae d3       	rcall	.+1884   	; 0xe38 <usart_spi_select_device>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e2:	e0 ea       	ldi	r30, 0xA0	; 160
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e8:	85 ff       	sbrs	r24, 5
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ec:	88 ef       	ldi	r24, 0xF8	; 248
     6ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f2:	e0 ea       	ldi	r30, 0xA0	; 160
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <st7565r_init+0x1fa>
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     700:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     702:	81 83       	std	Z+1, r24	; 0x01
     704:	80 81       	ld	r24, Z
     706:	be 01       	movw	r22, r28
     708:	6f 5f       	subi	r22, 0xFF	; 255
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	80 ea       	ldi	r24, 0xA0	; 160
     70e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     710:	a9 d3       	rcall	.+1874   	; 0xe64 <usart_spi_deselect_device>
     712:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	80 ea       	ldi	r24, 0xA0	; 160
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	8b d3       	rcall	.+1814   	; 0xe38 <usart_spi_select_device>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     728:	e0 ea       	ldi	r30, 0xA0	; 160
     72a:	f9 e0       	ldi	r31, 0x09	; 9
     72c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     72e:	85 ff       	sbrs	r24, 5
     730:	fd cf       	rjmp	.-6      	; 0x72c <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     732:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     736:	e0 ea       	ldi	r30, 0xA0	; 160
     738:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     73a:	81 81       	ldd	r24, Z+1	; 0x01
     73c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     73e:	fd cf       	rjmp	.-6      	; 0x73a <st7565r_init+0x23e>
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     744:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     746:	81 83       	std	Z+1, r24	; 0x01
     748:	80 81       	ld	r24, Z
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     754:	87 d3       	rcall	.+1806   	; 0xe64 <usart_spi_deselect_device>
     756:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	80 ea       	ldi	r24, 0xA0	; 160
     762:	99 e0       	ldi	r25, 0x09	; 9
     764:	69 d3       	rcall	.+1746   	; 0xe38 <usart_spi_select_device>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     76c:	e0 ea       	ldi	r30, 0xA0	; 160
     76e:	f9 e0       	ldi	r31, 0x09	; 9
     770:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     772:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     774:	fd cf       	rjmp	.-6      	; 0x770 <st7565r_init+0x274>
     776:	81 e2       	ldi	r24, 0x21	; 33
     778:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     780:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     782:	86 ff       	sbrs	r24, 6
     784:	fd cf       	rjmp	.-6      	; 0x780 <st7565r_init+0x284>
     786:	e0 ea       	ldi	r30, 0xA0	; 160
     788:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     78a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	80 81       	ld	r24, Z
     790:	be 01       	movw	r22, r28
     792:	6f 5f       	subi	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     79a:	64 d3       	rcall	.+1736   	; 0xe64 <usart_spi_deselect_device>
     79c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	80 ea       	ldi	r24, 0xA0	; 160
     7a8:	99 e0       	ldi	r25, 0x09	; 9
     7aa:	46 d3       	rcall	.+1676   	; 0xe38 <usart_spi_select_device>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7b2:	e0 ea       	ldi	r30, 0xA0	; 160
     7b4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <st7565r_init+0x2ba>
     7bc:	81 e8       	ldi	r24, 0x81	; 129
     7be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c8:	86 ff       	sbrs	r24, 6
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <st7565r_init+0x2ca>
     7cc:	e0 ea       	ldi	r30, 0xA0	; 160
     7ce:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7d0:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7d2:	81 83       	std	Z+1, r24	; 0x01
     7d4:	80 81       	ld	r24, Z
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7e0:	41 d3       	rcall	.+1666   	; 0xe64 <usart_spi_deselect_device>
     7e2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	be 01       	movw	r22, r28
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	99 e0       	ldi	r25, 0x09	; 9
     7f0:	23 d3       	rcall	.+1606   	; 0xe38 <usart_spi_select_device>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f8:	e0 ea       	ldi	r30, 0xA0	; 160
     7fa:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7fc:	81 81       	ldd	r24, Z+1	; 0x01
     7fe:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     800:	fd cf       	rjmp	.-6      	; 0x7fc <st7565r_init+0x300>
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     808:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     80e:	86 ff       	sbrs	r24, 6
     810:	fd cf       	rjmp	.-6      	; 0x80c <st7565r_init+0x310>
     812:	e0 ea       	ldi	r30, 0xA0	; 160
     814:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     816:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     818:	81 83       	std	Z+1, r24	; 0x01
     81a:	80 81       	ld	r24, Z
     81c:	be 01       	movw	r22, r28
     81e:	6f 5f       	subi	r22, 0xFF	; 255
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	80 ea       	ldi	r24, 0xA0	; 160
     824:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     826:	1e d3       	rcall	.+1596   	; 0xe64 <usart_spi_deselect_device>
     828:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	99 e0       	ldi	r25, 0x09	; 9
     836:	00 d3       	rcall	.+1536   	; 0xe38 <usart_spi_select_device>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     83e:	e0 ea       	ldi	r30, 0xA0	; 160
     840:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     842:	81 81       	ldd	r24, Z+1	; 0x01
     844:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     846:	fd cf       	rjmp	.-6      	; 0x842 <st7565r_init+0x346>
     848:	8f ea       	ldi	r24, 0xAF	; 175
     84a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     852:	81 81       	ldd	r24, Z+1	; 0x01
     854:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     856:	fd cf       	rjmp	.-6      	; 0x852 <st7565r_init+0x356>
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     85e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     860:	80 81       	ld	r24, Z
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	80 ea       	ldi	r24, 0xA0	; 160
     86a:	99 e0       	ldi	r25, 0x09	; 9
     86c:	fb d2       	rcall	.+1526   	; 0xe64 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	08 95       	ret

00000884 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     88a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     88e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     892:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     896:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     89a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     89e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     8a2:	08 95       	ret

000008a4 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	1f 92       	push	r1
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8ae:	9f b7       	in	r25, 0x3f	; 63
     8b0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8b2:	f8 94       	cli
	return flags;
     8b4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8b6:	e8 2f       	mov	r30, r24
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e0 59       	subi	r30, 0x90	; 144
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	60 95       	com	r22
     8c0:	80 81       	ld	r24, Z
     8c2:	68 23       	and	r22, r24
     8c4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8c6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	1f 92       	push	r1
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	08 2f       	mov	r16, r24
     8e2:	f6 2e       	mov	r15, r22
     8e4:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8e6:	1a d1       	rcall	.+564    	; 0xb1c <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8e8:	0f 70       	andi	r16, 0x0F	; 15
     8ea:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ec:	8b e2       	ldi	r24, 0x2B	; 43
     8ee:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	80 ea       	ldi	r24, 0xA0	; 160
     8f8:	99 e0       	ldi	r25, 0x09	; 9
     8fa:	9e d2       	rcall	.+1340   	; 0xe38 <usart_spi_select_device>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     902:	e0 ea       	ldi	r30, 0xA0	; 160
     904:	f9 e0       	ldi	r31, 0x09	; 9
     906:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     908:	95 ff       	sbrs	r25, 5
     90a:	fd cf       	rjmp	.-6      	; 0x906 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     90c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     910:	e0 ea       	ldi	r30, 0xA0	; 160
     912:	f9 e0       	ldi	r31, 0x09	; 9
     914:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     916:	86 ff       	sbrs	r24, 6
     918:	fd cf       	rjmp	.-6      	; 0x914 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     91a:	e0 ea       	ldi	r30, 0xA0	; 160
     91c:	f9 e0       	ldi	r31, 0x09	; 9
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     922:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     924:	be 01       	movw	r22, r28
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	99 e0       	ldi	r25, 0x09	; 9
     92e:	9a d2       	rcall	.+1332   	; 0xe64 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     930:	0f 2d       	mov	r16, r15
     932:	0f 77       	andi	r16, 0x7F	; 127
     934:	02 95       	swap	r16
     936:	0f 70       	andi	r16, 0x0F	; 15
     938:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     93a:	8b e2       	ldi	r24, 0x2B	; 43
     93c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 ea       	ldi	r24, 0xA0	; 160
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	77 d2       	rcall	.+1262   	; 0xe38 <usart_spi_select_device>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     950:	e0 ea       	ldi	r30, 0xA0	; 160
     952:	f9 e0       	ldi	r31, 0x09	; 9
     954:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     956:	85 ff       	sbrs	r24, 5
     958:	fd cf       	rjmp	.-6      	; 0x954 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     95a:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     95e:	e0 ea       	ldi	r30, 0xA0	; 160
     960:	f9 e0       	ldi	r31, 0x09	; 9
     962:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     964:	86 ff       	sbrs	r24, 6
     966:	fd cf       	rjmp	.-6      	; 0x962 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     968:	e0 ea       	ldi	r30, 0xA0	; 160
     96a:	f9 e0       	ldi	r31, 0x09	; 9
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     970:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 ea       	ldi	r24, 0xA0	; 160
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	73 d2       	rcall	.+1254   	; 0xe64 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     97e:	0f 2d       	mov	r16, r15
     980:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     982:	8b e2       	ldi	r24, 0x2B	; 43
     984:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	80 ea       	ldi	r24, 0xA0	; 160
     98e:	99 e0       	ldi	r25, 0x09	; 9
     990:	53 d2       	rcall	.+1190   	; 0xe38 <usart_spi_select_device>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     998:	e0 ea       	ldi	r30, 0xA0	; 160
     99a:	f9 e0       	ldi	r31, 0x09	; 9
     99c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     99e:	85 ff       	sbrs	r24, 5
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9a2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9a6:	e0 ea       	ldi	r30, 0xA0	; 160
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9ac:	86 ff       	sbrs	r24, 6
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9b0:	e0 ea       	ldi	r30, 0xA0	; 160
     9b2:	f9 e0       	ldi	r31, 0x09	; 9
     9b4:	80 e4       	ldi	r24, 0x40	; 64
     9b6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9b8:	80 81       	ld	r24, Z
     9ba:	be 01       	movw	r22, r28
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	80 ea       	ldi	r24, 0xA0	; 160
     9c2:	99 e0       	ldi	r25, 0x09	; 9
     9c4:	4f d2       	rcall	.+1182   	; 0xe64 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9c6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	be 01       	movw	r22, r28
     9cc:	6f 5f       	subi	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	80 ea       	ldi	r24, 0xA0	; 160
     9d2:	99 e0       	ldi	r25, 0x09	; 9
     9d4:	31 d2       	rcall	.+1122   	; 0xe38 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9dc:	e0 ea       	ldi	r30, 0xA0	; 160
     9de:	f9 e0       	ldi	r31, 0x09	; 9
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9e2:	85 ff       	sbrs	r24, 5
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9e6:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9f0:	86 ff       	sbrs	r24, 6
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9f4:	e0 ea       	ldi	r30, 0xA0	; 160
     9f6:	f9 e0       	ldi	r31, 0x09	; 9
     9f8:	80 e4       	ldi	r24, 0x40	; 64
     9fa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9fc:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	99 e0       	ldi	r25, 0x09	; 9
     a0e:	2a d2       	rcall	.+1108   	; 0xe64 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a10:	0f 90       	pop	r0
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	08 95       	ret

00000a1e <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	1f 92       	push	r1
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a2c:	84 e9       	ldi	r24, 0x94	; 148
     a2e:	90 e2       	ldi	r25, 0x20	; 32
     a30:	70 d0       	rcall	.+224    	; 0xb12 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a32:	64 dd       	rcall	.-1336   	; 0x4fc <st7565r_init>
     a34:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	99 e0       	ldi	r25, 0x09	; 9
     a42:	fa d1       	rcall	.+1012   	; 0xe38 <usart_spi_select_device>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a4a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a4c:	f9 e0       	ldi	r31, 0x09	; 9
     a4e:	81 81       	ldd	r24, Z+1	; 0x01
     a50:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a52:	fd cf       	rjmp	.-6      	; 0xa4e <gfx_mono_st7565r_init+0x30>
     a54:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a56:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a5a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a5c:	f9 e0       	ldi	r31, 0x09	; 9
     a5e:	81 81       	ldd	r24, Z+1	; 0x01
     a60:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <gfx_mono_st7565r_init+0x40>
     a64:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a66:	f9 e0       	ldi	r31, 0x09	; 9
     a68:	80 e4       	ldi	r24, 0x40	; 64
     a6a:	81 83       	std	Z+1, r24	; 0x01
     a6c:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a6e:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	80 ea       	ldi	r24, 0xA0	; 160
     a76:	99 e0       	ldi	r25, 0x09	; 9
     a78:	f5 d1       	rcall	.+1002   	; 0xe64 <usart_spi_deselect_device>
     a7a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a7c:	0a c0       	rjmp	.+20     	; 0xa92 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	61 2f       	mov	r22, r17
     a82:	80 2f       	mov	r24, r16
     a84:	25 df       	rcall	.-438    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     a86:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a88:	10 38       	cpi	r17, 0x80	; 128
     a8a:	c9 f7       	brne	.-14     	; 0xa7e <gfx_mono_st7565r_init+0x60>
     a8c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a8e:	04 30       	cpi	r16, 0x04	; 4
     a90:	11 f0       	breq	.+4      	; 0xa96 <gfx_mono_st7565r_init+0x78>
     a92:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a94:	f4 cf       	rjmp	.-24     	; 0xa7e <gfx_mono_st7565r_init+0x60>
     a96:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <gfx_mono_st7565r_draw_pixel>:
     aa2:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     aac:	88 23       	and	r24, r24
     aae:	4c f1       	brlt	.+82     	; 0xb02 <gfx_mono_st7565r_draw_pixel+0x60>
     ab0:	60 32       	cpi	r22, 0x20	; 32
     ab2:	38 f5       	brcc	.+78     	; 0xb02 <gfx_mono_st7565r_draw_pixel+0x60>
     ab4:	d4 2f       	mov	r29, r20
     ab6:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ab8:	f6 2e       	mov	r15, r22
     aba:	f6 94       	lsr	r15
     abc:	f6 94       	lsr	r15
     abe:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	f8 9e       	mul	r15, r24
     ac6:	60 19       	sub	r22, r0
     ac8:	71 09       	sbc	r23, r1
     aca:	11 24       	eor	r1, r1
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	8c 01       	movw	r16, r24
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x36>
     ad4:	00 0f       	add	r16, r16
     ad6:	11 1f       	adc	r17, r17
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     adc:	6c 2f       	mov	r22, r28
     ade:	8f 2d       	mov	r24, r15
     ae0:	2b d0       	rcall	.+86     	; 0xb38 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ae2:	d1 30       	cpi	r29, 0x01	; 1
     ae4:	21 f0       	breq	.+8      	; 0xaee <gfx_mono_st7565r_draw_pixel+0x4c>
     ae6:	28 f0       	brcs	.+10     	; 0xaf2 <gfx_mono_st7565r_draw_pixel+0x50>
     ae8:	d2 30       	cpi	r29, 0x02	; 2
     aea:	31 f0       	breq	.+12     	; 0xaf8 <gfx_mono_st7565r_draw_pixel+0x56>
     aec:	06 c0       	rjmp	.+12     	; 0xafa <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aee:	80 2b       	or	r24, r16
		break;
     af0:	04 c0       	rjmp	.+8      	; 0xafa <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     af2:	00 95       	com	r16
     af4:	80 23       	and	r24, r16
		break;
     af6:	01 c0       	rjmp	.+2      	; 0xafa <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     af8:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     afa:	48 2f       	mov	r20, r24
     afc:	6c 2f       	mov	r22, r28
     afe:	8f 2d       	mov	r24, r15
     b00:	e7 de       	rcall	.-562    	; 0x8d0 <gfx_mono_st7565r_put_byte>
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	08 95       	ret

00000b0e <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b0e:	14 c0       	rjmp	.+40     	; 0xb38 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b10:	08 95       	ret

00000b12 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     b12:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <fbpointer>
     b16:	90 93 95 22 	sts	0x2295, r25	; 0x802295 <fbpointer+0x1>
     b1a:	08 95       	ret

00000b1c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b1c:	20 91 94 22 	lds	r18, 0x2294	; 0x802294 <fbpointer>
     b20:	30 91 95 22 	lds	r19, 0x2295	; 0x802295 <fbpointer+0x1>
     b24:	90 e8       	ldi	r25, 0x80	; 128
     b26:	89 9f       	mul	r24, r25
     b28:	20 0d       	add	r18, r0
     b2a:	31 1d       	adc	r19, r1
     b2c:	11 24       	eor	r1, r1
     b2e:	f9 01       	movw	r30, r18
     b30:	e6 0f       	add	r30, r22
     b32:	f1 1d       	adc	r31, r1
     b34:	40 83       	st	Z, r20
     b36:	08 95       	ret

00000b38 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b38:	20 91 94 22 	lds	r18, 0x2294	; 0x802294 <fbpointer>
     b3c:	30 91 95 22 	lds	r19, 0x2295	; 0x802295 <fbpointer+0x1>
     b40:	90 e8       	ldi	r25, 0x80	; 128
     b42:	89 9f       	mul	r24, r25
     b44:	20 0d       	add	r18, r0
     b46:	31 1d       	adc	r19, r1
     b48:	11 24       	eor	r1, r1
     b4a:	f9 01       	movw	r30, r18
     b4c:	e6 0f       	add	r30, r22
     b4e:	f1 1d       	adc	r31, r1
}
     b50:	80 81       	ld	r24, Z
     b52:	08 95       	ret

00000b54 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	e4 2f       	mov	r30, r20
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	e8 0f       	add	r30, r24
     b64:	f1 1d       	adc	r31, r1
     b66:	e1 38       	cpi	r30, 0x81	; 129
     b68:	f1 05       	cpc	r31, r1
     b6a:	1c f0       	brlt	.+6      	; 0xb72 <gfx_mono_generic_draw_horizontal_line+0x1e>
     b6c:	c0 e8       	ldi	r28, 0x80	; 128
     b6e:	4c 2f       	mov	r20, r28
     b70:	48 1b       	sub	r20, r24
     b72:	44 23       	and	r20, r20
     b74:	09 f4       	brne	.+2      	; 0xb78 <gfx_mono_generic_draw_horizontal_line+0x24>
     b76:	4a c0       	rjmp	.+148    	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     b78:	d6 2f       	mov	r29, r22
     b7a:	d6 95       	lsr	r29
     b7c:	d6 95       	lsr	r29
     b7e:	d6 95       	lsr	r29
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	98 e0       	ldi	r25, 0x08	; 8
     b84:	d9 9f       	mul	r29, r25
     b86:	60 19       	sub	r22, r0
     b88:	71 09       	sbc	r23, r1
     b8a:	11 24       	eor	r1, r1
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	df 01       	movw	r26, r30
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <gfx_mono_generic_draw_horizontal_line+0x44>
     b94:	aa 0f       	add	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	6a 95       	dec	r22
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <gfx_mono_generic_draw_horizontal_line+0x40>
     b9c:	fa 2e       	mov	r15, r26
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	21 f0       	breq	.+8      	; 0xbaa <gfx_mono_generic_draw_horizontal_line+0x56>
     ba2:	98 f0       	brcs	.+38     	; 0xbca <gfx_mono_generic_draw_horizontal_line+0x76>
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	19 f1       	breq	.+70     	; 0xbee <gfx_mono_generic_draw_horizontal_line+0x9a>
     ba8:	31 c0       	rjmp	.+98     	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     baa:	c4 2f       	mov	r28, r20
     bac:	1f ef       	ldi	r17, 0xFF	; 255
     bae:	18 0f       	add	r17, r24
     bb0:	01 2f       	mov	r16, r17
     bb2:	0c 0f       	add	r16, r28
     bb4:	60 2f       	mov	r22, r16
     bb6:	8d 2f       	mov	r24, r29
     bb8:	aa df       	rcall	.-172    	; 0xb0e <gfx_mono_st7565r_get_byte>
     bba:	4f 2d       	mov	r20, r15
     bbc:	48 2b       	or	r20, r24
     bbe:	60 2f       	mov	r22, r16
     bc0:	8d 2f       	mov	r24, r29
     bc2:	86 de       	rcall	.-756    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     bc4:	c1 50       	subi	r28, 0x01	; 1
     bc6:	a1 f7       	brne	.-24     	; 0xbb0 <gfx_mono_generic_draw_horizontal_line+0x5c>
     bc8:	21 c0       	rjmp	.+66     	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     bca:	c4 2f       	mov	r28, r20
     bcc:	1f ef       	ldi	r17, 0xFF	; 255
     bce:	18 0f       	add	r17, r24
     bd0:	fa 2e       	mov	r15, r26
     bd2:	f0 94       	com	r15
     bd4:	01 2f       	mov	r16, r17
     bd6:	0c 0f       	add	r16, r28
     bd8:	60 2f       	mov	r22, r16
     bda:	8d 2f       	mov	r24, r29
     bdc:	98 df       	rcall	.-208    	; 0xb0e <gfx_mono_st7565r_get_byte>
     bde:	4f 2d       	mov	r20, r15
     be0:	48 23       	and	r20, r24
     be2:	60 2f       	mov	r22, r16
     be4:	8d 2f       	mov	r24, r29
     be6:	74 de       	rcall	.-792    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     be8:	c1 50       	subi	r28, 0x01	; 1
     bea:	a1 f7       	brne	.-24     	; 0xbd4 <gfx_mono_generic_draw_horizontal_line+0x80>
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     bee:	c4 2f       	mov	r28, r20
     bf0:	1f ef       	ldi	r17, 0xFF	; 255
     bf2:	18 0f       	add	r17, r24
     bf4:	01 2f       	mov	r16, r17
     bf6:	0c 0f       	add	r16, r28
     bf8:	60 2f       	mov	r22, r16
     bfa:	8d 2f       	mov	r24, r29
     bfc:	88 df       	rcall	.-240    	; 0xb0e <gfx_mono_st7565r_get_byte>
     bfe:	4f 2d       	mov	r20, r15
     c00:	48 27       	eor	r20, r24
     c02:	60 2f       	mov	r22, r16
     c04:	8d 2f       	mov	r24, r29
     c06:	64 de       	rcall	.-824    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     c08:	c1 50       	subi	r28, 0x01	; 1
     c0a:	a1 f7       	brne	.-24     	; 0xbf4 <gfx_mono_generic_draw_horizontal_line+0xa0>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	08 95       	ret

00000c18 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	if (height == 0) {
     c22:	22 23       	and	r18, r18
     c24:	69 f0       	breq	.+26     	; 0xc40 <gfx_mono_generic_draw_filled_rect+0x28>
     c26:	f4 2e       	mov	r15, r20
     c28:	18 2f       	mov	r17, r24
     c2a:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c2c:	df ef       	ldi	r29, 0xFF	; 255
     c2e:	d6 0f       	add	r29, r22
     c30:	6d 2f       	mov	r22, r29
     c32:	6c 0f       	add	r22, r28
     c34:	20 2f       	mov	r18, r16
     c36:	4f 2d       	mov	r20, r15
     c38:	81 2f       	mov	r24, r17
     c3a:	8c df       	rcall	.-232    	; 0xb54 <gfx_mono_generic_draw_horizontal_line>
     c3c:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c3e:	c1 f7       	brne	.-16     	; 0xc30 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	08 95       	ret

00000c4c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	c8 2f       	mov	r28, r24
     c62:	e6 2e       	mov	r14, r22
     c64:	b4 2e       	mov	r11, r20
     c66:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c68:	00 e0       	ldi	r16, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	24 81       	ldd	r18, Z+4	; 0x04
     c6e:	43 81       	ldd	r20, Z+3	; 0x03
     c70:	6b 2d       	mov	r22, r11
     c72:	8e 2d       	mov	r24, r14
     c74:	d1 df       	rcall	.-94     	; 0xc18 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c76:	f6 01       	movw	r30, r12
     c78:	80 81       	ld	r24, Z
     c7a:	81 11       	cpse	r24, r1
     c7c:	39 c0       	rjmp	.+114    	; 0xcf0 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c7e:	83 81       	ldd	r24, Z+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	26 95       	lsr	r18
     c84:	26 95       	lsr	r18
     c86:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c88:	87 70       	andi	r24, 0x07	; 7
     c8a:	09 f0       	breq	.+2      	; 0xc8e <gfx_mono_draw_char+0x42>
		char_row_size++;
     c8c:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c8e:	f6 01       	movw	r30, r12
     c90:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c92:	8c 2f       	mov	r24, r28
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	35 81       	ldd	r19, Z+5	; 0x05
     c98:	83 1b       	sub	r24, r19
     c9a:	91 09       	sbc	r25, r1
     c9c:	2a 9d       	mul	r18, r10
     c9e:	90 01       	movw	r18, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	82 9f       	mul	r24, r18
     ca4:	a0 01       	movw	r20, r0
     ca6:	83 9f       	mul	r24, r19
     ca8:	50 0d       	add	r21, r0
     caa:	92 9f       	mul	r25, r18
     cac:	50 0d       	add	r21, r0
     cae:	11 24       	eor	r1, r1
     cb0:	01 81       	ldd	r16, Z+1	; 0x01
     cb2:	12 81       	ldd	r17, Z+2	; 0x02
     cb4:	04 0f       	add	r16, r20
     cb6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     cb8:	f6 01       	movw	r30, r12
     cba:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     cbc:	ff 20       	and	r15, r15
     cbe:	a1 f0       	breq	.+40     	; 0xce8 <gfx_mono_draw_char+0x9c>
     cc0:	d0 e0       	ldi	r29, 0x00	; 0
     cc2:	c0 e0       	ldi	r28, 0x00	; 0
     cc4:	8e 2d       	mov	r24, r14
     cc6:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cc8:	9c 2f       	mov	r25, r28
     cca:	97 70       	andi	r25, 0x07	; 7
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     cce:	f8 01       	movw	r30, r16
     cd0:	d4 91       	lpm	r29, Z
				glyph_data++;
     cd2:	0f 5f       	subi	r16, 0xFF	; 255
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     cd6:	dd 23       	and	r29, r29
     cd8:	1c f4       	brge	.+6      	; 0xce0 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	6b 2d       	mov	r22, r11
     cde:	e1 de       	rcall	.-574    	; 0xaa2 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     ce0:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     ce2:	cf 5f       	subi	r28, 0xFF	; 255
     ce4:	fc 12       	cpse	r15, r28
     ce6:	ee cf       	rjmp	.-36     	; 0xcc4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     ce8:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     cea:	aa 94       	dec	r10
	} while (rows_left > 0);
     cec:	a1 10       	cpse	r10, r1
     cee:	e4 cf       	rjmp	.-56     	; 0xcb8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	08 95       	ret

00000d06 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	d6 2e       	mov	r13, r22
     d16:	04 2f       	mov	r16, r20
     d18:	79 01       	movw	r14, r18
     d1a:	ec 01       	movw	r28, r24
     d1c:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d1e:	89 91       	ld	r24, Y+
     d20:	8a 30       	cpi	r24, 0x0A	; 10
     d22:	31 f4       	brne	.+12     	; 0xd30 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d24:	f7 01       	movw	r30, r14
     d26:	84 81       	ldd	r24, Z+4	; 0x04
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d2c:	1d 2d       	mov	r17, r13
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d30:	8d 30       	cpi	r24, 0x0D	; 13
     d32:	39 f0       	breq	.+14     	; 0xd42 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d34:	97 01       	movw	r18, r14
     d36:	40 2f       	mov	r20, r16
     d38:	61 2f       	mov	r22, r17
     d3a:	88 df       	rcall	.-240    	; 0xc4c <gfx_mono_draw_char>
			x += font->width;
     d3c:	f7 01       	movw	r30, r14
     d3e:	83 81       	ldd	r24, Z+3	; 0x03
     d40:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d42:	88 81       	ld	r24, Y
     d44:	81 11       	cpse	r24, r1
     d46:	eb cf       	rjmp	.-42     	; 0xd1e <gfx_mono_draw_string+0x18>
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	08 95       	ret

00000d58 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d62:	c6 2f       	mov	r28, r22
     d64:	d0 e0       	ldi	r29, 0x00	; 0
     d66:	de 01       	movw	r26, r28
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <ioport_configure_port_pin+0x18>
     d6c:	b5 95       	asr	r27
     d6e:	a7 95       	ror	r26
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <ioport_configure_port_pin+0x14>
     d74:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d76:	50 8b       	std	Z+16, r21	; 0x10
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d7e:	28 30       	cpi	r18, 0x08	; 8
     d80:	31 05       	cpc	r19, r1
     d82:	89 f7       	brne	.-30     	; 0xd66 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d84:	40 ff       	sbrs	r20, 0
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d88:	41 ff       	sbrs	r20, 1
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d8c:	fc 01       	movw	r30, r24
     d8e:	65 83       	std	Z+5, r22	; 0x05
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d92:	fc 01       	movw	r30, r24
     d94:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d96:	fc 01       	movw	r30, r24
     d98:	61 83       	std	Z+1, r22	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d9c:	fc 01       	movw	r30, r24
     d9e:	62 83       	std	Z+2, r22	; 0x02
	}
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     da6:	80 3a       	cpi	r24, 0xA0	; 160
     da8:	28 e0       	ldi	r18, 0x08	; 8
     daa:	92 07       	cpc	r25, r18
     dac:	21 f4       	brne	.+8      	; 0xdb6 <usart_spi_init+0x10>
     dae:	60 e1       	ldi	r22, 0x10	; 16
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	78 cd       	rjmp	.-1296   	; 0x8a4 <sysclk_enable_module>
     db4:	08 95       	ret
     db6:	80 3b       	cpi	r24, 0xB0	; 176
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	92 07       	cpc	r25, r18
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <usart_spi_init+0x20>
     dbe:	60 e2       	ldi	r22, 0x20	; 32
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	70 cd       	rjmp	.-1312   	; 0x8a4 <sysclk_enable_module>
     dc4:	08 95       	ret
     dc6:	80 3a       	cpi	r24, 0xA0	; 160
     dc8:	29 e0       	ldi	r18, 0x09	; 9
     dca:	92 07       	cpc	r25, r18
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <usart_spi_init+0x30>
     dce:	60 e1       	ldi	r22, 0x10	; 16
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	68 cd       	rjmp	.-1328   	; 0x8a4 <sysclk_enable_module>
     dd4:	08 95       	ret
     dd6:	80 3b       	cpi	r24, 0xB0	; 176
     dd8:	29 e0       	ldi	r18, 0x09	; 9
     dda:	92 07       	cpc	r25, r18
     ddc:	21 f4       	brne	.+8      	; 0xde6 <usart_spi_init+0x40>
     dde:	60 e2       	ldi	r22, 0x20	; 32
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	60 cd       	rjmp	.-1344   	; 0x8a4 <sysclk_enable_module>
     de4:	08 95       	ret
     de6:	80 3a       	cpi	r24, 0xA0	; 160
     de8:	2a e0       	ldi	r18, 0x0A	; 10
     dea:	92 07       	cpc	r25, r18
     dec:	21 f4       	brne	.+8      	; 0xdf6 <usart_spi_init+0x50>
     dee:	60 e1       	ldi	r22, 0x10	; 16
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	58 cd       	rjmp	.-1360   	; 0x8a4 <sysclk_enable_module>
     df4:	08 95       	ret
     df6:	80 3a       	cpi	r24, 0xA0	; 160
     df8:	9b 40       	sbci	r25, 0x0B	; 11
     dfa:	19 f4       	brne	.+6      	; 0xe02 <usart_spi_init+0x5c>
     dfc:	60 e1       	ldi	r22, 0x10	; 16
     dfe:	86 e0       	ldi	r24, 0x06	; 6
     e00:	51 cd       	rjmp	.-1374   	; 0x8a4 <sysclk_enable_module>
     e02:	08 95       	ret

00000e04 <usart_spi_setup_device>:
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <usart_spi_setup_device+0xa>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <usart_spi_setup_device+0xc>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	09 83       	std	Y+1, r16	; 0x01
     e16:	1a 83       	std	Y+2, r17	; 0x02
     e18:	2b 83       	std	Y+3, r18	; 0x03
     e1a:	3c 83       	std	Y+4, r19	; 0x04
     e1c:	4d 83       	std	Y+5, r20	; 0x05
     e1e:	1e 82       	std	Y+6, r1	; 0x06
     e20:	be 01       	movw	r22, r28
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	03 d1       	rcall	.+518    	; 0x102e <usart_init_spi>
     e28:	26 96       	adiw	r28, 0x06	; 6
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e38:	fb 01       	movw	r30, r22
     e3a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e3c:	e8 2f       	mov	r30, r24
     e3e:	e6 95       	lsr	r30
     e40:	e6 95       	lsr	r30
     e42:	e6 95       	lsr	r30
     e44:	40 e2       	ldi	r20, 0x20	; 32
     e46:	e4 9f       	mul	r30, r20
     e48:	f0 01       	movw	r30, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	a9 01       	movw	r20, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <usart_spi_select_device+0x24>
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	8a 95       	dec	r24
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e60:	46 83       	std	Z+6, r20	; 0x06
     e62:	08 95       	ret

00000e64 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e64:	fb 01       	movw	r30, r22
     e66:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e68:	e8 2f       	mov	r30, r24
     e6a:	e6 95       	lsr	r30
     e6c:	e6 95       	lsr	r30
     e6e:	e6 95       	lsr	r30
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	e4 9f       	mul	r30, r20
     e74:	f0 01       	movw	r30, r0
     e76:	11 24       	eor	r1, r1
     e78:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e7a:	87 70       	andi	r24, 0x07	; 7
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <usart_spi_deselect_device+0x24>
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	8a 95       	dec	r24
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e8c:	45 83       	std	Z+5, r20	; 0x05
     e8e:	08 95       	ret

00000e90 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e90:	43 e0       	ldi	r20, 0x03	; 3
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	80 ee       	ldi	r24, 0xE0	; 224
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	5e df       	rcall	.-324    	; 0xd58 <ioport_configure_port_pin>
     e9c:	43 e0       	ldi	r20, 0x03	; 3
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	80 ee       	ldi	r24, 0xE0	; 224
     ea4:	97 e0       	ldi	r25, 0x07	; 7
     ea6:	58 df       	rcall	.-336    	; 0xd58 <ioport_configure_port_pin>
     ea8:	43 e0       	ldi	r20, 0x03	; 3
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	60 e1       	ldi	r22, 0x10	; 16
     eae:	80 e6       	ldi	r24, 0x60	; 96
     eb0:	96 e0       	ldi	r25, 0x06	; 6
     eb2:	52 df       	rcall	.-348    	; 0xd58 <ioport_configure_port_pin>
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	50 e4       	ldi	r21, 0x40	; 64
     eb8:	60 e2       	ldi	r22, 0x20	; 32
     eba:	80 e6       	ldi	r24, 0x60	; 96
     ebc:	96 e0       	ldi	r25, 0x06	; 6
     ebe:	4c df       	rcall	.-360    	; 0xd58 <ioport_configure_port_pin>
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	5b e1       	ldi	r21, 0x1B	; 27
     ec4:	60 e2       	ldi	r22, 0x20	; 32
     ec6:	80 e8       	ldi	r24, 0x80	; 128
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	46 df       	rcall	.-372    	; 0xd58 <ioport_configure_port_pin>
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	5b e1       	ldi	r21, 0x1B	; 27
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	80 ea       	ldi	r24, 0xA0	; 160
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	40 df       	rcall	.-384    	; 0xd58 <ioport_configure_port_pin>
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	5b e1       	ldi	r21, 0x1B	; 27
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	80 ea       	ldi	r24, 0xA0	; 160
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	3a df       	rcall	.-396    	; 0xd58 <ioport_configure_port_pin>
     ee4:	43 e0       	ldi	r20, 0x03	; 3
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	62 e0       	ldi	r22, 0x02	; 2
     eea:	80 e6       	ldi	r24, 0x60	; 96
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	34 df       	rcall	.-408    	; 0xd58 <ioport_configure_port_pin>
     ef0:	43 e0       	ldi	r20, 0x03	; 3
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	68 e0       	ldi	r22, 0x08	; 8
     ef6:	80 e6       	ldi	r24, 0x60	; 96
     ef8:	96 e0       	ldi	r25, 0x06	; 6
     efa:	2e df       	rcall	.-420    	; 0xd58 <ioport_configure_port_pin>
     efc:	43 e0       	ldi	r20, 0x03	; 3
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	68 e0       	ldi	r22, 0x08	; 8
     f02:	80 ea       	ldi	r24, 0xA0	; 160
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	28 df       	rcall	.-432    	; 0xd58 <ioport_configure_port_pin>
     f08:	43 e0       	ldi	r20, 0x03	; 3
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	96 e0       	ldi	r25, 0x06	; 6
     f12:	22 df       	rcall	.-444    	; 0xd58 <ioport_configure_port_pin>
     f14:	43 e0       	ldi	r20, 0x03	; 3
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	68 e0       	ldi	r22, 0x08	; 8
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	96 e0       	ldi	r25, 0x06	; 6
     f1e:	1c df       	rcall	.-456    	; 0xd58 <ioport_configure_port_pin>
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	60 e1       	ldi	r22, 0x10	; 16
     f26:	80 e8       	ldi	r24, 0x80	; 128
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	16 df       	rcall	.-468    	; 0xd58 <ioport_configure_port_pin>
     f2c:	43 e0       	ldi	r20, 0x03	; 3
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	62 e0       	ldi	r22, 0x02	; 2
     f32:	80 e6       	ldi	r24, 0x60	; 96
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	10 df       	rcall	.-480    	; 0xd58 <ioport_configure_port_pin>
     f38:	43 e0       	ldi	r20, 0x03	; 3
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	68 e0       	ldi	r22, 0x08	; 8
     f3e:	80 e6       	ldi	r24, 0x60	; 96
     f40:	96 e0       	ldi	r25, 0x06	; 6
     f42:	0a df       	rcall	.-492    	; 0xd58 <ioport_configure_port_pin>
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	64 e0       	ldi	r22, 0x04	; 4
     f4a:	80 e6       	ldi	r24, 0x60	; 96
     f4c:	96 e0       	ldi	r25, 0x06	; 6
     f4e:	04 df       	rcall	.-504    	; 0xd58 <ioport_configure_port_pin>
     f50:	43 e0       	ldi	r20, 0x03	; 3
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	60 e1       	ldi	r22, 0x10	; 16
     f56:	80 ea       	ldi	r24, 0xA0	; 160
     f58:	96 e0       	ldi	r25, 0x06	; 6
     f5a:	fe de       	rcall	.-516    	; 0xd58 <ioport_configure_port_pin>
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	f8 de       	rcall	.-528    	; 0xd58 <ioport_configure_port_pin>
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	64 e0       	ldi	r22, 0x04	; 4
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	96 e0       	ldi	r25, 0x06	; 6
     f72:	f2 de       	rcall	.-540    	; 0xd58 <ioport_configure_port_pin>
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	96 e0       	ldi	r25, 0x06	; 6
     f7e:	ec de       	rcall	.-552    	; 0xd58 <ioport_configure_port_pin>
     f80:	43 e0       	ldi	r20, 0x03	; 3
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	68 e0       	ldi	r22, 0x08	; 8
     f86:	80 e4       	ldi	r24, 0x40	; 64
     f88:	96 e0       	ldi	r25, 0x06	; 6
     f8a:	e6 de       	rcall	.-564    	; 0xd58 <ioport_configure_port_pin>
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	64 e0       	ldi	r22, 0x04	; 4
     f92:	80 e4       	ldi	r24, 0x40	; 64
     f94:	96 e0       	ldi	r25, 0x06	; 6
     f96:	e0 de       	rcall	.-576    	; 0xd58 <ioport_configure_port_pin>
     f98:	43 e0       	ldi	r20, 0x03	; 3
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	68 e0       	ldi	r22, 0x08	; 8
     f9e:	80 e6       	ldi	r24, 0x60	; 96
     fa0:	96 e0       	ldi	r25, 0x06	; 6
     fa2:	da de       	rcall	.-588    	; 0xd58 <ioport_configure_port_pin>
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	64 e0       	ldi	r22, 0x04	; 4
     faa:	80 e6       	ldi	r24, 0x60	; 96
     fac:	96 e0       	ldi	r25, 0x06	; 6
     fae:	d4 de       	rcall	.-600    	; 0xd58 <ioport_configure_port_pin>
     fb0:	43 e0       	ldi	r20, 0x03	; 3
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	68 e0       	ldi	r22, 0x08	; 8
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	96 e0       	ldi	r25, 0x06	; 6
     fba:	ce de       	rcall	.-612    	; 0xd58 <ioport_configure_port_pin>
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	96 e0       	ldi	r25, 0x06	; 6
     fc6:	c8 ce       	rjmp	.-624    	; 0xd58 <ioport_configure_port_pin>
     fc8:	08 95       	ret

00000fca <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     fdc:	d9 01       	movw	r26, r18
     fde:	c8 01       	movw	r24, r16
     fe0:	b6 95       	lsr	r27
     fe2:	a7 95       	ror	r26
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	48 17       	cp	r20, r24
     fea:	59 07       	cpc	r21, r25
     fec:	6a 07       	cpc	r22, r26
     fee:	7b 07       	cpc	r23, r27
     ff0:	78 f4       	brcc	.+30     	; 0x1010 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     ff2:	6a 01       	movw	r12, r20
     ff4:	7b 01       	movw	r14, r22
     ff6:	cc 0c       	add	r12, r12
     ff8:	dd 1c       	adc	r13, r13
     ffa:	ee 1c       	adc	r14, r14
     ffc:	ff 1c       	adc	r15, r15
     ffe:	c9 01       	movw	r24, r18
    1000:	b8 01       	movw	r22, r16
    1002:	a7 01       	movw	r20, r14
    1004:	96 01       	movw	r18, r12
    1006:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__udivmodsi4>
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	31 09       	sbc	r19, r1
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1014:	83 2f       	mov	r24, r19
    1016:	8f 70       	andi	r24, 0x0F	; 15
    1018:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    101a:	2e 83       	std	Y+6, r18	; 0x06
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	08 95       	ret

0000102e <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	1f 92       	push	r1
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	7c 01       	movw	r14, r24
    1044:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	09 f4       	brne	.+2      	; 0x104c <usart_init_spi+0x1e>
    104a:	b2 c1       	rjmp	.+868    	; 0x13b0 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    104c:	80 3c       	cpi	r24, 0xC0	; 192
    104e:	91 05       	cpc	r25, r1
    1050:	21 f4       	brne	.+8      	; 0x105a <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1052:	60 e1       	ldi	r22, 0x10	; 16
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	26 dc       	rcall	.-1972   	; 0x8a4 <sysclk_enable_module>
    1058:	ab c1       	rjmp	.+854    	; 0x13b0 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    105a:	80 e8       	ldi	r24, 0x80	; 128
    105c:	e8 16       	cp	r14, r24
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	f8 06       	cpc	r15, r24
    1062:	21 f4       	brne	.+8      	; 0x106c <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	1d dc       	rcall	.-1990   	; 0x8a4 <sysclk_enable_module>
    106a:	a2 c1       	rjmp	.+836    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    106c:	e1 14       	cp	r14, r1
    106e:	e1 e0       	ldi	r30, 0x01	; 1
    1070:	fe 06       	cpc	r15, r30
    1072:	21 f4       	brne	.+8      	; 0x107c <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	15 dc       	rcall	.-2006   	; 0x8a4 <sysclk_enable_module>
    107a:	9a c1       	rjmp	.+820    	; 0x13b0 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    107c:	f0 e8       	ldi	r31, 0x80	; 128
    107e:	ef 16       	cp	r14, r31
    1080:	f3 e0       	ldi	r31, 0x03	; 3
    1082:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1084:	21 f4       	brne	.+8      	; 0x108e <usart_init_spi+0x60>
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0c dc       	rcall	.-2024   	; 0x8a4 <sysclk_enable_module>
    108c:	91 c1       	rjmp	.+802    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    108e:	30 e9       	ldi	r19, 0x90	; 144
    1090:	e3 16       	cp	r14, r19
    1092:	33 e0       	ldi	r19, 0x03	; 3
    1094:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1096:	21 f4       	brne	.+8      	; 0x10a0 <usart_init_spi+0x72>
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	03 dc       	rcall	.-2042   	; 0x8a4 <sysclk_enable_module>
    109e:	88 c1       	rjmp	.+784    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    10a0:	e1 14       	cp	r14, r1
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <usart_init_spi+0x82>
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	fb db       	rcall	.-2058   	; 0x8a4 <sysclk_enable_module>
    10ae:	80 c1       	rjmp	.+768    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    10b0:	e0 e4       	ldi	r30, 0x40	; 64
    10b2:	ee 16       	cp	r14, r30
    10b4:	e2 e0       	ldi	r30, 0x02	; 2
    10b6:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <usart_init_spi+0x94>
    10ba:	62 e0       	ldi	r22, 0x02	; 2
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	f2 db       	rcall	.-2076   	; 0x8a4 <sysclk_enable_module>
    10c0:	77 c1       	rjmp	.+750    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    10c2:	f0 e2       	ldi	r31, 0x20	; 32
    10c4:	ef 16       	cp	r14, r31
    10c6:	f3 e0       	ldi	r31, 0x03	; 3
    10c8:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <usart_init_spi+0xa6>
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	e9 db       	rcall	.-2094   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    10d2:	6e c1       	rjmp	.+732    	; 0x13b0 <usart_init_spi+0x382>
    10d4:	e1 14       	cp	r14, r1
    10d6:	38 e0       	ldi	r19, 0x08	; 8
    10d8:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10da:	21 f4       	brne	.+8      	; 0x10e4 <usart_init_spi+0xb6>
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	e1 db       	rcall	.-2110   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10e2:	66 c1       	rjmp	.+716    	; 0x13b0 <usart_init_spi+0x382>
    10e4:	e1 14       	cp	r14, r1
    10e6:	89 e0       	ldi	r24, 0x09	; 9
    10e8:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10ea:	21 f4       	brne	.+8      	; 0x10f4 <usart_init_spi+0xc6>
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	d9 db       	rcall	.-2126   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10f2:	5e c1       	rjmp	.+700    	; 0x13b0 <usart_init_spi+0x382>
    10f4:	e1 14       	cp	r14, r1
    10f6:	ea e0       	ldi	r30, 0x0A	; 10
    10f8:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10fa:	21 f4       	brne	.+8      	; 0x1104 <usart_init_spi+0xd6>
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	85 e0       	ldi	r24, 0x05	; 5
    1100:	d1 db       	rcall	.-2142   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1102:	56 c1       	rjmp	.+684    	; 0x13b0 <usart_init_spi+0x382>
    1104:	e1 14       	cp	r14, r1
    1106:	fb e0       	ldi	r31, 0x0B	; 11
    1108:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    110a:	21 f4       	brne	.+8      	; 0x1114 <usart_init_spi+0xe6>
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	86 e0       	ldi	r24, 0x06	; 6
    1110:	c9 db       	rcall	.-2158   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1112:	4e c1       	rjmp	.+668    	; 0x13b0 <usart_init_spi+0x382>
    1114:	30 e4       	ldi	r19, 0x40	; 64
    1116:	e3 16       	cp	r14, r19
    1118:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    111a:	f3 06       	cpc	r15, r19
    111c:	21 f4       	brne	.+8      	; 0x1126 <usart_init_spi+0xf8>
    111e:	62 e0       	ldi	r22, 0x02	; 2
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	c0 db       	rcall	.-2176   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1124:	45 c1       	rjmp	.+650    	; 0x13b0 <usart_init_spi+0x382>
    1126:	80 e4       	ldi	r24, 0x40	; 64
    1128:	e8 16       	cp	r14, r24
    112a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    112c:	f8 06       	cpc	r15, r24
    112e:	21 f4       	brne	.+8      	; 0x1138 <usart_init_spi+0x10a>
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	b7 db       	rcall	.-2194   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1136:	3c c1       	rjmp	.+632    	; 0x13b0 <usart_init_spi+0x382>
    1138:	e0 e4       	ldi	r30, 0x40	; 64
    113a:	ee 16       	cp	r14, r30
    113c:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    113e:	fe 06       	cpc	r15, r30
    1140:	21 f4       	brne	.+8      	; 0x114a <usart_init_spi+0x11c>
    1142:	62 e0       	ldi	r22, 0x02	; 2
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	ae db       	rcall	.-2212   	; 0x8a4 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1148:	33 c1       	rjmp	.+614    	; 0x13b0 <usart_init_spi+0x382>
    114a:	f0 e9       	ldi	r31, 0x90	; 144
    114c:	ef 16       	cp	r14, r31
    114e:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1150:	ff 06       	cpc	r15, r31
    1152:	21 f4       	brne	.+8      	; 0x115c <usart_init_spi+0x12e>
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	a5 db       	rcall	.-2230   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    115a:	2a c1       	rjmp	.+596    	; 0x13b0 <usart_init_spi+0x382>
    115c:	30 e9       	ldi	r19, 0x90	; 144
    115e:	e3 16       	cp	r14, r19
    1160:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1162:	f3 06       	cpc	r15, r19
    1164:	21 f4       	brne	.+8      	; 0x116e <usart_init_spi+0x140>
    1166:	64 e0       	ldi	r22, 0x04	; 4
    1168:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    116a:	9c db       	rcall	.-2248   	; 0x8a4 <sysclk_enable_module>
    116c:	21 c1       	rjmp	.+578    	; 0x13b0 <usart_init_spi+0x382>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	e8 16       	cp	r14, r24
    1172:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1174:	f8 06       	cpc	r15, r24
    1176:	21 f4       	brne	.+8      	; 0x1180 <usart_init_spi+0x152>
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    117c:	93 db       	rcall	.-2266   	; 0x8a4 <sysclk_enable_module>
    117e:	18 c1       	rjmp	.+560    	; 0x13b0 <usart_init_spi+0x382>
    1180:	e0 e9       	ldi	r30, 0x90	; 144
    1182:	ee 16       	cp	r14, r30
    1184:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1186:	fe 06       	cpc	r15, r30
    1188:	21 f4       	brne	.+8      	; 0x1192 <usart_init_spi+0x164>
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    118e:	8a db       	rcall	.-2284   	; 0x8a4 <sysclk_enable_module>
    1190:	0f c1       	rjmp	.+542    	; 0x13b0 <usart_init_spi+0x382>
    1192:	f0 ec       	ldi	r31, 0xC0	; 192
    1194:	ef 16       	cp	r14, r31
    1196:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1198:	ff 06       	cpc	r15, r31
    119a:	21 f4       	brne	.+8      	; 0x11a4 <usart_init_spi+0x176>
    119c:	68 e0       	ldi	r22, 0x08	; 8
    119e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    11a0:	81 db       	rcall	.-2302   	; 0x8a4 <sysclk_enable_module>
    11a2:	06 c1       	rjmp	.+524    	; 0x13b0 <usart_init_spi+0x382>
    11a4:	30 ec       	ldi	r19, 0xC0	; 192
    11a6:	e3 16       	cp	r14, r19
    11a8:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    11aa:	f3 06       	cpc	r15, r19
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <usart_init_spi+0x188>
    11ae:	68 e0       	ldi	r22, 0x08	; 8
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	78 db       	rcall	.-2320   	; 0x8a4 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    11b4:	fd c0       	rjmp	.+506    	; 0x13b0 <usart_init_spi+0x382>
    11b6:	80 ea       	ldi	r24, 0xA0	; 160
    11b8:	e8 16       	cp	r14, r24
    11ba:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    11bc:	f8 06       	cpc	r15, r24
    11be:	61 f4       	brne	.+24     	; 0x11d8 <usart_init_spi+0x1aa>
    11c0:	60 e1       	ldi	r22, 0x10	; 16
    11c2:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    11c4:	6f db       	rcall	.-2338   	; 0x8a4 <sysclk_enable_module>
    11c6:	e0 ea       	ldi	r30, 0xA0	; 160
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    11cc:	8f 7e       	andi	r24, 0xEF	; 239
    11ce:	84 83       	std	Z+4, r24	; 0x04
    11d0:	f8 01       	movw	r30, r16
    11d2:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    11d4:	22 50       	subi	r18, 0x02	; 2
    11d6:	4c c0       	rjmp	.+152    	; 0x1270 <usart_init_spi+0x242>
    11d8:	f0 ea       	ldi	r31, 0xA0	; 160
    11da:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11dc:	f9 e0       	ldi	r31, 0x09	; 9
    11de:	ff 06       	cpc	r15, r31
    11e0:	21 f4       	brne	.+8      	; 0x11ea <usart_init_spi+0x1bc>
    11e2:	60 e1       	ldi	r22, 0x10	; 16
    11e4:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11e6:	5e db       	rcall	.-2372   	; 0x8a4 <sysclk_enable_module>
    11e8:	e3 c0       	rjmp	.+454    	; 0x13b0 <usart_init_spi+0x382>
    11ea:	30 ea       	ldi	r19, 0xA0	; 160
    11ec:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11ee:	3a e0       	ldi	r19, 0x0A	; 10
    11f0:	f3 06       	cpc	r15, r19
    11f2:	21 f4       	brne	.+8      	; 0x11fc <usart_init_spi+0x1ce>
    11f4:	60 e1       	ldi	r22, 0x10	; 16
    11f6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11f8:	55 db       	rcall	.-2390   	; 0x8a4 <sysclk_enable_module>
    11fa:	da c0       	rjmp	.+436    	; 0x13b0 <usart_init_spi+0x382>
    11fc:	80 ea       	ldi	r24, 0xA0	; 160
    11fe:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1200:	8b e0       	ldi	r24, 0x0B	; 11
    1202:	f8 06       	cpc	r15, r24
    1204:	21 f4       	brne	.+8      	; 0x120e <usart_init_spi+0x1e0>
    1206:	60 e1       	ldi	r22, 0x10	; 16
    1208:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    120a:	4c db       	rcall	.-2408   	; 0x8a4 <sysclk_enable_module>
    120c:	d1 c0       	rjmp	.+418    	; 0x13b0 <usart_init_spi+0x382>
    120e:	e0 eb       	ldi	r30, 0xB0	; 176
    1210:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1212:	e8 e0       	ldi	r30, 0x08	; 8
    1214:	fe 06       	cpc	r15, r30
    1216:	21 f4       	brne	.+8      	; 0x1220 <usart_init_spi+0x1f2>
    1218:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	43 db       	rcall	.-2426   	; 0x8a4 <sysclk_enable_module>
    121e:	c8 c0       	rjmp	.+400    	; 0x13b0 <usart_init_spi+0x382>
    1220:	f0 eb       	ldi	r31, 0xB0	; 176
    1222:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1224:	f9 e0       	ldi	r31, 0x09	; 9
    1226:	ff 06       	cpc	r15, r31
    1228:	21 f4       	brne	.+8      	; 0x1232 <usart_init_spi+0x204>
    122a:	60 e2       	ldi	r22, 0x20	; 32
    122c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    122e:	3a db       	rcall	.-2444   	; 0x8a4 <sysclk_enable_module>
    1230:	bf c0       	rjmp	.+382    	; 0x13b0 <usart_init_spi+0x382>
    1232:	30 e8       	ldi	r19, 0x80	; 128
    1234:	e3 16       	cp	r14, r19
    1236:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1238:	f3 06       	cpc	r15, r19
    123a:	21 f4       	brne	.+8      	; 0x1244 <usart_init_spi+0x216>
    123c:	60 e4       	ldi	r22, 0x40	; 64
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	31 db       	rcall	.-2462   	; 0x8a4 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1242:	b6 c0       	rjmp	.+364    	; 0x13b0 <usart_init_spi+0x382>
    1244:	80 ea       	ldi	r24, 0xA0	; 160
    1246:	e8 16       	cp	r14, r24
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    124c:	21 f4       	brne	.+8      	; 0x1256 <usart_init_spi+0x228>
    124e:	60 e4       	ldi	r22, 0x40	; 64
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	28 db       	rcall	.-2480   	; 0x8a4 <sysclk_enable_module>
    1254:	ad c0       	rjmp	.+346    	; 0x13b0 <usart_init_spi+0x382>
    1256:	f7 01       	movw	r30, r14
    1258:	84 81       	ldd	r24, Z+4	; 0x04
    125a:	8f 7e       	andi	r24, 0xEF	; 239
    125c:	84 83       	std	Z+4, r24	; 0x04
    125e:	fb 01       	movw	r30, r22
    1260:	24 81       	ldd	r18, Z+4	; 0x04
    1262:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1264:	c7 01       	movw	r24, r14
    1266:	f0 ea       	ldi	r31, 0xA0	; 160
    1268:	ef 16       	cp	r14, r31
    126a:	f8 e0       	ldi	r31, 0x08	; 8
    126c:	ff 06       	cpc	r15, r31
    126e:	49 f4       	brne	.+18     	; 0x1282 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1270:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1274:	84 fd       	sbrc	r24, 4
    1276:	a5 c0       	rjmp	.+330    	; 0x13c2 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1278:	0f 2e       	mov	r0, r31
    127a:	f1 e1       	ldi	r31, 0x11	; 17
    127c:	df 2e       	mov	r13, r31
    127e:	f0 2d       	mov	r31, r0
    1280:	a4 c0       	rjmp	.+328    	; 0x13ca <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1282:	80 3b       	cpi	r24, 0xB0	; 176
    1284:	38 e0       	ldi	r19, 0x08	; 8
    1286:	93 07       	cpc	r25, r19
    1288:	91 f0       	breq	.+36     	; 0x12ae <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    128a:	80 3a       	cpi	r24, 0xA0	; 160
    128c:	e9 e0       	ldi	r30, 0x09	; 9
    128e:	9e 07       	cpc	r25, r30
    1290:	49 f4       	brne	.+18     	; 0x12a4 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1292:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1296:	34 fd       	sbrc	r19, 4
    1298:	9b c0       	rjmp	.+310    	; 0x13d0 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    129a:	0f 2e       	mov	r0, r31
    129c:	f9 e1       	ldi	r31, 0x19	; 25
    129e:	df 2e       	mov	r13, r31
    12a0:	f0 2d       	mov	r31, r0
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    12a4:	80 3b       	cpi	r24, 0xB0	; 176
    12a6:	f9 e0       	ldi	r31, 0x09	; 9
    12a8:	9f 07       	cpc	r25, r31
    12aa:	f1 f0       	breq	.+60     	; 0x12e8 <usart_init_spi+0x2ba>
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f5 e1       	ldi	r31, 0x15	; 21
    12b2:	df 2e       	mov	r13, r31
    12b4:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    12b6:	80 3a       	cpi	r24, 0xA0	; 160
    12b8:	3a e0       	ldi	r19, 0x0A	; 10
    12ba:	93 07       	cpc	r25, r19
    12bc:	49 f4       	brne	.+18     	; 0x12d0 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    12be:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    12c2:	84 fd       	sbrc	r24, 4
    12c4:	8a c0       	rjmp	.+276    	; 0x13da <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    12c6:	0f 2e       	mov	r0, r31
    12c8:	f1 e2       	ldi	r31, 0x21	; 33
    12ca:	df 2e       	mov	r13, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	15 c0       	rjmp	.+42     	; 0x12fa <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    12d0:	80 3a       	cpi	r24, 0xA0	; 160
    12d2:	9b 40       	sbci	r25, 0x0B	; 11
    12d4:	91 f4       	brne	.+36     	; 0x12fa <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    12d6:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    12da:	84 fd       	sbrc	r24, 4
    12dc:	0a c0       	rjmp	.+20     	; 0x12f2 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    12de:	0f 2e       	mov	r0, r31
    12e0:	f9 e2       	ldi	r31, 0x29	; 41
    12e2:	df 2e       	mov	r13, r31
    12e4:	f0 2d       	mov	r31, r0
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12e8:	0f 2e       	mov	r0, r31
    12ea:	fd e1       	ldi	r31, 0x1D	; 29
    12ec:	df 2e       	mov	r13, r31
    12ee:	f0 2d       	mov	r31, r0
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    12f2:	0f 2e       	mov	r0, r31
    12f4:	fd e2       	ldi	r31, 0x2D	; 45
    12f6:	df 2e       	mov	r13, r31
    12f8:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12fa:	ed 2d       	mov	r30, r13
    12fc:	e6 95       	lsr	r30
    12fe:	e6 95       	lsr	r30
    1300:	e6 95       	lsr	r30
    1302:	30 e2       	ldi	r19, 0x20	; 32
    1304:	e3 9f       	mul	r30, r19
    1306:	f0 01       	movw	r30, r0
    1308:	11 24       	eor	r1, r1
    130a:	fa 5f       	subi	r31, 0xFA	; 250
    130c:	3d 2d       	mov	r19, r13
    130e:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	03 2e       	mov	r0, r19
    1316:	02 c0       	rjmp	.+4      	; 0x131c <usart_init_spi+0x2ee>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1320:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	10 f0       	brcs	.+4      	; 0x132a <usart_init_spi+0x2fc>
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	01 c0       	rjmp	.+2      	; 0x132c <usart_init_spi+0x2fe>
    132a:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    132c:	df 01       	movw	r26, r30
    132e:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1330:	a3 0f       	add	r26, r19
    1332:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1334:	9f b7       	in	r25, 0x3f	; 63
    1336:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1338:	f8 94       	cli
	return flags;
    133a:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    133c:	2c 91       	ld	r18, X
    133e:	27 70       	andi	r18, 0x07	; 7
    1340:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1342:	9c 91       	ld	r25, X
    1344:	94 2b       	or	r25, r20
    1346:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1348:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    134a:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    134c:	f7 01       	movw	r30, r14
    134e:	85 81       	ldd	r24, Z+5	; 0x05
    1350:	80 6c       	ori	r24, 0xC0	; 192
    1352:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1354:	f8 01       	movw	r30, r16
    1356:	84 81       	ldd	r24, Z+4	; 0x04
    1358:	8d 7f       	andi	r24, 0xFD	; 253
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	29 f4       	brne	.+10     	; 0x1368 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    135e:	f7 01       	movw	r30, r14
    1360:	85 81       	ldd	r24, Z+5	; 0x05
    1362:	82 60       	ori	r24, 0x02	; 2
    1364:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <usart_init_spi+0x342>
    1368:	f7 01       	movw	r30, r14
    136a:	85 81       	ldd	r24, Z+5	; 0x05
    136c:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    136e:	85 83       	std	Z+5, r24	; 0x05
    1370:	f8 01       	movw	r30, r16
    1372:	85 81       	ldd	r24, Z+5	; 0x05
    1374:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1376:	29 f0       	breq	.+10     	; 0x1382 <usart_init_spi+0x354>
    1378:	f7 01       	movw	r30, r14
    137a:	85 81       	ldd	r24, Z+5	; 0x05
    137c:	84 60       	ori	r24, 0x04	; 4
    137e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1380:	04 c0       	rjmp	.+8      	; 0x138a <usart_init_spi+0x35c>
    1382:	f7 01       	movw	r30, r14
    1384:	85 81       	ldd	r24, Z+5	; 0x05
    1386:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1388:	85 83       	std	Z+5, r24	; 0x05
    138a:	f8 01       	movw	r30, r16
    138c:	40 81       	ld	r20, Z
    138e:	51 81       	ldd	r21, Z+1	; 0x01
    1390:	62 81       	ldd	r22, Z+2	; 0x02
    1392:	73 81       	ldd	r23, Z+3	; 0x03
    1394:	00 e8       	ldi	r16, 0x80	; 128
    1396:	14 e8       	ldi	r17, 0x84	; 132
    1398:	2e e1       	ldi	r18, 0x1E	; 30
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	c7 01       	movw	r24, r14
    139e:	15 de       	rcall	.-982    	; 0xfca <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    13a0:	f7 01       	movw	r30, r14
    13a2:	84 81       	ldd	r24, Z+4	; 0x04
    13a4:	88 60       	ori	r24, 0x08	; 8
    13a6:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13ae:	1a c0       	rjmp	.+52     	; 0x13e4 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    13b0:	f7 01       	movw	r30, r14
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	8f 7e       	andi	r24, 0xEF	; 239
    13b6:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    13b8:	f8 01       	movw	r30, r16
    13ba:	24 81       	ldd	r18, Z+4	; 0x04
    13bc:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    13be:	c7 01       	movw	r24, r14
    13c0:	60 cf       	rjmp	.-320    	; 0x1282 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    13c2:	0f 2e       	mov	r0, r31
    13c4:	f5 e1       	ldi	r31, 0x15	; 21
    13c6:	df 2e       	mov	r13, r31
    13c8:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    13ca:	80 ea       	ldi	r24, 0xA0	; 160
    13cc:	98 e0       	ldi	r25, 0x08	; 8
    13ce:	6a cf       	rjmp	.-300    	; 0x12a4 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    13d0:	0f 2e       	mov	r0, r31
    13d2:	fd e1       	ldi	r31, 0x1D	; 29
    13d4:	df 2e       	mov	r13, r31
    13d6:	f0 2d       	mov	r31, r0
    13d8:	7b cf       	rjmp	.-266    	; 0x12d0 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    13da:	0f 2e       	mov	r0, r31
    13dc:	f5 e2       	ldi	r31, 0x25	; 37
    13de:	df 2e       	mov	r13, r31
    13e0:	f0 2d       	mov	r31, r0
    13e2:	8b cf       	rjmp	.-234    	; 0x12fa <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13e4:	0f 90       	pop	r0
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	08 95       	ret

000013f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13f6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13f8:	03 96       	adiw	r24, 0x03	; 3
    13fa:	81 83       	std	Z+1, r24	; 0x01
    13fc:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	23 83       	std	Z+3, r18	; 0x03
    1404:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1406:	85 83       	std	Z+5, r24	; 0x05
    1408:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    140a:	87 83       	std	Z+7, r24	; 0x07
    140c:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    140e:	10 82       	st	Z, r1
    1410:	08 95       	ret

00001412 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1412:	fc 01       	movw	r30, r24
    1414:	10 86       	std	Z+8, r1	; 0x08
    1416:	11 86       	std	Z+9, r1	; 0x09
    1418:	08 95       	ret

0000141a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	9c 01       	movw	r18, r24
    1420:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1422:	dc 01       	movw	r26, r24
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	cd 91       	ld	r28, X+
    1428:	dc 91       	ld	r29, X
    142a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    142c:	c2 83       	std	Z+2, r28	; 0x02
    142e:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	84 83       	std	Z+4, r24	; 0x04
    1436:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	dc 01       	movw	r26, r24
    143e:	12 96       	adiw	r26, 0x02	; 2
    1440:	6d 93       	st	X+, r22
    1442:	7c 93       	st	X, r23
    1444:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    1446:	6c 83       	std	Y+4, r22	; 0x04
    1448:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    144a:	20 87       	std	Z+8, r18	; 0x08
    144c:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    144e:	f9 01       	movw	r30, r18
    1450:	80 81       	ld	r24, Z
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 83       	st	Z, r24
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1462:	48 81       	ld	r20, Y
    1464:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1466:	4f 3f       	cpi	r20, 0xFF	; 255
    1468:	2f ef       	ldi	r18, 0xFF	; 255
    146a:	52 07       	cpc	r21, r18
    146c:	21 f4       	brne	.+8      	; 0x1476 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    146e:	fc 01       	movw	r30, r24
    1470:	a7 81       	ldd	r26, Z+7	; 0x07
    1472:	b0 85       	ldd	r27, Z+8	; 0x08
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1476:	dc 01       	movw	r26, r24
    1478:	13 96       	adiw	r26, 0x03	; 3
    147a:	01 c0       	rjmp	.+2      	; 0x147e <vListInsert+0x22>
    147c:	df 01       	movw	r26, r30
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	13 97       	sbiw	r26, 0x03	; 3
    1486:	20 81       	ld	r18, Z
    1488:	31 81       	ldd	r19, Z+1	; 0x01
    148a:	42 17       	cp	r20, r18
    148c:	53 07       	cpc	r21, r19
    148e:	b0 f7       	brcc	.-20     	; 0x147c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1490:	12 96       	adiw	r26, 0x02	; 2
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	13 97       	sbiw	r26, 0x03	; 3
    1498:	ea 83       	std	Y+2, r30	; 0x02
    149a:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    149c:	c4 83       	std	Z+4, r28	; 0x04
    149e:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    14a0:	ac 83       	std	Y+4, r26	; 0x04
    14a2:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    14a4:	12 96       	adiw	r26, 0x02	; 2
    14a6:	cd 93       	st	X+, r28
    14a8:	dc 93       	st	X, r29
    14aa:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14ac:	88 87       	std	Y+8, r24	; 0x08
    14ae:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 81       	ld	r18, Z
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	20 83       	st	Z, r18
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    14c4:	a0 85       	ldd	r26, Z+8	; 0x08
    14c6:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14c8:	c2 81       	ldd	r28, Z+2	; 0x02
    14ca:	d3 81       	ldd	r29, Z+3	; 0x03
    14cc:	84 81       	ldd	r24, Z+4	; 0x04
    14ce:	95 81       	ldd	r25, Z+5	; 0x05
    14d0:	8c 83       	std	Y+4, r24	; 0x04
    14d2:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14d4:	c4 81       	ldd	r28, Z+4	; 0x04
    14d6:	d5 81       	ldd	r29, Z+5	; 0x05
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	12 97       	sbiw	r26, 0x02	; 2
    14e8:	e8 17       	cp	r30, r24
    14ea:	f9 07       	cpc	r31, r25
    14ec:	31 f4       	brne	.+12     	; 0x14fa <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	95 81       	ldd	r25, Z+5	; 0x05
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	8d 93       	st	X+, r24
    14f6:	9c 93       	st	X, r25
    14f8:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    14fa:	10 86       	std	Z+8, r1	; 0x08
    14fc:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    14fe:	8c 91       	ld	r24, X
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    1510:	71 e1       	ldi	r23, 0x11	; 17
    1512:	fc 01       	movw	r30, r24
    1514:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    1516:	31 97       	sbiw	r30, 0x01	; 1
    1518:	62 e2       	ldi	r22, 0x22	; 34
    151a:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    151c:	31 97       	sbiw	r30, 0x01	; 1
    151e:	23 e3       	ldi	r18, 0x33	; 51
    1520:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    1522:	01 2e       	mov	r0, r17
    1524:	00 0c       	add	r0, r0
    1526:	22 0b       	sbc	r18, r18
    1528:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    152a:	31 97       	sbiw	r30, 0x01	; 1
    152c:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    152e:	31 97       	sbiw	r30, 0x01	; 1
    1530:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1532:	31 97       	sbiw	r30, 0x01	; 1
    1534:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    1536:	31 97       	sbiw	r30, 0x01	; 1
    1538:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    153a:	31 97       	sbiw	r30, 0x01	; 1
    153c:	20 e8       	ldi	r18, 0x80	; 128
    153e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    1540:	31 97       	sbiw	r30, 0x01	; 1
    1542:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    1544:	31 97       	sbiw	r30, 0x01	; 1
    1546:	22 e0       	ldi	r18, 0x02	; 2
    1548:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    154a:	31 97       	sbiw	r30, 0x01	; 1
    154c:	23 e0       	ldi	r18, 0x03	; 3
    154e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    1550:	31 97       	sbiw	r30, 0x01	; 1
    1552:	24 e0       	ldi	r18, 0x04	; 4
    1554:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	25 e0       	ldi	r18, 0x05	; 5
    155a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	26 e0       	ldi	r18, 0x06	; 6
    1560:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    1562:	31 97       	sbiw	r30, 0x01	; 1
    1564:	27 e0       	ldi	r18, 0x07	; 7
    1566:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	28 e0       	ldi	r18, 0x08	; 8
    156c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	29 e0       	ldi	r18, 0x09	; 9
    1572:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    1574:	31 97       	sbiw	r30, 0x01	; 1
    1576:	20 e1       	ldi	r18, 0x10	; 16
    1578:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    157e:	31 97       	sbiw	r30, 0x01	; 1
    1580:	22 e1       	ldi	r18, 0x12	; 18
    1582:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	23 e1       	ldi	r18, 0x13	; 19
    1588:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	24 e1       	ldi	r18, 0x14	; 20
    158e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    1590:	31 97       	sbiw	r30, 0x01	; 1
    1592:	25 e1       	ldi	r18, 0x15	; 21
    1594:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	26 e1       	ldi	r18, 0x16	; 22
    159a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	27 e1       	ldi	r18, 0x17	; 23
    15a0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	28 e1       	ldi	r18, 0x18	; 24
    15a6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	29 e1       	ldi	r18, 0x19	; 25
    15ac:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	20 e2       	ldi	r18, 0x20	; 32
    15b2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	21 e2       	ldi	r18, 0x21	; 33
    15b8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	23 e2       	ldi	r18, 0x23	; 35
    15c2:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	26 e2       	ldi	r18, 0x26	; 38
    15d0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	27 e2       	ldi	r18, 0x27	; 39
    15d6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	28 e2       	ldi	r18, 0x28	; 40
    15dc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	29 e2       	ldi	r18, 0x29	; 41
    15e2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	20 e3       	ldi	r18, 0x30	; 48
    15e8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	21 e3       	ldi	r18, 0x31	; 49
    15ee:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    15f0:	87 97       	sbiw	r24, 0x27	; 39
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	08 95       	ret

000015f8 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    15f8:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    15fa:	e0 e7       	ldi	r30, 0x70	; 112
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	83 81       	ldd	r24, Z+3	; 0x03
    1600:	8a 7f       	andi	r24, 0xFA	; 250
    1602:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f8 e0       	ldi	r31, 0x08	; 8
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	9a ef       	ldi	r25, 0xFA	; 250
    160c:	86 a3       	std	Z+38, r24	; 0x26
    160e:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1614:	a0 ea       	ldi	r26, 0xA0	; 160
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	8c 91       	ld	r24, X
    161c:	12 97       	sbiw	r26, 0x02	; 2
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    1624:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    1626:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1628:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <pxCurrentTCB>
    162c:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1630:	0d 90       	ld	r0, X+
    1632:	0d be       	out	0x3d, r0	; 61
    1634:	0d 90       	ld	r0, X+
    1636:	0e be       	out	0x3e, r0	; 62
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	7f 90       	pop	r7
    166a:	6f 90       	pop	r6
    166c:	5f 90       	pop	r5
    166e:	4f 90       	pop	r4
    1670:	3f 90       	pop	r3
    1672:	2f 90       	pop	r2
    1674:	1f 90       	pop	r1
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    167c:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	08 95       	ret

00001682 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	0f 92       	push	r0
    168a:	1f 92       	push	r1
    168c:	11 24       	eor	r1, r1
    168e:	2f 92       	push	r2
    1690:	3f 92       	push	r3
    1692:	4f 92       	push	r4
    1694:	5f 92       	push	r5
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <pxCurrentTCB>
    16ce:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    16d2:	0d b6       	in	r0, 0x3d	; 61
    16d4:	0d 92       	st	X+, r0
    16d6:	0e b6       	in	r0, 0x3e	; 62
    16d8:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    16da:	07 d6       	rcall	.+3086   	; 0x22ea <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    16dc:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <pxCurrentTCB>
    16e0:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    16e4:	0d 90       	ld	r0, X+
    16e6:	0d be       	out	0x3d, r0	; 61
    16e8:	0d 90       	ld	r0, X+
    16ea:	0e be       	out	0x3e, r0	; 62
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	9f 90       	pop	r9
    171a:	8f 90       	pop	r8
    171c:	7f 90       	pop	r7
    171e:	6f 90       	pop	r6
    1720:	5f 90       	pop	r5
    1722:	4f 90       	pop	r4
    1724:	3f 90       	pop	r3
    1726:	2f 90       	pop	r2
    1728:	1f 90       	pop	r1
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1730:	08 95       	ret

00001732 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	0f 92       	push	r0
    173a:	1f 92       	push	r1
    173c:	11 24       	eor	r1, r1
    173e:	2f 92       	push	r2
    1740:	3f 92       	push	r3
    1742:	4f 92       	push	r4
    1744:	5f 92       	push	r5
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ef 93       	push	r30
    1778:	ff 93       	push	r31
    177a:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <pxCurrentTCB>
    177e:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1782:	0d b6       	in	r0, 0x3d	; 61
    1784:	0d 92       	st	X+, r0
    1786:	0e b6       	in	r0, 0x3e	; 62
    1788:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    178a:	44 d4       	rcall	.+2184   	; 0x2014 <xTaskIncrementTick>
    178c:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    178e:	ad d5       	rcall	.+2906   	; 0x22ea <vTaskSwitchContext>
    1790:	a0 91 ec 22 	lds	r26, 0x22EC	; 0x8022ec <pxCurrentTCB>
        }
        portRESTORE_CONTEXT();
    1794:	b0 91 ed 22 	lds	r27, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1798:	0d 90       	ld	r0, X+
    179a:	0d be       	out	0x3d, r0	; 61
    179c:	0d 90       	ld	r0, X+
    179e:	0e be       	out	0x3e, r0	; 62
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	5f 90       	pop	r5
    17d6:	4f 90       	pop	r4
    17d8:	3f 90       	pop	r3
    17da:	2f 90       	pop	r2
    17dc:	1f 90       	pop	r1
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	18 95       	reti

000017e6 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
    17ec:	03 d4       	rcall	.+2054   	; 0x1ff4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <malloc>
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    17f4:	ec 01       	movw	r28, r24
    17f6:	e1 d4       	rcall	.+2498   	; 0x21ba <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    17f8:	ce 01       	movw	r24, r28
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
	if( pv )
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	31 f0       	breq	.+12     	; 0x1814 <vPortFree+0x14>
    1808:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
    180a:	f4 d3       	rcall	.+2024   	; 0x1ff4 <vTaskSuspendAll>
		{
			free( pv );
    180c:	ce 01       	movw	r24, r28
    180e:	0e 94 67 17 	call	0x2ece	; 0x2ece <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    1812:	d3 d4       	rcall	.+2470   	; 0x21ba <xTaskResumeAll>
	}
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <prvCopyDataToQueue>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	14 2f       	mov	r17, r20
    1824:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1826:	44 23       	and	r20, r20
    1828:	d9 f1       	breq	.+118    	; 0x18a0 <prvCopyDataToQueue+0x86>
    182a:	11 11       	cpse	r17, r1
    182c:	16 c0       	rjmp	.+44     	; 0x185a <prvCopyDataToQueue+0x40>
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <memcpy>
    1838:	2c 8d       	ldd	r18, Y+28	; 0x1c
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	82 0f       	add	r24, r18
    1840:	91 1d       	adc	r25, r1
    1842:	8c 83       	std	Y+4, r24	; 0x04
    1844:	9d 83       	std	Y+5, r25	; 0x05
    1846:	2a 81       	ldd	r18, Y+2	; 0x02
    1848:	3b 81       	ldd	r19, Y+3	; 0x03
    184a:	82 17       	cp	r24, r18
    184c:	93 07       	cpc	r25, r19
    184e:	40 f1       	brcs	.+80     	; 0x18a0 <prvCopyDataToQueue+0x86>
    1850:	88 81       	ld	r24, Y
    1852:	99 81       	ldd	r25, Y+1	; 0x01
    1854:	8c 83       	std	Y+4, r24	; 0x04
    1856:	9d 83       	std	Y+5, r25	; 0x05
    1858:	23 c0       	rjmp	.+70     	; 0x18a0 <prvCopyDataToQueue+0x86>
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <memcpy>
    1864:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	91 95       	neg	r25
    186a:	81 95       	neg	r24
    186c:	91 09       	sbc	r25, r1
    186e:	2e 81       	ldd	r18, Y+6	; 0x06
    1870:	3f 81       	ldd	r19, Y+7	; 0x07
    1872:	28 0f       	add	r18, r24
    1874:	39 1f       	adc	r19, r25
    1876:	2e 83       	std	Y+6, r18	; 0x06
    1878:	3f 83       	std	Y+7, r19	; 0x07
    187a:	48 81       	ld	r20, Y
    187c:	59 81       	ldd	r21, Y+1	; 0x01
    187e:	24 17       	cp	r18, r20
    1880:	35 07       	cpc	r19, r21
    1882:	30 f4       	brcc	.+12     	; 0x1890 <prvCopyDataToQueue+0x76>
    1884:	2a 81       	ldd	r18, Y+2	; 0x02
    1886:	3b 81       	ldd	r19, Y+3	; 0x03
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	8e 83       	std	Y+6, r24	; 0x06
    188e:	9f 83       	std	Y+7, r25	; 0x07
    1890:	12 30       	cpi	r17, 0x02	; 2
    1892:	31 f4       	brne	.+12     	; 0x18a0 <prvCopyDataToQueue+0x86>
    1894:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1896:	88 23       	and	r24, r24
    1898:	19 f0       	breq	.+6      	; 0x18a0 <prvCopyDataToQueue+0x86>
    189a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    189c:	81 50       	subi	r24, 0x01	; 1
    189e:	8a 8f       	std	Y+26, r24	; 0x1a
    18a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	8a 8f       	std	Y+26, r24	; 0x1a
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	08 95       	ret

000018b0 <prvCopyDataFromQueue>:
    18b0:	fc 01       	movw	r30, r24
    18b2:	44 8d       	ldd	r20, Z+28	; 0x1c
    18b4:	44 23       	and	r20, r20
    18b6:	a9 f0       	breq	.+42     	; 0x18e2 <prvCopyDataFromQueue+0x32>
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	26 81       	ldd	r18, Z+6	; 0x06
    18bc:	37 81       	ldd	r19, Z+7	; 0x07
    18be:	24 0f       	add	r18, r20
    18c0:	35 1f       	adc	r19, r21
    18c2:	26 83       	std	Z+6, r18	; 0x06
    18c4:	37 83       	std	Z+7, r19	; 0x07
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	20 f0       	brcs	.+8      	; 0x18d8 <prvCopyDataFromQueue+0x28>
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	86 83       	std	Z+6, r24	; 0x06
    18d6:	97 83       	std	Z+7, r25	; 0x07
    18d8:	cb 01       	movw	r24, r22
    18da:	66 81       	ldd	r22, Z+6	; 0x06
    18dc:	77 81       	ldd	r23, Z+7	; 0x07
    18de:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <memcpy>
    18e2:	08 95       	ret

000018e4 <prvUnlockQueue>:
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	ec 01       	movw	r28, r24
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	0f 92       	push	r0
    18f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18f6:	18 16       	cp	r1, r24
    18f8:	ac f4       	brge	.+42     	; 0x1924 <prvUnlockQueue+0x40>
    18fa:	89 89       	ldd	r24, Y+17	; 0x11
    18fc:	81 11       	cpse	r24, r1
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <prvUnlockQueue+0x26>
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <prvUnlockQueue+0x40>
    1902:	89 89       	ldd	r24, Y+17	; 0x11
    1904:	81 11       	cpse	r24, r1
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <prvUnlockQueue+0x2c>
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <prvUnlockQueue+0x40>
    190a:	8e 01       	movw	r16, r28
    190c:	0f 5e       	subi	r16, 0xEF	; 239
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	c8 01       	movw	r24, r16
    1912:	8c d5       	rcall	.+2840   	; 0x242c <xTaskRemoveFromEventList>
    1914:	81 11       	cpse	r24, r1
    1916:	0c d6       	rcall	.+3096   	; 0x2530 <vTaskMissedYield>
    1918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191a:	81 50       	subi	r24, 0x01	; 1
    191c:	8e 8f       	std	Y+30, r24	; 0x1e
    191e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1920:	18 16       	cp	r1, r24
    1922:	7c f3       	brlt	.-34     	; 0x1902 <prvUnlockQueue+0x1e>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	8e 8f       	std	Y+30, r24	; 0x1e
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	0f 92       	push	r0
    1932:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1934:	18 16       	cp	r1, r24
    1936:	ac f4       	brge	.+42     	; 0x1962 <prvUnlockQueue+0x7e>
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	81 11       	cpse	r24, r1
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <prvUnlockQueue+0x64>
    193e:	11 c0       	rjmp	.+34     	; 0x1962 <prvUnlockQueue+0x7e>
    1940:	88 85       	ldd	r24, Y+8	; 0x08
    1942:	81 11       	cpse	r24, r1
    1944:	04 c0       	rjmp	.+8      	; 0x194e <prvUnlockQueue+0x6a>
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <prvUnlockQueue+0x7e>
    1948:	8e 01       	movw	r16, r28
    194a:	08 5f       	subi	r16, 0xF8	; 248
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	c8 01       	movw	r24, r16
    1950:	6d d5       	rcall	.+2778   	; 0x242c <xTaskRemoveFromEventList>
    1952:	81 11       	cpse	r24, r1
    1954:	ed d5       	rcall	.+3034   	; 0x2530 <vTaskMissedYield>
    1956:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1958:	81 50       	subi	r24, 0x01	; 1
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	18 16       	cp	r1, r24
    1960:	7c f3       	brlt	.-34     	; 0x1940 <prvUnlockQueue+0x5c>
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	08 95       	ret

00001974 <xQueueGenericReset>:
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	ec 01       	movw	r28, r24
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	0f 92       	push	r0
    1980:	48 81       	ld	r20, Y
    1982:	59 81       	ldd	r21, Y+1	; 0x01
    1984:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	7b 8d       	ldd	r23, Y+27	; 0x1b
    198a:	72 9f       	mul	r23, r18
    198c:	c0 01       	movw	r24, r0
    198e:	73 9f       	mul	r23, r19
    1990:	90 0d       	add	r25, r0
    1992:	11 24       	eor	r1, r1
    1994:	fa 01       	movw	r30, r20
    1996:	e8 0f       	add	r30, r24
    1998:	f9 1f       	adc	r31, r25
    199a:	ea 83       	std	Y+2, r30	; 0x02
    199c:	fb 83       	std	Y+3, r31	; 0x03
    199e:	1a 8e       	std	Y+26, r1	; 0x1a
    19a0:	4c 83       	std	Y+4, r20	; 0x04
    19a2:	5d 83       	std	Y+5, r21	; 0x05
    19a4:	82 1b       	sub	r24, r18
    19a6:	93 0b       	sbc	r25, r19
    19a8:	84 0f       	add	r24, r20
    19aa:	95 1f       	adc	r25, r21
    19ac:	8e 83       	std	Y+6, r24	; 0x06
    19ae:	9f 83       	std	Y+7, r25	; 0x07
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	8d 8f       	std	Y+29, r24	; 0x1d
    19b4:	8e 8f       	std	Y+30, r24	; 0x1e
    19b6:	61 11       	cpse	r22, r1
    19b8:	0a c0       	rjmp	.+20     	; 0x19ce <xQueueGenericReset+0x5a>
    19ba:	88 85       	ldd	r24, Y+8	; 0x08
    19bc:	88 23       	and	r24, r24
    19be:	69 f0       	breq	.+26     	; 0x19da <xQueueGenericReset+0x66>
    19c0:	ce 01       	movw	r24, r28
    19c2:	08 96       	adiw	r24, 0x08	; 8
    19c4:	33 d5       	rcall	.+2662   	; 0x242c <xTaskRemoveFromEventList>
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	41 f4       	brne	.+16     	; 0x19da <xQueueGenericReset+0x66>
    19ca:	5b de       	rcall	.-842    	; 0x1682 <vPortYield>
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <xQueueGenericReset+0x66>
    19ce:	ce 01       	movw	r24, r28
    19d0:	08 96       	adiw	r24, 0x08	; 8
    19d2:	11 dd       	rcall	.-1502   	; 0x13f6 <vListInitialise>
    19d4:	ce 01       	movw	r24, r28
    19d6:	41 96       	adiw	r24, 0x11	; 17
    19d8:	0e dd       	rcall	.-1508   	; 0x13f6 <vListInitialise>
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <xQueueGenericCreate>:
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	08 2f       	mov	r16, r24
    19f0:	16 2f       	mov	r17, r22
    19f2:	66 23       	and	r22, r22
    19f4:	a9 f0       	breq	.+42     	; 0x1a20 <xQueueGenericCreate+0x3a>
    19f6:	86 9f       	mul	r24, r22
    19f8:	c0 01       	movw	r24, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	80 96       	adiw	r24, 0x20	; 32
    19fe:	f3 de       	rcall	.-538    	; 0x17e6 <pvPortMalloc>
    1a00:	ec 01       	movw	r28, r24
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	21 f4       	brne	.+8      	; 0x1a0e <xQueueGenericCreate+0x28>
    1a06:	12 c0       	rjmp	.+36     	; 0x1a2c <xQueueGenericCreate+0x46>
    1a08:	c8 83       	st	Y, r28
    1a0a:	d9 83       	std	Y+1, r29	; 0x01
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <xQueueGenericCreate+0x2e>
    1a0e:	4f 96       	adiw	r24, 0x1f	; 31
    1a10:	88 83       	st	Y, r24
    1a12:	99 83       	std	Y+1, r25	; 0x01
    1a14:	0b 8f       	std	Y+27, r16	; 0x1b
    1a16:	1c 8f       	std	Y+28, r17	; 0x1c
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	ab df       	rcall	.-170    	; 0x1974 <xQueueGenericReset>
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <xQueueGenericCreate+0x46>
    1a20:	8f e1       	ldi	r24, 0x1F	; 31
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	e0 de       	rcall	.-576    	; 0x17e6 <pvPortMalloc>
    1a26:	ec 01       	movw	r28, r24
    1a28:	89 2b       	or	r24, r25
    1a2a:	71 f7       	brne	.-36     	; 0x1a08 <xQueueGenericCreate+0x22>
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <xQueueGenericSend>:
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	25 97       	sbiw	r28, 0x05	; 5
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	8c 01       	movw	r16, r24
    1a58:	6b 01       	movw	r12, r22
    1a5a:	4c 83       	std	Y+4, r20	; 0x04
    1a5c:	5d 83       	std	Y+5, r21	; 0x05
    1a5e:	a2 2e       	mov	r10, r18
    1a60:	b1 2c       	mov	r11, r1
    1a62:	7c 01       	movw	r14, r24
    1a64:	88 e0       	ldi	r24, 0x08	; 8
    1a66:	e8 0e       	add	r14, r24
    1a68:	f1 1c       	adc	r15, r1
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	0f 92       	push	r0
    1a70:	f8 01       	movw	r30, r16
    1a72:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a74:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a76:	98 17       	cp	r25, r24
    1a78:	18 f0       	brcs	.+6      	; 0x1a80 <xQueueGenericSend+0x48>
    1a7a:	f2 e0       	ldi	r31, 0x02	; 2
    1a7c:	af 12       	cpse	r10, r31
    1a7e:	15 c0       	rjmp	.+42     	; 0x1aaa <xQueueGenericSend+0x72>
    1a80:	4a 2d       	mov	r20, r10
    1a82:	b6 01       	movw	r22, r12
    1a84:	c8 01       	movw	r24, r16
    1a86:	c9 de       	rcall	.-622    	; 0x181a <prvCopyDataToQueue>
    1a88:	f8 01       	movw	r30, r16
    1a8a:	91 89       	ldd	r25, Z+17	; 0x11
    1a8c:	99 23       	and	r25, r25
    1a8e:	39 f0       	breq	.+14     	; 0x1a9e <xQueueGenericSend+0x66>
    1a90:	c8 01       	movw	r24, r16
    1a92:	41 96       	adiw	r24, 0x11	; 17
    1a94:	cb d4       	rcall	.+2454   	; 0x242c <xTaskRemoveFromEventList>
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <xQueueGenericSend+0x6a>
    1a9a:	f3 dd       	rcall	.-1050   	; 0x1682 <vPortYield>
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <xQueueGenericSend+0x6a>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	f0 dd       	rcall	.-1056   	; 0x1682 <vPortYield>
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	46 c0       	rjmp	.+140    	; 0x1b36 <xQueueGenericSend+0xfe>
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	89 2b       	or	r24, r25
    1ab0:	21 f4       	brne	.+8      	; 0x1aba <xQueueGenericSend+0x82>
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	3e c0       	rjmp	.+124    	; 0x1b36 <xQueueGenericSend+0xfe>
    1aba:	b1 10       	cpse	r11, r1
    1abc:	05 c0       	rjmp	.+10     	; 0x1ac8 <xQueueGenericSend+0x90>
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	fa d4       	rcall	.+2548   	; 0x24b8 <vTaskSetTimeOutState>
    1ac4:	bb 24       	eor	r11, r11
    1ac6:	b3 94       	inc	r11
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	93 d2       	rcall	.+1318   	; 0x1ff4 <vTaskSuspendAll>
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	0f 92       	push	r0
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ada:	09 f4       	brne	.+2      	; 0x1ade <xQueueGenericSend+0xa6>
    1adc:	15 8e       	std	Z+29, r1	; 0x1d
    1ade:	f8 01       	movw	r30, r16
    1ae0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ae2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <xQueueGenericSend+0xb0>
    1ae6:	16 8e       	std	Z+30, r1	; 0x1e
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	be 01       	movw	r22, r28
    1aee:	6c 5f       	subi	r22, 0xFC	; 252
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	eb d4       	rcall	.+2518   	; 0x24ce <xTaskCheckForTimeOut>
    1af8:	81 11       	cpse	r24, r1
    1afa:	19 c0       	rjmp	.+50     	; 0x1b2e <xQueueGenericSend+0xf6>
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	0f 92       	push	r0
    1b02:	f8 01       	movw	r30, r16
    1b04:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b0c:	98 13       	cpse	r25, r24
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <xQueueGenericSend+0xee>
    1b10:	6c 81       	ldd	r22, Y+4	; 0x04
    1b12:	7d 81       	ldd	r23, Y+5	; 0x05
    1b14:	c7 01       	movw	r24, r14
    1b16:	56 d4       	rcall	.+2220   	; 0x23c4 <vTaskPlaceOnEventList>
    1b18:	c8 01       	movw	r24, r16
    1b1a:	e4 de       	rcall	.-568    	; 0x18e4 <prvUnlockQueue>
    1b1c:	4e d3       	rcall	.+1692   	; 0x21ba <xTaskResumeAll>
    1b1e:	81 11       	cpse	r24, r1
    1b20:	a4 cf       	rjmp	.-184    	; 0x1a6a <xQueueGenericSend+0x32>
    1b22:	af dd       	rcall	.-1186   	; 0x1682 <vPortYield>
    1b24:	a2 cf       	rjmp	.-188    	; 0x1a6a <xQueueGenericSend+0x32>
    1b26:	c8 01       	movw	r24, r16
    1b28:	dd de       	rcall	.-582    	; 0x18e4 <prvUnlockQueue>
    1b2a:	47 d3       	rcall	.+1678   	; 0x21ba <xTaskResumeAll>
    1b2c:	9e cf       	rjmp	.-196    	; 0x1a6a <xQueueGenericSend+0x32>
    1b2e:	c8 01       	movw	r24, r16
    1b30:	d9 de       	rcall	.-590    	; 0x18e4 <prvUnlockQueue>
    1b32:	43 d3       	rcall	.+1670   	; 0x21ba <xTaskResumeAll>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	25 96       	adiw	r28, 0x05	; 5
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	08 95       	ret

00001b52 <xQueueGenericSendFromISR>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	fa 01       	movw	r30, r20
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	5a 96       	adiw	r26, 0x1a	; 26
    1b60:	5c 91       	ld	r21, X
    1b62:	5a 97       	sbiw	r26, 0x1a	; 26
    1b64:	5b 96       	adiw	r26, 0x1b	; 27
    1b66:	3c 91       	ld	r19, X
    1b68:	53 17       	cp	r21, r19
    1b6a:	10 f0       	brcs	.+4      	; 0x1b70 <xQueueGenericSendFromISR+0x1e>
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	d9 f4       	brne	.+54     	; 0x1ba6 <xQueueGenericSendFromISR+0x54>
    1b70:	42 2f       	mov	r20, r18
    1b72:	8f 01       	movw	r16, r30
    1b74:	ec 01       	movw	r28, r24
    1b76:	51 de       	rcall	.-862    	; 0x181a <prvCopyDataToQueue>
    1b78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7c:	79 f4       	brne	.+30     	; 0x1b9c <xQueueGenericSendFromISR+0x4a>
    1b7e:	89 89       	ldd	r24, Y+17	; 0x11
    1b80:	88 23       	and	r24, r24
    1b82:	99 f0       	breq	.+38     	; 0x1baa <xQueueGenericSendFromISR+0x58>
    1b84:	ce 01       	movw	r24, r28
    1b86:	41 96       	adiw	r24, 0x11	; 17
    1b88:	51 d4       	rcall	.+2210   	; 0x242c <xTaskRemoveFromEventList>
    1b8a:	88 23       	and	r24, r24
    1b8c:	81 f0       	breq	.+32     	; 0x1bae <xQueueGenericSendFromISR+0x5c>
    1b8e:	01 15       	cp	r16, r1
    1b90:	11 05       	cpc	r17, r1
    1b92:	79 f0       	breq	.+30     	; 0x1bb2 <xQueueGenericSendFromISR+0x60>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	f8 01       	movw	r30, r16
    1b98:	80 83       	st	Z, r24
    1b9a:	0c c0       	rjmp	.+24     	; 0x1bb4 <xQueueGenericSendFromISR+0x62>
    1b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <xQueueGenericSendFromISR+0x62>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <xQueueGenericSendFromISR+0x62>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	03 c0       	rjmp	.+6      	; 0x1bb4 <xQueueGenericSendFromISR+0x62>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <xQueueGenericSendFromISR+0x62>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	08 95       	ret

00001bbe <xQueueGenericReceive>:
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	25 97       	sbiw	r28, 0x05	; 5
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	8c 01       	movw	r16, r24
    1bde:	6b 01       	movw	r12, r22
    1be0:	4c 83       	std	Y+4, r20	; 0x04
    1be2:	5d 83       	std	Y+5, r21	; 0x05
    1be4:	a2 2e       	mov	r10, r18
    1be6:	b1 2c       	mov	r11, r1
    1be8:	7c 01       	movw	r14, r24
    1bea:	81 e1       	ldi	r24, 0x11	; 17
    1bec:	e8 0e       	add	r14, r24
    1bee:	f1 1c       	adc	r15, r1
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	0f 92       	push	r0
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bfa:	88 23       	and	r24, r24
    1bfc:	21 f1       	breq	.+72     	; 0x1c46 <xQueueGenericReceive+0x88>
    1bfe:	e6 80       	ldd	r14, Z+6	; 0x06
    1c00:	f7 80       	ldd	r15, Z+7	; 0x07
    1c02:	b6 01       	movw	r22, r12
    1c04:	c8 01       	movw	r24, r16
    1c06:	54 de       	rcall	.-856    	; 0x18b0 <prvCopyDataFromQueue>
    1c08:	a1 10       	cpse	r10, r1
    1c0a:	0e c0       	rjmp	.+28     	; 0x1c28 <xQueueGenericReceive+0x6a>
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c10:	81 50       	subi	r24, 0x01	; 1
    1c12:	82 8f       	std	Z+26, r24	; 0x1a
    1c14:	80 85       	ldd	r24, Z+8	; 0x08
    1c16:	88 23       	and	r24, r24
    1c18:	91 f0       	breq	.+36     	; 0x1c3e <xQueueGenericReceive+0x80>
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	08 96       	adiw	r24, 0x08	; 8
    1c1e:	06 d4       	rcall	.+2060   	; 0x242c <xTaskRemoveFromEventList>
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	69 f4       	brne	.+26     	; 0x1c3e <xQueueGenericReceive+0x80>
    1c24:	2e dd       	rcall	.-1444   	; 0x1682 <vPortYield>
    1c26:	0b c0       	rjmp	.+22     	; 0x1c3e <xQueueGenericReceive+0x80>
    1c28:	f8 01       	movw	r30, r16
    1c2a:	e6 82       	std	Z+6, r14	; 0x06
    1c2c:	f7 82       	std	Z+7, r15	; 0x07
    1c2e:	81 89       	ldd	r24, Z+17	; 0x11
    1c30:	88 23       	and	r24, r24
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <xQueueGenericReceive+0x80>
    1c34:	c8 01       	movw	r24, r16
    1c36:	41 96       	adiw	r24, 0x11	; 17
    1c38:	f9 d3       	rcall	.+2034   	; 0x242c <xTaskRemoveFromEventList>
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	22 dd       	rcall	.-1468   	; 0x1682 <vPortYield>
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	45 c0       	rjmp	.+138    	; 0x1cd0 <xQueueGenericReceive+0x112>
    1c46:	8c 81       	ldd	r24, Y+4	; 0x04
    1c48:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4a:	89 2b       	or	r24, r25
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <xQueueGenericReceive+0x98>
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	3d c0       	rjmp	.+122    	; 0x1cd0 <xQueueGenericReceive+0x112>
    1c56:	b1 10       	cpse	r11, r1
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <xQueueGenericReceive+0xa6>
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	2c d4       	rcall	.+2136   	; 0x24b8 <vTaskSetTimeOutState>
    1c60:	bb 24       	eor	r11, r11
    1c62:	b3 94       	inc	r11
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	c5 d1       	rcall	.+906    	; 0x1ff4 <vTaskSuspendAll>
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	0f 92       	push	r0
    1c70:	f8 01       	movw	r30, r16
    1c72:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c74:	8f 3f       	cpi	r24, 0xFF	; 255
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <xQueueGenericReceive+0xbc>
    1c78:	15 8e       	std	Z+29, r1	; 0x1d
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <xQueueGenericReceive+0xc6>
    1c82:	16 8e       	std	Z+30, r1	; 0x1e
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	be 01       	movw	r22, r28
    1c8a:	6c 5f       	subi	r22, 0xFC	; 252
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	ce 01       	movw	r24, r28
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	1d d4       	rcall	.+2106   	; 0x24ce <xTaskCheckForTimeOut>
    1c94:	81 11       	cpse	r24, r1
    1c96:	18 c0       	rjmp	.+48     	; 0x1cc8 <xQueueGenericReceive+0x10a>
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	0f 92       	push	r0
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <xQueueGenericReceive+0x102>
    1caa:	6c 81       	ldd	r22, Y+4	; 0x04
    1cac:	7d 81       	ldd	r23, Y+5	; 0x05
    1cae:	c7 01       	movw	r24, r14
    1cb0:	89 d3       	rcall	.+1810   	; 0x23c4 <vTaskPlaceOnEventList>
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	17 de       	rcall	.-978    	; 0x18e4 <prvUnlockQueue>
    1cb6:	81 d2       	rcall	.+1282   	; 0x21ba <xTaskResumeAll>
    1cb8:	81 11       	cpse	r24, r1
    1cba:	9a cf       	rjmp	.-204    	; 0x1bf0 <xQueueGenericReceive+0x32>
    1cbc:	e2 dc       	rcall	.-1596   	; 0x1682 <vPortYield>
    1cbe:	98 cf       	rjmp	.-208    	; 0x1bf0 <xQueueGenericReceive+0x32>
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	10 de       	rcall	.-992    	; 0x18e4 <prvUnlockQueue>
    1cc4:	7a d2       	rcall	.+1268   	; 0x21ba <xTaskResumeAll>
    1cc6:	94 cf       	rjmp	.-216    	; 0x1bf0 <xQueueGenericReceive+0x32>
    1cc8:	c8 01       	movw	r24, r16
    1cca:	0c de       	rcall	.-1000   	; 0x18e4 <prvUnlockQueue>
    1ccc:	76 d2       	rcall	.+1260   	; 0x21ba <xTaskResumeAll>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	25 96       	adiw	r28, 0x05	; 5
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	df 90       	pop	r13
    1ce4:	cf 90       	pop	r12
    1ce6:	bf 90       	pop	r11
    1ce8:	af 90       	pop	r10
    1cea:	08 95       	ret

00001cec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	0f 92       	push	r0
    1cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <vQueueWaitForMessageRestricted+0x14>
    1cfe:	1d 8e       	std	Y+29, r1	; 0x1d
    1d00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d02:	8f 3f       	cpi	r24, 0xFF	; 255
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <vQueueWaitForMessageRestricted+0x1c>
    1d06:	1e 8e       	std	Y+30, r1	; 0x1e
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1d0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d0e:	81 11       	cpse	r24, r1
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vQueueWaitForMessageRestricted+0x2c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1d12:	ce 01       	movw	r24, r28
    1d14:	41 96       	adiw	r24, 0x11	; 17
    1d16:	70 d3       	rcall	.+1760   	; 0x23f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1d18:	ce 01       	movw	r24, r28
    1d1a:	e4 dd       	rcall	.-1080   	; 0x18e4 <prvUnlockQueue>
	}
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

00001d22 <prvIdleTask>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1d22:	cf eb       	ldi	r28, 0xBF	; 191
    1d24:	d2 e2       	ldi	r29, 0x22	; 34
    1d26:	88 81       	ld	r24, Y
    1d28:	82 30       	cpi	r24, 0x02	; 2
    1d2a:	f0 f3       	brcs	.-4      	; 0x1d28 <prvIdleTask+0x6>
    1d2c:	aa dc       	rcall	.-1708   	; 0x1682 <vPortYield>
    1d2e:	fb cf       	rjmp	.-10     	; 0x1d26 <prvIdleTask+0x4>

00001d30 <prvAddCurrentTaskToDelayedList>:
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	ec 01       	movw	r28, r24
    1d36:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    1d3a:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1d3e:	82 83       	std	Z+2, r24	; 0x02
    1d40:	93 83       	std	Z+3, r25	; 0x03
    1d42:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <xTickCount>
    1d46:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <xTickCount+0x1>
    1d4a:	c8 17       	cp	r28, r24
    1d4c:	d9 07       	cpc	r29, r25
    1d4e:	60 f4       	brcc	.+24     	; 0x1d68 <prvAddCurrentTaskToDelayedList+0x38>
    1d50:	60 91 ec 22 	lds	r22, 0x22EC	; 0x8022ec <pxCurrentTCB>
    1d54:	70 91 ed 22 	lds	r23, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1d58:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <pxOverflowDelayedTaskList>
    1d5c:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <pxOverflowDelayedTaskList+0x1>
    1d60:	6e 5f       	subi	r22, 0xFE	; 254
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	7b db       	rcall	.-2314   	; 0x145c <vListInsert>
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <prvAddCurrentTaskToDelayedList+0x64>
    1d68:	60 91 ec 22 	lds	r22, 0x22EC	; 0x8022ec <pxCurrentTCB>
    1d6c:	70 91 ed 22 	lds	r23, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1d70:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <pxDelayedTaskList>
    1d74:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <pxDelayedTaskList+0x1>
    1d78:	6e 5f       	subi	r22, 0xFE	; 254
    1d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7c:	6f db       	rcall	.-2338   	; 0x145c <vListInsert>
    1d7e:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <xNextTaskUnblockTime>
    1d82:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <xNextTaskUnblockTime+0x1>
    1d86:	c8 17       	cp	r28, r24
    1d88:	d9 07       	cpc	r29, r25
    1d8a:	20 f4       	brcc	.+8      	; 0x1d94 <prvAddCurrentTaskToDelayedList+0x64>
    1d8c:	c0 93 0d 20 	sts	0x200D, r28	; 0x80200d <xNextTaskUnblockTime>
    1d90:	d0 93 0e 20 	sts	0x200E, r29	; 0x80200e <xNextTaskUnblockTime+0x1>
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <xTaskGenericCreate>:
    1d9a:	4f 92       	push	r4
    1d9c:	5f 92       	push	r5
    1d9e:	6f 92       	push	r6
    1da0:	7f 92       	push	r7
    1da2:	8f 92       	push	r8
    1da4:	9f 92       	push	r9
    1da6:	af 92       	push	r10
    1da8:	bf 92       	push	r11
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	4c 01       	movw	r8, r24
    1dbc:	eb 01       	movw	r28, r22
    1dbe:	5a 01       	movw	r10, r20
    1dc0:	29 01       	movw	r4, r18
    1dc2:	c1 14       	cp	r12, r1
    1dc4:	d1 04       	cpc	r13, r1
    1dc6:	31 f4       	brne	.+12     	; 0x1dd4 <xTaskGenericCreate+0x3a>
    1dc8:	ca 01       	movw	r24, r20
    1dca:	0d dd       	rcall	.-1510   	; 0x17e6 <pvPortMalloc>
    1dcc:	6c 01       	movw	r12, r24
    1dce:	89 2b       	or	r24, r25
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <xTaskGenericCreate+0x3a>
    1dd2:	d2 c0       	rjmp	.+420    	; 0x1f78 <xTaskGenericCreate+0x1de>
    1dd4:	86 e2       	ldi	r24, 0x26	; 38
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	06 dd       	rcall	.-1524   	; 0x17e6 <pvPortMalloc>
    1dda:	3c 01       	movw	r6, r24
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	79 f0       	breq	.+30     	; 0x1dfe <xTaskGenericCreate+0x64>
    1de0:	fc 01       	movw	r30, r24
    1de2:	c7 8a       	std	Z+23, r12	; 0x17
    1de4:	d0 8e       	std	Z+24, r13	; 0x18
    1de6:	f1 e0       	ldi	r31, 0x01	; 1
    1de8:	af 1a       	sub	r10, r31
    1dea:	b1 08       	sbc	r11, r1
    1dec:	ca 0c       	add	r12, r10
    1dee:	db 1c       	adc	r13, r11
    1df0:	88 81       	ld	r24, Y
    1df2:	f3 01       	movw	r30, r6
    1df4:	81 8f       	std	Z+25, r24	; 0x19
    1df6:	88 81       	ld	r24, Y
    1df8:	81 11       	cpse	r24, r1
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <xTaskGenericCreate+0x6a>
    1dfc:	13 c0       	rjmp	.+38     	; 0x1e24 <xTaskGenericCreate+0x8a>
    1dfe:	c6 01       	movw	r24, r12
    1e00:	ff dc       	rcall	.-1538   	; 0x1800 <vPortFree>
    1e02:	ba c0       	rjmp	.+372    	; 0x1f78 <xTaskGenericCreate+0x1de>
    1e04:	d3 01       	movw	r26, r6
    1e06:	5a 96       	adiw	r26, 0x1a	; 26
    1e08:	fe 01       	movw	r30, r28
    1e0a:	31 96       	adiw	r30, 0x01	; 1
    1e0c:	9e 01       	movw	r18, r28
    1e0e:	28 5f       	subi	r18, 0xF8	; 248
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    1e12:	ef 01       	movw	r28, r30
    1e14:	81 91       	ld	r24, Z+
    1e16:	8d 93       	st	X+, r24
    1e18:	88 81       	ld	r24, Y
    1e1a:	88 23       	and	r24, r24
    1e1c:	19 f0       	breq	.+6      	; 0x1e24 <xTaskGenericCreate+0x8a>
    1e1e:	2e 17       	cp	r18, r30
    1e20:	3f 07       	cpc	r19, r31
    1e22:	b9 f7       	brne	.-18     	; 0x1e12 <xTaskGenericCreate+0x78>
    1e24:	f3 01       	movw	r30, r6
    1e26:	10 a2       	std	Z+32, r1	; 0x20
    1e28:	10 2f       	mov	r17, r16
    1e2a:	05 30       	cpi	r16, 0x05	; 5
    1e2c:	08 f0       	brcs	.+2      	; 0x1e30 <xTaskGenericCreate+0x96>
    1e2e:	14 e0       	ldi	r17, 0x04	; 4
    1e30:	f3 01       	movw	r30, r6
    1e32:	16 8b       	std	Z+22, r17	; 0x16
    1e34:	e3 01       	movw	r28, r6
    1e36:	22 96       	adiw	r28, 0x02	; 2
    1e38:	ce 01       	movw	r24, r28
    1e3a:	eb da       	rcall	.-2602   	; 0x1412 <vListInitialiseItem>
    1e3c:	c3 01       	movw	r24, r6
    1e3e:	0c 96       	adiw	r24, 0x0c	; 12
    1e40:	e8 da       	rcall	.-2608   	; 0x1412 <vListInitialiseItem>
    1e42:	f3 01       	movw	r30, r6
    1e44:	60 86       	std	Z+8, r6	; 0x08
    1e46:	71 86       	std	Z+9, r7	; 0x09
    1e48:	85 e0       	ldi	r24, 0x05	; 5
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	81 1b       	sub	r24, r17
    1e4e:	91 09       	sbc	r25, r1
    1e50:	84 87       	std	Z+12, r24	; 0x0c
    1e52:	95 87       	std	Z+13, r25	; 0x0d
    1e54:	62 8a       	std	Z+18, r6	; 0x12
    1e56:	73 8a       	std	Z+19, r7	; 0x13
    1e58:	11 a2       	std	Z+33, r1	; 0x21
    1e5a:	12 a2       	std	Z+34, r1	; 0x22
    1e5c:	13 a2       	std	Z+35, r1	; 0x23
    1e5e:	14 a2       	std	Z+36, r1	; 0x24
    1e60:	15 a2       	std	Z+37, r1	; 0x25
    1e62:	a2 01       	movw	r20, r4
    1e64:	b4 01       	movw	r22, r8
    1e66:	c6 01       	movw	r24, r12
    1e68:	50 db       	rcall	.-2400   	; 0x150a <pxPortInitialiseStack>
    1e6a:	f3 01       	movw	r30, r6
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	e1 14       	cp	r14, r1
    1e72:	f1 04       	cpc	r15, r1
    1e74:	19 f0       	breq	.+6      	; 0x1e7c <xTaskGenericCreate+0xe2>
    1e76:	f7 01       	movw	r30, r14
    1e78:	60 82       	st	Z, r6
    1e7a:	71 82       	std	Z+1, r7	; 0x01
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	0f 92       	push	r0
    1e82:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <uxCurrentNumberOfTasks>
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	80 93 9f 22 	sts	0x229F, r24	; 0x80229f <uxCurrentNumberOfTasks>
    1e8c:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <pxCurrentTCB>
    1e90:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1e94:	89 2b       	or	r24, r25
    1e96:	91 f5       	brne	.+100    	; 0x1efc <xTaskGenericCreate+0x162>
    1e98:	60 92 ec 22 	sts	0x22EC, r6	; 0x8022ec <pxCurrentTCB>
    1e9c:	70 92 ed 22 	sts	0x22ED, r7	; 0x8022ed <pxCurrentTCB+0x1>
    1ea0:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <uxCurrentNumberOfTasks>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	c9 f5       	brne	.+114    	; 0x1f1a <xTaskGenericCreate+0x180>
    1ea8:	0f 2e       	mov	r0, r31
    1eaa:	ff eb       	ldi	r31, 0xBF	; 191
    1eac:	ef 2e       	mov	r14, r31
    1eae:	f2 e2       	ldi	r31, 0x22	; 34
    1eb0:	ff 2e       	mov	r15, r31
    1eb2:	f0 2d       	mov	r31, r0
    1eb4:	0f 2e       	mov	r0, r31
    1eb6:	fc ee       	ldi	r31, 0xEC	; 236
    1eb8:	cf 2e       	mov	r12, r31
    1eba:	f2 e2       	ldi	r31, 0x22	; 34
    1ebc:	df 2e       	mov	r13, r31
    1ebe:	f0 2d       	mov	r31, r0
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	99 da       	rcall	.-2766   	; 0x13f6 <vListInitialise>
    1ec4:	f9 e0       	ldi	r31, 0x09	; 9
    1ec6:	ef 0e       	add	r14, r31
    1ec8:	f1 1c       	adc	r15, r1
    1eca:	ec 14       	cp	r14, r12
    1ecc:	fd 04       	cpc	r15, r13
    1ece:	c1 f7       	brne	.-16     	; 0x1ec0 <xTaskGenericCreate+0x126>
    1ed0:	86 eb       	ldi	r24, 0xB6	; 182
    1ed2:	92 e2       	ldi	r25, 0x22	; 34
    1ed4:	90 da       	rcall	.-2784   	; 0x13f6 <vListInitialise>
    1ed6:	8d ea       	ldi	r24, 0xAD	; 173
    1ed8:	92 e2       	ldi	r25, 0x22	; 34
    1eda:	8d da       	rcall	.-2790   	; 0x13f6 <vListInitialise>
    1edc:	80 ea       	ldi	r24, 0xA0	; 160
    1ede:	92 e2       	ldi	r25, 0x22	; 34
    1ee0:	8a da       	rcall	.-2796   	; 0x13f6 <vListInitialise>
    1ee2:	86 eb       	ldi	r24, 0xB6	; 182
    1ee4:	92 e2       	ldi	r25, 0x22	; 34
    1ee6:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <pxDelayedTaskList>
    1eea:	90 93 ac 22 	sts	0x22AC, r25	; 0x8022ac <pxDelayedTaskList+0x1>
    1eee:	8d ea       	ldi	r24, 0xAD	; 173
    1ef0:	92 e2       	ldi	r25, 0x22	; 34
    1ef2:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <pxOverflowDelayedTaskList>
    1ef6:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <pxOverflowDelayedTaskList+0x1>
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <xTaskGenericCreate+0x180>
    1efc:	80 91 9b 22 	lds	r24, 0x229B	; 0x80229b <xSchedulerRunning>
    1f00:	81 11       	cpse	r24, r1
    1f02:	0b c0       	rjmp	.+22     	; 0x1f1a <xTaskGenericCreate+0x180>
    1f04:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    1f08:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1f0c:	86 89       	ldd	r24, Z+22	; 0x16
    1f0e:	08 17       	cp	r16, r24
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <xTaskGenericCreate+0x180>
    1f12:	60 92 ec 22 	sts	0x22EC, r6	; 0x8022ec <pxCurrentTCB>
    1f16:	70 92 ed 22 	sts	0x22ED, r7	; 0x8022ed <pxCurrentTCB+0x1>
    1f1a:	80 91 97 22 	lds	r24, 0x2297	; 0x802297 <uxTaskNumber>
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	80 93 97 22 	sts	0x2297, r24	; 0x802297 <uxTaskNumber>
    1f24:	f3 01       	movw	r30, r6
    1f26:	86 89       	ldd	r24, Z+22	; 0x16
    1f28:	90 91 9c 22 	lds	r25, 0x229C	; 0x80229c <uxTopReadyPriority>
    1f2c:	98 17       	cp	r25, r24
    1f2e:	10 f4       	brcc	.+4      	; 0x1f34 <xTaskGenericCreate+0x19a>
    1f30:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <uxTopReadyPriority>
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 01       	movw	r18, r24
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	82 0f       	add	r24, r18
    1f46:	93 1f       	adc	r25, r19
    1f48:	be 01       	movw	r22, r28
    1f4a:	81 54       	subi	r24, 0x41	; 65
    1f4c:	9d 4d       	sbci	r25, 0xDD	; 221
    1f4e:	65 da       	rcall	.-2870   	; 0x141a <vListInsertEnd>
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	80 91 9b 22 	lds	r24, 0x229B	; 0x80229b <xSchedulerRunning>
    1f58:	88 23       	and	r24, r24
    1f5a:	51 f0       	breq	.+20     	; 0x1f70 <xTaskGenericCreate+0x1d6>
    1f5c:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    1f60:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    1f64:	86 89       	ldd	r24, Z+22	; 0x16
    1f66:	80 17       	cp	r24, r16
    1f68:	28 f4       	brcc	.+10     	; 0x1f74 <xTaskGenericCreate+0x1da>
    1f6a:	8b db       	rcall	.-2282   	; 0x1682 <vPortYield>
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <xTaskGenericCreate+0x1e0>
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <xTaskGenericCreate+0x1e0>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <xTaskGenericCreate+0x1e0>
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	9f 90       	pop	r9
    1f90:	8f 90       	pop	r8
    1f92:	7f 90       	pop	r7
    1f94:	6f 90       	pop	r6
    1f96:	5f 90       	pop	r5
    1f98:	4f 90       	pop	r4
    1f9a:	08 95       	ret

00001f9c <vTaskStartScheduler>:
    1f9c:	af 92       	push	r10
    1f9e:	bf 92       	push	r11
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	a1 2c       	mov	r10, r1
    1fac:	b1 2c       	mov	r11, r1
    1fae:	c1 2c       	mov	r12, r1
    1fb0:	d1 2c       	mov	r13, r1
    1fb2:	e1 2c       	mov	r14, r1
    1fb4:	f1 2c       	mov	r15, r1
    1fb6:	00 e0       	ldi	r16, 0x00	; 0
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	45 e5       	ldi	r20, 0x55	; 85
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	6f e0       	ldi	r22, 0x0F	; 15
    1fc2:	70 e2       	ldi	r23, 0x20	; 32
    1fc4:	81 e9       	ldi	r24, 0x91	; 145
    1fc6:	9e e0       	ldi	r25, 0x0E	; 14
    1fc8:	e8 de       	rcall	.-560    	; 0x1d9a <xTaskGenericCreate>
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	59 f4       	brne	.+22     	; 0x1fe4 <vTaskStartScheduler+0x48>
    1fce:	19 d3       	rcall	.+1586   	; 0x2602 <xTimerCreateTimerTask>
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	41 f4       	brne	.+16     	; 0x1fe4 <vTaskStartScheduler+0x48>
    1fd4:	f8 94       	cli
    1fd6:	80 93 9b 22 	sts	0x229B, r24	; 0x80229b <xSchedulerRunning>
    1fda:	10 92 9d 22 	sts	0x229D, r1	; 0x80229d <xTickCount>
    1fde:	10 92 9e 22 	sts	0x229E, r1	; 0x80229e <xTickCount+0x1>
    1fe2:	0a db       	rcall	.-2540   	; 0x15f8 <xPortStartScheduler>
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	08 95       	ret

00001ff4 <vTaskSuspendAll>:
    1ff4:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	80 93 96 22 	sts	0x2296, r24	; 0x802296 <uxSchedulerSuspended>
    1ffe:	08 95       	ret

00002000 <xTaskGetTickCount>:
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	0f 92       	push	r0
    2006:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <xTickCount>
    200a:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <xTickCount+0x1>
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	08 95       	ret

00002014 <xTaskIncrementTick>:
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    2026:	81 11       	cpse	r24, r1
    2028:	b3 c0       	rjmp	.+358    	; 0x2190 <xTaskIncrementTick+0x17c>
    202a:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <xTickCount>
    202e:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <xTickCount+0x1>
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	80 93 9d 22 	sts	0x229D, r24	; 0x80229d <xTickCount>
    2038:	90 93 9e 22 	sts	0x229E, r25	; 0x80229e <xTickCount+0x1>
    203c:	e0 90 9d 22 	lds	r14, 0x229D	; 0x80229d <xTickCount>
    2040:	f0 90 9e 22 	lds	r15, 0x229E	; 0x80229e <xTickCount+0x1>
    2044:	e1 14       	cp	r14, r1
    2046:	f1 04       	cpc	r15, r1
    2048:	99 f5       	brne	.+102    	; 0x20b0 <xTaskIncrementTick+0x9c>
    204a:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <pxDelayedTaskList>
    204e:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <pxDelayedTaskList+0x1>
    2052:	20 91 a9 22 	lds	r18, 0x22A9	; 0x8022a9 <pxOverflowDelayedTaskList>
    2056:	30 91 aa 22 	lds	r19, 0x22AA	; 0x8022aa <pxOverflowDelayedTaskList+0x1>
    205a:	20 93 ab 22 	sts	0x22AB, r18	; 0x8022ab <pxDelayedTaskList>
    205e:	30 93 ac 22 	sts	0x22AC, r19	; 0x8022ac <pxDelayedTaskList+0x1>
    2062:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <pxOverflowDelayedTaskList>
    2066:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <pxOverflowDelayedTaskList+0x1>
    206a:	80 91 98 22 	lds	r24, 0x2298	; 0x802298 <xNumOfOverflows>
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	80 93 98 22 	sts	0x2298, r24	; 0x802298 <xNumOfOverflows>
    2074:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxDelayedTaskList>
    2078:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxDelayedTaskList+0x1>
    207c:	80 81       	ld	r24, Z
    207e:	81 11       	cpse	r24, r1
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <xTaskIncrementTick+0x7c>
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	9f ef       	ldi	r25, 0xFF	; 255
    2086:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    208a:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    208e:	10 c0       	rjmp	.+32     	; 0x20b0 <xTaskIncrementTick+0x9c>
    2090:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxDelayedTaskList>
    2094:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxDelayedTaskList+0x1>
    2098:	05 80       	ldd	r0, Z+5	; 0x05
    209a:	f6 81       	ldd	r31, Z+6	; 0x06
    209c:	e0 2d       	mov	r30, r0
    209e:	06 80       	ldd	r0, Z+6	; 0x06
    20a0:	f7 81       	ldd	r31, Z+7	; 0x07
    20a2:	e0 2d       	mov	r30, r0
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    20ac:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    20b0:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <xNextTaskUnblockTime>
    20b4:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <xNextTaskUnblockTime+0x1>
    20b8:	e8 16       	cp	r14, r24
    20ba:	f9 06       	cpc	r15, r25
    20bc:	10 f4       	brcc	.+4      	; 0x20c2 <xTaskIncrementTick+0xae>
    20be:	d1 2c       	mov	r13, r1
    20c0:	4f c0       	rjmp	.+158    	; 0x2160 <xTaskIncrementTick+0x14c>
    20c2:	d1 2c       	mov	r13, r1
    20c4:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxDelayedTaskList>
    20c8:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxDelayedTaskList+0x1>
    20cc:	80 81       	ld	r24, Z
    20ce:	81 11       	cpse	r24, r1
    20d0:	07 c0       	rjmp	.+14     	; 0x20e0 <xTaskIncrementTick+0xcc>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    20da:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    20de:	40 c0       	rjmp	.+128    	; 0x2160 <xTaskIncrementTick+0x14c>
    20e0:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxDelayedTaskList>
    20e4:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxDelayedTaskList+0x1>
    20e8:	05 80       	ldd	r0, Z+5	; 0x05
    20ea:	f6 81       	ldd	r31, Z+6	; 0x06
    20ec:	e0 2d       	mov	r30, r0
    20ee:	c6 81       	ldd	r28, Z+6	; 0x06
    20f0:	d7 81       	ldd	r29, Z+7	; 0x07
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	9b 81       	ldd	r25, Y+3	; 0x03
    20f6:	e8 16       	cp	r14, r24
    20f8:	f9 06       	cpc	r15, r25
    20fa:	28 f4       	brcc	.+10     	; 0x2106 <xTaskIncrementTick+0xf2>
    20fc:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    2100:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    2104:	2d c0       	rjmp	.+90     	; 0x2160 <xTaskIncrementTick+0x14c>
    2106:	8e 01       	movw	r16, r28
    2108:	0e 5f       	subi	r16, 0xFE	; 254
    210a:	1f 4f       	sbci	r17, 0xFF	; 255
    210c:	c8 01       	movw	r24, r16
    210e:	d7 d9       	rcall	.-3154   	; 0x14be <uxListRemove>
    2110:	8c 89       	ldd	r24, Y+20	; 0x14
    2112:	9d 89       	ldd	r25, Y+21	; 0x15
    2114:	89 2b       	or	r24, r25
    2116:	19 f0       	breq	.+6      	; 0x211e <xTaskIncrementTick+0x10a>
    2118:	ce 01       	movw	r24, r28
    211a:	0c 96       	adiw	r24, 0x0c	; 12
    211c:	d0 d9       	rcall	.-3168   	; 0x14be <uxListRemove>
    211e:	8e 89       	ldd	r24, Y+22	; 0x16
    2120:	90 91 9c 22 	lds	r25, 0x229C	; 0x80229c <uxTopReadyPriority>
    2124:	98 17       	cp	r25, r24
    2126:	10 f4       	brcc	.+4      	; 0x212c <xTaskIncrementTick+0x118>
    2128:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <uxTopReadyPriority>
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 01       	movw	r18, r24
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	22 0f       	add	r18, r18
    213a:	33 1f       	adc	r19, r19
    213c:	82 0f       	add	r24, r18
    213e:	93 1f       	adc	r25, r19
    2140:	b8 01       	movw	r22, r16
    2142:	81 54       	subi	r24, 0x41	; 65
    2144:	9d 4d       	sbci	r25, 0xDD	; 221
    2146:	69 d9       	rcall	.-3374   	; 0x141a <vListInsertEnd>
    2148:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    214c:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    2150:	9e 89       	ldd	r25, Y+22	; 0x16
    2152:	86 89       	ldd	r24, Z+22	; 0x16
    2154:	98 17       	cp	r25, r24
    2156:	08 f4       	brcc	.+2      	; 0x215a <xTaskIncrementTick+0x146>
    2158:	b5 cf       	rjmp	.-150    	; 0x20c4 <xTaskIncrementTick+0xb0>
    215a:	dd 24       	eor	r13, r13
    215c:	d3 94       	inc	r13
    215e:	b2 cf       	rjmp	.-156    	; 0x20c4 <xTaskIncrementTick+0xb0>
    2160:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    2164:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    2168:	86 89       	ldd	r24, Z+22	; 0x16
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	fc 01       	movw	r30, r24
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	8e 0f       	add	r24, r30
    217c:	9f 1f       	adc	r25, r31
    217e:	fc 01       	movw	r30, r24
    2180:	e1 54       	subi	r30, 0x41	; 65
    2182:	fd 4d       	sbci	r31, 0xDD	; 221
    2184:	80 81       	ld	r24, Z
    2186:	82 30       	cpi	r24, 0x02	; 2
    2188:	48 f0       	brcs	.+18     	; 0x219c <xTaskIncrementTick+0x188>
    218a:	dd 24       	eor	r13, r13
    218c:	d3 94       	inc	r13
    218e:	06 c0       	rjmp	.+12     	; 0x219c <xTaskIncrementTick+0x188>
    2190:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <uxPendedTicks>
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	80 93 9a 22 	sts	0x229A, r24	; 0x80229a <uxPendedTicks>
    219a:	d1 2c       	mov	r13, r1
    219c:	80 91 99 22 	lds	r24, 0x2299	; 0x802299 <xYieldPending>
    21a0:	88 23       	and	r24, r24
    21a2:	11 f0       	breq	.+4      	; 0x21a8 <xTaskIncrementTick+0x194>
    21a4:	dd 24       	eor	r13, r13
    21a6:	d3 94       	inc	r13
    21a8:	8d 2d       	mov	r24, r13
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	08 95       	ret

000021ba <xTaskResumeAll>:
    21ba:	df 92       	push	r13
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	0f 92       	push	r0
    21ce:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    21d2:	81 50       	subi	r24, 0x01	; 1
    21d4:	80 93 96 22 	sts	0x2296, r24	; 0x802296 <uxSchedulerSuspended>
    21d8:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    21dc:	81 11       	cpse	r24, r1
    21de:	5d c0       	rjmp	.+186    	; 0x229a <xTaskResumeAll+0xe0>
    21e0:	80 91 9f 22 	lds	r24, 0x229F	; 0x80229f <uxCurrentNumberOfTasks>
    21e4:	81 11       	cpse	r24, r1
    21e6:	30 c0       	rjmp	.+96     	; 0x2248 <xTaskResumeAll+0x8e>
    21e8:	5b c0       	rjmp	.+182    	; 0x22a0 <xTaskResumeAll+0xe6>
    21ea:	d7 01       	movw	r26, r14
    21ec:	15 96       	adiw	r26, 0x05	; 5
    21ee:	ed 91       	ld	r30, X+
    21f0:	fc 91       	ld	r31, X
    21f2:	16 97       	sbiw	r26, 0x06	; 6
    21f4:	c6 81       	ldd	r28, Z+6	; 0x06
    21f6:	d7 81       	ldd	r29, Z+7	; 0x07
    21f8:	ce 01       	movw	r24, r28
    21fa:	0c 96       	adiw	r24, 0x0c	; 12
    21fc:	60 d9       	rcall	.-3392   	; 0x14be <uxListRemove>
    21fe:	8e 01       	movw	r16, r28
    2200:	0e 5f       	subi	r16, 0xFE	; 254
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	c8 01       	movw	r24, r16
    2206:	5b d9       	rcall	.-3402   	; 0x14be <uxListRemove>
    2208:	8e 89       	ldd	r24, Y+22	; 0x16
    220a:	90 91 9c 22 	lds	r25, 0x229C	; 0x80229c <uxTopReadyPriority>
    220e:	98 17       	cp	r25, r24
    2210:	10 f4       	brcc	.+4      	; 0x2216 <xTaskResumeAll+0x5c>
    2212:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <uxTopReadyPriority>
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9c 01       	movw	r18, r24
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	b8 01       	movw	r22, r16
    222c:	81 54       	subi	r24, 0x41	; 65
    222e:	9d 4d       	sbci	r25, 0xDD	; 221
    2230:	f4 d8       	rcall	.-3608   	; 0x141a <vListInsertEnd>
    2232:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    2236:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    223a:	9e 89       	ldd	r25, Y+22	; 0x16
    223c:	86 89       	ldd	r24, Z+22	; 0x16
    223e:	98 17       	cp	r25, r24
    2240:	58 f0       	brcs	.+22     	; 0x2258 <xTaskResumeAll+0x9e>
    2242:	d0 92 99 22 	sts	0x2299, r13	; 0x802299 <xYieldPending>
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <xTaskResumeAll+0x9e>
    2248:	0f 2e       	mov	r0, r31
    224a:	f0 ea       	ldi	r31, 0xA0	; 160
    224c:	ef 2e       	mov	r14, r31
    224e:	f2 e2       	ldi	r31, 0x22	; 34
    2250:	ff 2e       	mov	r15, r31
    2252:	f0 2d       	mov	r31, r0
    2254:	dd 24       	eor	r13, r13
    2256:	d3 94       	inc	r13
    2258:	f7 01       	movw	r30, r14
    225a:	80 81       	ld	r24, Z
    225c:	81 11       	cpse	r24, r1
    225e:	c5 cf       	rjmp	.-118    	; 0x21ea <xTaskResumeAll+0x30>
    2260:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <uxPendedTicks>
    2264:	88 23       	and	r24, r24
    2266:	91 f0       	breq	.+36     	; 0x228c <xTaskResumeAll+0xd2>
    2268:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <uxPendedTicks>
    226c:	88 23       	and	r24, r24
    226e:	71 f0       	breq	.+28     	; 0x228c <xTaskResumeAll+0xd2>
    2270:	c1 e0       	ldi	r28, 0x01	; 1
    2272:	d0 de       	rcall	.-608    	; 0x2014 <xTaskIncrementTick>
    2274:	81 11       	cpse	r24, r1
    2276:	c0 93 99 22 	sts	0x2299, r28	; 0x802299 <xYieldPending>
    227a:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <uxPendedTicks>
    227e:	81 50       	subi	r24, 0x01	; 1
    2280:	80 93 9a 22 	sts	0x229A, r24	; 0x80229a <uxPendedTicks>
    2284:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <uxPendedTicks>
    2288:	81 11       	cpse	r24, r1
    228a:	f3 cf       	rjmp	.-26     	; 0x2272 <xTaskResumeAll+0xb8>
    228c:	80 91 99 22 	lds	r24, 0x2299	; 0x802299 <xYieldPending>
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	29 f4       	brne	.+10     	; 0x229e <xTaskResumeAll+0xe4>
    2294:	f6 d9       	rcall	.-3092   	; 0x1682 <vPortYield>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <xTaskResumeAll+0xe6>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <xTaskResumeAll+0xe6>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0f 90       	pop	r0
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	08 95       	ret

000022b4 <vTaskDelay>:
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	ec 01       	movw	r28, r24
    22ba:	89 2b       	or	r24, r25
    22bc:	91 f0       	breq	.+36     	; 0x22e2 <vTaskDelay+0x2e>
    22be:	9a de       	rcall	.-716    	; 0x1ff4 <vTaskSuspendAll>
    22c0:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <xTickCount>
    22c4:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <xTickCount+0x1>
    22c8:	c8 0f       	add	r28, r24
    22ca:	d9 1f       	adc	r29, r25
    22cc:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <pxCurrentTCB>
    22d0:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    22d4:	02 96       	adiw	r24, 0x02	; 2
    22d6:	f3 d8       	rcall	.-3610   	; 0x14be <uxListRemove>
    22d8:	ce 01       	movw	r24, r28
    22da:	2a dd       	rcall	.-1452   	; 0x1d30 <prvAddCurrentTaskToDelayedList>
    22dc:	6e df       	rcall	.-292    	; 0x21ba <xTaskResumeAll>
    22de:	81 11       	cpse	r24, r1
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <vTaskDelay+0x30>
    22e2:	cf d9       	rcall	.-3170   	; 0x1682 <vPortYield>
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <vTaskSwitchContext>:
    22ea:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    22ee:	88 23       	and	r24, r24
    22f0:	21 f0       	breq	.+8      	; 0x22fa <vTaskSwitchContext+0x10>
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 99 22 	sts	0x2299, r24	; 0x802299 <xYieldPending>
    22f8:	08 95       	ret
    22fa:	10 92 99 22 	sts	0x2299, r1	; 0x802299 <xYieldPending>
    22fe:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <uxTopReadyPriority>
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	fc 01       	movw	r30, r24
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	8e 0f       	add	r24, r30
    2314:	9f 1f       	adc	r25, r31
    2316:	fc 01       	movw	r30, r24
    2318:	e1 54       	subi	r30, 0x41	; 65
    231a:	fd 4d       	sbci	r31, 0xDD	; 221
    231c:	80 81       	ld	r24, Z
    231e:	81 11       	cpse	r24, r1
    2320:	17 c0       	rjmp	.+46     	; 0x2350 <vTaskSwitchContext+0x66>
    2322:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <uxTopReadyPriority>
    2326:	81 50       	subi	r24, 0x01	; 1
    2328:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <uxTopReadyPriority>
    232c:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <uxTopReadyPriority>
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	fc 01       	movw	r30, r24
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	ee 0f       	add	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	8e 0f       	add	r24, r30
    2342:	9f 1f       	adc	r25, r31
    2344:	fc 01       	movw	r30, r24
    2346:	e1 54       	subi	r30, 0x41	; 65
    2348:	fd 4d       	sbci	r31, 0xDD	; 221
    234a:	80 81       	ld	r24, Z
    234c:	88 23       	and	r24, r24
    234e:	49 f3       	breq	.-46     	; 0x2322 <vTaskSwitchContext+0x38>
    2350:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <uxTopReadyPriority>
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9c 01       	movw	r18, r24
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	28 0f       	add	r18, r24
    2366:	39 1f       	adc	r19, r25
    2368:	d9 01       	movw	r26, r18
    236a:	a1 54       	subi	r26, 0x41	; 65
    236c:	bd 4d       	sbci	r27, 0xDD	; 221
    236e:	11 96       	adiw	r26, 0x01	; 1
    2370:	ed 91       	ld	r30, X+
    2372:	fc 91       	ld	r31, X
    2374:	12 97       	sbiw	r26, 0x02	; 2
    2376:	02 80       	ldd	r0, Z+2	; 0x02
    2378:	f3 81       	ldd	r31, Z+3	; 0x03
    237a:	e0 2d       	mov	r30, r0
    237c:	11 96       	adiw	r26, 0x01	; 1
    237e:	ed 93       	st	X+, r30
    2380:	fc 93       	st	X, r31
    2382:	12 97       	sbiw	r26, 0x02	; 2
    2384:	2e 53       	subi	r18, 0x3E	; 62
    2386:	3d 4d       	sbci	r19, 0xDD	; 221
    2388:	e2 17       	cp	r30, r18
    238a:	f3 07       	cpc	r31, r19
    238c:	29 f4       	brne	.+10     	; 0x2398 <vTaskSwitchContext+0xae>
    238e:	22 81       	ldd	r18, Z+2	; 0x02
    2390:	33 81       	ldd	r19, Z+3	; 0x03
    2392:	fd 01       	movw	r30, r26
    2394:	21 83       	std	Z+1, r18	; 0x01
    2396:	32 83       	std	Z+2, r19	; 0x02
    2398:	fc 01       	movw	r30, r24
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	8e 0f       	add	r24, r30
    23a8:	9f 1f       	adc	r25, r31
    23aa:	fc 01       	movw	r30, r24
    23ac:	e1 54       	subi	r30, 0x41	; 65
    23ae:	fd 4d       	sbci	r31, 0xDD	; 221
    23b0:	01 80       	ldd	r0, Z+1	; 0x01
    23b2:	f2 81       	ldd	r31, Z+2	; 0x02
    23b4:	e0 2d       	mov	r30, r0
    23b6:	86 81       	ldd	r24, Z+6	; 0x06
    23b8:	97 81       	ldd	r25, Z+7	; 0x07
    23ba:	80 93 ec 22 	sts	0x22EC, r24	; 0x8022ec <pxCurrentTCB>
    23be:	90 93 ed 22 	sts	0x22ED, r25	; 0x8022ed <pxCurrentTCB+0x1>
    23c2:	08 95       	ret

000023c4 <vTaskPlaceOnEventList>:
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	eb 01       	movw	r28, r22
    23ca:	60 91 ec 22 	lds	r22, 0x22EC	; 0x8022ec <pxCurrentTCB>
    23ce:	70 91 ed 22 	lds	r23, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    23d2:	64 5f       	subi	r22, 0xF4	; 244
    23d4:	7f 4f       	sbci	r23, 0xFF	; 255
    23d6:	42 d8       	rcall	.-3964   	; 0x145c <vListInsert>
    23d8:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <pxCurrentTCB>
    23dc:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    23e0:	02 96       	adiw	r24, 0x02	; 2
    23e2:	6d d8       	rcall	.-3878   	; 0x14be <uxListRemove>
    23e4:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <xTickCount>
    23e8:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <xTickCount+0x1>
    23ec:	8c 0f       	add	r24, r28
    23ee:	9d 1f       	adc	r25, r29
    23f0:	9f dc       	rcall	.-1730   	; 0x1d30 <prvAddCurrentTaskToDelayedList>
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <vTaskPlaceOnEventListRestricted>:
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	eb 01       	movw	r28, r22
    23fe:	60 91 ec 22 	lds	r22, 0x22EC	; 0x8022ec <pxCurrentTCB>
    2402:	70 91 ed 22 	lds	r23, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    2406:	64 5f       	subi	r22, 0xF4	; 244
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	07 d8       	rcall	.-4082   	; 0x141a <vListInsertEnd>
    240c:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <pxCurrentTCB>
    2410:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    2414:	02 96       	adiw	r24, 0x02	; 2
    2416:	53 d8       	rcall	.-3930   	; 0x14be <uxListRemove>
    2418:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <xTickCount>
    241c:	90 91 9e 22 	lds	r25, 0x229E	; 0x80229e <xTickCount+0x1>
    2420:	8c 0f       	add	r24, r28
    2422:	9d 1f       	adc	r25, r29
    2424:	85 dc       	rcall	.-1782   	; 0x1d30 <prvAddCurrentTaskToDelayedList>
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <xTaskRemoveFromEventList>:
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	dc 01       	movw	r26, r24
    2436:	15 96       	adiw	r26, 0x05	; 5
    2438:	ed 91       	ld	r30, X+
    243a:	fc 91       	ld	r31, X
    243c:	16 97       	sbiw	r26, 0x06	; 6
    243e:	c6 81       	ldd	r28, Z+6	; 0x06
    2440:	d7 81       	ldd	r29, Z+7	; 0x07
    2442:	8e 01       	movw	r16, r28
    2444:	04 5f       	subi	r16, 0xF4	; 244
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	c8 01       	movw	r24, r16
    244a:	39 d8       	rcall	.-3982   	; 0x14be <uxListRemove>
    244c:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    2450:	81 11       	cpse	r24, r1
    2452:	1b c0       	rjmp	.+54     	; 0x248a <xTaskRemoveFromEventList+0x5e>
    2454:	0a 50       	subi	r16, 0x0A	; 10
    2456:	11 09       	sbc	r17, r1
    2458:	c8 01       	movw	r24, r16
    245a:	31 d8       	rcall	.-3998   	; 0x14be <uxListRemove>
    245c:	8e 89       	ldd	r24, Y+22	; 0x16
    245e:	90 91 9c 22 	lds	r25, 0x229C	; 0x80229c <uxTopReadyPriority>
    2462:	98 17       	cp	r25, r24
    2464:	10 f4       	brcc	.+4      	; 0x246a <xTaskRemoveFromEventList+0x3e>
    2466:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <uxTopReadyPriority>
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 01       	movw	r18, r24
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	b8 01       	movw	r22, r16
    2480:	81 54       	subi	r24, 0x41	; 65
    2482:	9d 4d       	sbci	r25, 0xDD	; 221
    2484:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    2488:	05 c0       	rjmp	.+10     	; 0x2494 <xTaskRemoveFromEventList+0x68>
    248a:	b8 01       	movw	r22, r16
    248c:	80 ea       	ldi	r24, 0xA0	; 160
    248e:	92 e2       	ldi	r25, 0x22	; 34
    2490:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    2494:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <pxCurrentTCB>
    2498:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <pxCurrentTCB+0x1>
    249c:	9e 89       	ldd	r25, Y+22	; 0x16
    249e:	86 89       	ldd	r24, Z+22	; 0x16
    24a0:	89 17       	cp	r24, r25
    24a2:	20 f4       	brcc	.+8      	; 0x24ac <xTaskRemoveFromEventList+0x80>
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	80 93 99 22 	sts	0x2299, r24	; 0x802299 <xYieldPending>
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <xTaskRemoveFromEventList+0x82>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    24b8:	20 91 98 22 	lds	r18, 0x2298	; 0x802298 <xNumOfOverflows>
    24bc:	fc 01       	movw	r30, r24
    24be:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    24c0:	20 91 9d 22 	lds	r18, 0x229D	; 0x80229d <xTickCount>
    24c4:	30 91 9e 22 	lds	r19, 0x229E	; 0x80229e <xTickCount+0x1>
    24c8:	21 83       	std	Z+1, r18	; 0x01
    24ca:	32 83       	std	Z+2, r19	; 0x02
    24cc:	08 95       	ret

000024ce <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    24da:	20 91 9d 22 	lds	r18, 0x229D	; 0x80229d <xTickCount>
    24de:	30 91 9e 22 	lds	r19, 0x229E	; 0x80229e <xTickCount+0x1>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    24e2:	80 91 98 22 	lds	r24, 0x2298	; 0x802298 <xNumOfOverflows>
    24e6:	90 81       	ld	r25, Z
    24e8:	98 17       	cp	r25, r24
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <xTaskCheckForTimeOut+0x28>
    24ec:	81 81       	ldd	r24, Z+1	; 0x01
    24ee:	92 81       	ldd	r25, Z+2	; 0x02
    24f0:	28 17       	cp	r18, r24
    24f2:	39 07       	cpc	r19, r25
    24f4:	a8 f4       	brcc	.+42     	; 0x2520 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    24f6:	a1 81       	ldd	r26, Z+1	; 0x01
    24f8:	b2 81       	ldd	r27, Z+2	; 0x02
    24fa:	eb 01       	movw	r28, r22
    24fc:	48 81       	ld	r20, Y
    24fe:	59 81       	ldd	r21, Y+1	; 0x01
    2500:	c9 01       	movw	r24, r18
    2502:	8a 1b       	sub	r24, r26
    2504:	9b 0b       	sbc	r25, r27
    2506:	84 17       	cp	r24, r20
    2508:	95 07       	cpc	r25, r21
    250a:	60 f4       	brcc	.+24     	; 0x2524 <xTaskCheckForTimeOut+0x56>
    250c:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    250e:	a2 1b       	sub	r26, r18
    2510:	b3 0b       	sbc	r27, r19
    2512:	4a 0f       	add	r20, r26
    2514:	5b 1f       	adc	r21, r27
    2516:	48 83       	st	Y, r20
    2518:	59 83       	std	Y+1, r21	; 0x01
			vTaskSetTimeOutState( pxTimeOut );
    251a:	ce df       	rcall	.-100    	; 0x24b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <xTaskCheckForTimeOut+0x58>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2524:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	08 95       	ret

00002530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	80 93 99 22 	sts	0x2299, r24	; 0x802299 <xYieldPending>
    2536:	08 95       	ret

00002538 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2538:	80 91 9b 22 	lds	r24, 0x229B	; 0x80229b <xSchedulerRunning>
    253c:	88 23       	and	r24, r24
    253e:	31 f0       	breq	.+12     	; 0x254c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2540:	80 91 96 22 	lds	r24, 0x2296	; 0x802296 <uxSchedulerSuspended>
    2544:	88 23       	and	r24, r24
    2546:	21 f0       	breq	.+8      	; 0x2550 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    2550:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    2552:	08 95       	ret

00002554 <prvInsertTimerInActiveList>:

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
}
    2554:	fc 01       	movw	r30, r24
    2556:	62 83       	std	Z+2, r22	; 0x02
    2558:	73 83       	std	Z+3, r23	; 0x03
    255a:	80 87       	std	Z+8, r24	; 0x08
    255c:	91 87       	std	Z+9, r25	; 0x09
    255e:	46 17       	cp	r20, r22
    2560:	57 07       	cpc	r21, r23
    2562:	90 f0       	brcs	.+36     	; 0x2588 <prvInsertTimerInActiveList+0x34>
    2564:	42 1b       	sub	r20, r18
    2566:	53 0b       	sbc	r21, r19
    2568:	84 85       	ldd	r24, Z+12	; 0x0c
    256a:	95 85       	ldd	r25, Z+13	; 0x0d
    256c:	48 17       	cp	r20, r24
    256e:	59 07       	cpc	r21, r25
    2570:	e0 f4       	brcc	.+56     	; 0x25aa <prvInsertTimerInActiveList+0x56>
    2572:	bf 01       	movw	r22, r30
    2574:	6e 5f       	subi	r22, 0xFE	; 254
    2576:	7f 4f       	sbci	r23, 0xFF	; 255
    2578:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <pxOverflowTimerList>
    257c:	90 91 f3 22 	lds	r25, 0x22F3	; 0x8022f3 <pxOverflowTimerList+0x1>
    2580:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	08 95       	ret
    2588:	42 17       	cp	r20, r18
    258a:	53 07       	cpc	r21, r19
    258c:	18 f4       	brcc	.+6      	; 0x2594 <prvInsertTimerInActiveList+0x40>
    258e:	62 17       	cp	r22, r18
    2590:	73 07       	cpc	r23, r19
    2592:	68 f4       	brcc	.+26     	; 0x25ae <prvInsertTimerInActiveList+0x5a>
    2594:	bf 01       	movw	r22, r30
    2596:	6e 5f       	subi	r22, 0xFE	; 254
    2598:	7f 4f       	sbci	r23, 0xFF	; 255
    259a:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <pxCurrentTimerList>
    259e:	90 91 f5 22 	lds	r25, 0x22F5	; 0x8022f5 <pxCurrentTimerList+0x1>
    25a2:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	08 95       	ret
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	08 95       	ret
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	08 95       	ret

000025b2 <prvCheckForValidListAndQueue>:
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	0f 92       	push	r0
    25b8:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <xTimerQueue>
    25bc:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>
    25c0:	89 2b       	or	r24, r25
    25c2:	e1 f4       	brne	.+56     	; 0x25fc <prvCheckForValidListAndQueue+0x4a>
    25c4:	8f ef       	ldi	r24, 0xFF	; 255
    25c6:	92 e2       	ldi	r25, 0x22	; 34
    25c8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    25cc:	86 ef       	ldi	r24, 0xF6	; 246
    25ce:	92 e2       	ldi	r25, 0x22	; 34
    25d0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    25d4:	8f ef       	ldi	r24, 0xFF	; 255
    25d6:	92 e2       	ldi	r25, 0x22	; 34
    25d8:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <pxCurrentTimerList>
    25dc:	90 93 f5 22 	sts	0x22F5, r25	; 0x8022f5 <pxCurrentTimerList+0x1>
    25e0:	86 ef       	ldi	r24, 0xF6	; 246
    25e2:	92 e2       	ldi	r25, 0x22	; 34
    25e4:	80 93 f2 22 	sts	0x22F2, r24	; 0x8022f2 <pxOverflowTimerList>
    25e8:	90 93 f3 22 	sts	0x22F3, r25	; 0x8022f3 <pxOverflowTimerList+0x1>
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	65 e0       	ldi	r22, 0x05	; 5
    25f0:	8a e0       	ldi	r24, 0x0A	; 10
    25f2:	f9 d9       	rcall	.-3086   	; 0x19e6 <xQueueGenericCreate>
    25f4:	80 93 f0 22 	sts	0x22F0, r24	; 0x8022f0 <xTimerQueue>
    25f8:	90 93 f1 22 	sts	0x22F1, r25	; 0x8022f1 <xTimerQueue+0x1>
    25fc:	0f 90       	pop	r0
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	08 95       	ret

00002602 <xTimerCreateTimerTask>:
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	d0 df       	rcall	.-96     	; 0x25b2 <prvCheckForValidListAndQueue>
    2612:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <xTimerQueue>
    2616:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>
    261a:	89 2b       	or	r24, r25
    261c:	89 f0       	breq	.+34     	; 0x2640 <xTimerCreateTimerTask+0x3e>
    261e:	a1 2c       	mov	r10, r1
    2620:	b1 2c       	mov	r11, r1
    2622:	c1 2c       	mov	r12, r1
    2624:	d1 2c       	mov	r13, r1
    2626:	e1 2c       	mov	r14, r1
    2628:	f1 2c       	mov	r15, r1
    262a:	03 e0       	ldi	r16, 0x03	; 3
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	45 e5       	ldi	r20, 0x55	; 85
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	64 e1       	ldi	r22, 0x14	; 20
    2636:	70 e2       	ldi	r23, 0x20	; 32
    2638:	89 ed       	ldi	r24, 0xD9	; 217
    263a:	93 e1       	ldi	r25, 0x13	; 19
    263c:	ae db       	rcall	.-2212   	; 0x1d9a <xTaskGenericCreate>
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <xTimerCreateTimerTask+0x40>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	0f 91       	pop	r16
    2644:	ff 90       	pop	r15
    2646:	ef 90       	pop	r14
    2648:	df 90       	pop	r13
    264a:	cf 90       	pop	r12
    264c:	bf 90       	pop	r11
    264e:	af 90       	pop	r10
    2650:	08 95       	ret

00002652 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	25 97       	sbiw	r28, 0x05	; 5
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	de bf       	out	0x3e, r29	; 62
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2664:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <xTimerQueue>
    2668:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>
    266c:	30 97       	sbiw	r30, 0x00	; 0
    266e:	51 f1       	breq	.+84     	; 0x26c4 <xTimerGenericCommand+0x72>
    2670:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2672:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2674:	4a 83       	std	Y+2, r20	; 0x02
    2676:	5b 83       	std	Y+3, r21	; 0x03
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2678:	8c 83       	std	Y+4, r24	; 0x04
    267a:	9d 83       	std	Y+5, r25	; 0x05

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    267c:	66 30       	cpi	r22, 0x06	; 6
    267e:	d4 f4       	brge	.+52     	; 0x26b4 <xTimerGenericCommand+0x62>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2680:	5b df       	rcall	.-330    	; 0x2538 <xTaskGetSchedulerState>
    2682:	82 30       	cpi	r24, 0x02	; 2
    2684:	59 f4       	brne	.+22     	; 0x269c <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	a8 01       	movw	r20, r16
    268a:	be 01       	movw	r22, r28
    268c:	6f 5f       	subi	r22, 0xFF	; 255
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <xTimerQueue>
    2694:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>
    2698:	cf d9       	rcall	.-3170   	; 0x1a38 <xQueueGenericSend>
    269a:	15 c0       	rjmp	.+42     	; 0x26c6 <xTimerGenericCommand+0x74>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	be 01       	movw	r22, r28
    26a4:	6f 5f       	subi	r22, 0xFF	; 255
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <xTimerQueue>
    26ac:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>
    26b0:	c3 d9       	rcall	.-3194   	; 0x1a38 <xQueueGenericSend>
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <xTimerGenericCommand+0x74>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	ad 01       	movw	r20, r26
    26b8:	be 01       	movw	r22, r28
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	cf 01       	movw	r24, r30
    26c0:	48 da       	rcall	.-2928   	; 0x1b52 <xQueueGenericSendFromISR>
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    26c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    26c6:	25 96       	adiw	r28, 0x05	; 5
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	08 95       	ret

000026d6 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    26ec:	89 dc       	rcall	.-1774   	; 0x2000 <xTaskGetTickCount>
    26ee:	7c 01       	movw	r14, r24

	if( xTimeNow < xLastTime )
    26f0:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <xLastTime.4450>
    26f4:	90 91 ef 22 	lds	r25, 0x22EF	; 0x8022ef <xLastTime.4450+0x1>
    26f8:	e8 16       	cp	r14, r24
    26fa:	f9 06       	cpc	r15, r25
    26fc:	08 f0       	brcs	.+2      	; 0x2700 <prvSampleTimeNow+0x2a>
    26fe:	47 c0       	rjmp	.+142    	; 0x278e <prvSampleTimeNow+0xb8>
    2700:	2f c0       	rjmp	.+94     	; 0x2760 <prvSampleTimeNow+0x8a>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2702:	05 80       	ldd	r0, Z+5	; 0x05
    2704:	f6 81       	ldd	r31, Z+6	; 0x06
    2706:	e0 2d       	mov	r30, r0
    2708:	a0 80       	ld	r10, Z
    270a:	b1 80       	ldd	r11, Z+1	; 0x01

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    270c:	c6 81       	ldd	r28, Z+6	; 0x06
    270e:	d7 81       	ldd	r29, Z+7	; 0x07
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2710:	8e 01       	movw	r16, r28
    2712:	0e 5f       	subi	r16, 0xFE	; 254
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	c8 01       	movw	r24, r16
    2718:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    271c:	e9 89       	ldd	r30, Y+17	; 0x11
    271e:	fa 89       	ldd	r31, Y+18	; 0x12
    2720:	ce 01       	movw	r24, r28
    2722:	19 95       	eicall

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2724:	8e 85       	ldd	r24, Y+14	; 0x0e
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	d9 f4       	brne	.+54     	; 0x2760 <prvSampleTimeNow+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    272a:	8c 85       	ldd	r24, Y+12	; 0x0c
    272c:	9d 85       	ldd	r25, Y+13	; 0x0d
    272e:	8a 0d       	add	r24, r10
    2730:	9b 1d       	adc	r25, r11
			if( xReloadTime > xNextExpireTime )
    2732:	a8 16       	cp	r10, r24
    2734:	b9 06       	cpc	r11, r25
    2736:	60 f4       	brcc	.+24     	; 0x2750 <prvSampleTimeNow+0x7a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2738:	8a 83       	std	Y+2, r24	; 0x02
    273a:	9b 83       	std	Y+3, r25	; 0x03
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    273c:	c8 87       	std	Y+8, r28	; 0x08
    273e:	d9 87       	std	Y+9, r29	; 0x09
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2740:	b8 01       	movw	r22, r16
    2742:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <pxCurrentTimerList>
    2746:	90 91 f5 22 	lds	r25, 0x22F5	; 0x8022f5 <pxCurrentTimerList+0x1>
    274a:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    274e:	08 c0       	rjmp	.+16     	; 0x2760 <prvSampleTimeNow+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2750:	00 e0       	ldi	r16, 0x00	; 0
    2752:	10 e0       	ldi	r17, 0x00	; 0
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	a5 01       	movw	r20, r10
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	ce 01       	movw	r24, r28
    275e:	79 df       	rcall	.-270    	; 0x2652 <xTimerGenericCommand>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2760:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <pxCurrentTimerList>
    2764:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <pxCurrentTimerList+0x1>
    2768:	80 81       	ld	r24, Z
    276a:	81 11       	cpse	r24, r1
    276c:	ca cf       	rjmp	.-108    	; 0x2702 <prvSampleTimeNow+0x2c>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    276e:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <pxOverflowTimerList>
    2772:	90 91 f3 22 	lds	r25, 0x22F3	; 0x8022f3 <pxOverflowTimerList+0x1>
    2776:	80 93 f4 22 	sts	0x22F4, r24	; 0x8022f4 <pxCurrentTimerList>
    277a:	90 93 f5 22 	sts	0x22F5, r25	; 0x8022f5 <pxCurrentTimerList+0x1>
	pxOverflowTimerList = pxTemp;
    277e:	e0 93 f2 22 	sts	0x22F2, r30	; 0x8022f2 <pxOverflowTimerList>
    2782:	f0 93 f3 22 	sts	0x22F3, r31	; 0x8022f3 <pxOverflowTimerList+0x1>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	f6 01       	movw	r30, r12
    278a:	80 83       	st	Z, r24
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <prvSampleTimeNow+0xbc>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    278e:	f6 01       	movw	r30, r12
    2790:	10 82       	st	Z, r1
	}

	xLastTime = xTimeNow;
    2792:	e0 92 ee 22 	sts	0x22EE, r14	; 0x8022ee <xLastTime.4450>
    2796:	f0 92 ef 22 	sts	0x22EF, r15	; 0x8022ef <xLastTime.4450+0x1>

	return xTimeNow;
}
    279a:	c7 01       	movw	r24, r14
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	bf 90       	pop	r11
    27ae:	af 90       	pop	r10
    27b0:	08 95       	ret

000027b2 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <prvTimerTask+0x6>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <prvTimerTask+0x8>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27be:	ce 01       	movw	r24, r28
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	5c 01       	movw	r10, r24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    27c4:	e8 2e       	mov	r14, r24
    27c6:	fb 2c       	mov	r15, r11
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    27c8:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <pxCurrentTimerList>
    27cc:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    27d0:	80 81       	ld	r24, Z
    27d2:	88 23       	and	r24, r24
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <prvTimerTask+0x26>
    27d6:	b7 c0       	rjmp	.+366    	; 0x2946 <prvTimerTask+0x194>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    27d8:	05 80       	ldd	r0, Z+5	; 0x05
    27da:	f6 81       	ldd	r31, Z+6	; 0x06
    27dc:	e0 2d       	mov	r30, r0
    27de:	c0 80       	ld	r12, Z
    27e0:	d1 80       	ldd	r13, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    27e2:	08 dc       	rcall	.-2032   	; 0x1ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27e4:	c5 01       	movw	r24, r10
    27e6:	77 df       	rcall	.-274    	; 0x26d6 <prvSampleTimeNow>
    27e8:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	81 11       	cpse	r24, r1
    27ee:	43 c0       	rjmp	.+134    	; 0x2876 <prvTimerTask+0xc4>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    27f0:	0c 15       	cp	r16, r12
    27f2:	1d 05       	cpc	r17, r13
			{
				( void ) xTaskResumeAll();
    27f4:	90 f1       	brcs	.+100    	; 0x285a <prvTimerTask+0xa8>
    27f6:	e1 dc       	rcall	.-1598   	; 0x21ba <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    27f8:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <pxCurrentTimerList>
    27fc:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <pxCurrentTimerList+0x1>
    2800:	05 80       	ldd	r0, Z+5	; 0x05
    2802:	f6 81       	ldd	r31, Z+6	; 0x06
    2804:	e0 2d       	mov	r30, r0
    2806:	86 80       	ldd	r8, Z+6	; 0x06
    2808:	97 80       	ldd	r9, Z+7	; 0x07

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    280a:	c4 01       	movw	r24, r8
    280c:	02 96       	adiw	r24, 0x02	; 2
    280e:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2812:	d4 01       	movw	r26, r8
    2814:	1e 96       	adiw	r26, 0x0e	; 14
    2816:	8c 91       	ld	r24, X
    2818:	1e 97       	sbiw	r26, 0x0e	; 14
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	a1 f4       	brne	.+40     	; 0x2846 <prvTimerTask+0x94>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    281e:	1c 96       	adiw	r26, 0x0c	; 12
    2820:	6d 91       	ld	r22, X+
    2822:	7c 91       	ld	r23, X
    2824:	1d 97       	sbiw	r26, 0x0d	; 13
    2826:	6c 0d       	add	r22, r12
    2828:	7d 1d       	adc	r23, r13
    282a:	96 01       	movw	r18, r12
    282c:	a8 01       	movw	r20, r16
    282e:	c4 01       	movw	r24, r8
    2830:	91 de       	rcall	.-734    	; 0x2554 <prvInsertTimerInActiveList>
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	41 f4       	brne	.+16     	; 0x2846 <prvTimerTask+0x94>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2836:	00 e0       	ldi	r16, 0x00	; 0
    2838:	10 e0       	ldi	r17, 0x00	; 0
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	a6 01       	movw	r20, r12
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	c4 01       	movw	r24, r8
    2844:	06 df       	rcall	.-500    	; 0x2652 <xTimerGenericCommand>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2846:	d4 01       	movw	r26, r8
    2848:	51 96       	adiw	r26, 0x11	; 17
    284a:	ed 91       	ld	r30, X+
    284c:	fc 91       	ld	r31, X
    284e:	52 97       	sbiw	r26, 0x12	; 18
    2850:	c4 01       	movw	r24, r8
    2852:	19 95       	eicall
    2854:	6b c0       	rjmp	.+214    	; 0x292c <prvTimerTask+0x17a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2856:	c1 2c       	mov	r12, r1
    2858:	d1 2c       	mov	r13, r1
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    285a:	b6 01       	movw	r22, r12
    285c:	60 1b       	sub	r22, r16
    285e:	71 0b       	sbc	r23, r17
    2860:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <xTimerQueue>
    2864:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>

				if( xTaskResumeAll() == pdFALSE )
    2868:	41 da       	rcall	.-2942   	; 0x1cec <vQueueWaitForMessageRestricted>
    286a:	a7 dc       	rcall	.-1714   	; 0x21ba <xTaskResumeAll>
    286c:	81 11       	cpse	r24, r1
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    286e:	5e c0       	rjmp	.+188    	; 0x292c <prvTimerTask+0x17a>
    2870:	0e 94 41 0b 	call	0x1682	; 0x1682 <vPortYield>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    2874:	5b c0       	rjmp	.+182    	; 0x292c <prvTimerTask+0x17a>
    2876:	a1 dc       	rcall	.-1726   	; 0x21ba <xTaskResumeAll>
    2878:	59 c0       	rjmp	.+178    	; 0x292c <prvTimerTask+0x17a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	88 23       	and	r24, r24
    287e:	0c f4       	brge	.+2      	; 0x2882 <prvTimerTask+0xd0>
    2880:	55 c0       	rjmp	.+170    	; 0x292c <prvTimerTask+0x17a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2882:	cc 80       	ldd	r12, Y+4	; 0x04
    2884:	dd 80       	ldd	r13, Y+5	; 0x05

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2886:	f6 01       	movw	r30, r12
    2888:	82 85       	ldd	r24, Z+10	; 0x0a
    288a:	93 85       	ldd	r25, Z+11	; 0x0b
    288c:	89 2b       	or	r24, r25
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    288e:	21 f0       	breq	.+8      	; 0x2898 <prvTimerTask+0xe6>
    2890:	c6 01       	movw	r24, r12
    2892:	02 96       	adiw	r24, 0x02	; 2
    2894:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2898:	ce 01       	movw	r24, r28
    289a:	06 96       	adiw	r24, 0x06	; 6
    289c:	1c df       	rcall	.-456    	; 0x26d6 <prvSampleTimeNow>
    289e:	ac 01       	movw	r20, r24

			switch( xMessage.xMessageID )
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	08 2e       	mov	r0, r24
    28a4:	00 0c       	add	r0, r0
    28a6:	99 0b       	sbc	r25, r25
    28a8:	aa 0b       	sbc	r26, r26
    28aa:	bb 0b       	sbc	r27, r27
    28ac:	8a 30       	cpi	r24, 0x0A	; 10
    28ae:	91 05       	cpc	r25, r1
    28b0:	08 f0       	brcs	.+2      	; 0x28b4 <prvTimerTask+0x102>
    28b2:	3c c0       	rjmp	.+120    	; 0x292c <prvTimerTask+0x17a>
    28b4:	fc 01       	movw	r30, r24
    28b6:	88 27       	eor	r24, r24
    28b8:	e2 50       	subi	r30, 0x02	; 2
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	8f 4f       	sbci	r24, 0xFF	; 255
    28be:	67 c2       	rjmp	.+1230   	; 0x2d8e <__tablejump2__>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    28c0:	2a 81       	ldd	r18, Y+2	; 0x02
    28c2:	3b 81       	ldd	r19, Y+3	; 0x03
    28c4:	d6 01       	movw	r26, r12
    28c6:	1c 96       	adiw	r26, 0x0c	; 12
    28c8:	6d 91       	ld	r22, X+
    28ca:	7c 91       	ld	r23, X
    28cc:	1d 97       	sbiw	r26, 0x0d	; 13
    28ce:	62 0f       	add	r22, r18
    28d0:	73 1f       	adc	r23, r19
    28d2:	c6 01       	movw	r24, r12
    28d4:	3f de       	rcall	.-898    	; 0x2554 <prvInsertTimerInActiveList>
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	49 f5       	brne	.+82     	; 0x292c <prvTimerTask+0x17a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28da:	d6 01       	movw	r26, r12
    28dc:	51 96       	adiw	r26, 0x11	; 17
    28de:	ed 91       	ld	r30, X+
    28e0:	fc 91       	ld	r31, X
    28e2:	52 97       	sbiw	r26, 0x12	; 18
    28e4:	c6 01       	movw	r24, r12
    28e6:	19 95       	eicall
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    28e8:	f6 01       	movw	r30, r12
    28ea:	86 85       	ldd	r24, Z+14	; 0x0e
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	f1 f4       	brne	.+60     	; 0x292c <prvTimerTask+0x17a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    28f0:	4a 81       	ldd	r20, Y+2	; 0x02
    28f2:	5b 81       	ldd	r21, Y+3	; 0x03
    28f4:	84 85       	ldd	r24, Z+12	; 0x0c
    28f6:	95 85       	ldd	r25, Z+13	; 0x0d
    28f8:	48 0f       	add	r20, r24
    28fa:	59 1f       	adc	r21, r25
    28fc:	00 e0       	ldi	r16, 0x00	; 0
    28fe:	10 e0       	ldi	r17, 0x00	; 0
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	c6 01       	movw	r24, r12
    2908:	a4 de       	rcall	.-696    	; 0x2652 <xTimerGenericCommand>
    290a:	10 c0       	rjmp	.+32     	; 0x292c <prvTimerTask+0x17a>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    290c:	6a 81       	ldd	r22, Y+2	; 0x02
    290e:	7b 81       	ldd	r23, Y+3	; 0x03
    2910:	d6 01       	movw	r26, r12
    2912:	1c 96       	adiw	r26, 0x0c	; 12
    2914:	6d 93       	st	X+, r22
    2916:	7c 93       	st	X, r23
    2918:	1d 97       	sbiw	r26, 0x0d	; 13
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    291a:	64 0f       	add	r22, r20
    291c:	75 1f       	adc	r23, r21
    291e:	9a 01       	movw	r18, r20
    2920:	c6 01       	movw	r24, r12
    2922:	18 de       	rcall	.-976    	; 0x2554 <prvInsertTimerInActiveList>
    2924:	03 c0       	rjmp	.+6      	; 0x292c <prvTimerTask+0x17a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    2926:	c6 01       	movw	r24, r12
    2928:	0e 94 00 0c 	call	0x1800	; 0x1800 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	6e 2d       	mov	r22, r14
    2934:	7f 2d       	mov	r23, r15
    2936:	80 91 f0 22 	lds	r24, 0x22F0	; 0x8022f0 <xTimerQueue>
    293a:	90 91 f1 22 	lds	r25, 0x22F1	; 0x8022f1 <xTimerQueue+0x1>
    293e:	3f d9       	rcall	.-3458   	; 0x1bbe <xQueueGenericReceive>
    2940:	81 11       	cpse	r24, r1
    2942:	9b cf       	rjmp	.-202    	; 0x287a <prvTimerTask+0xc8>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2944:	41 cf       	rjmp	.-382    	; 0x27c8 <prvTimerTask+0x16>
    2946:	56 db       	rcall	.-2388   	; 0x1ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2948:	c5 01       	movw	r24, r10
    294a:	c5 de       	rcall	.-630    	; 0x26d6 <prvSampleTimeNow>
    294c:	8c 01       	movw	r16, r24
    294e:	89 81       	ldd	r24, Y+1	; 0x01
		if( xTimerListsWereSwitched == pdFALSE )
    2950:	88 23       	and	r24, r24
    2952:	09 f4       	brne	.+2      	; 0x2956 <prvTimerTask+0x1a4>
    2954:	80 cf       	rjmp	.-256    	; 0x2856 <prvTimerTask+0xa4>
    2956:	8f cf       	rjmp	.-226    	; 0x2876 <prvTimerTask+0xc4>

00002958 <vCheckDoor>:
    2958:	e0 e8       	ldi	r30, 0x80	; 128
	// Disable interrupts, just for safety
	USARTC0_CTRLA = 0;
	// 8 data bits, no parity, 1 stop bit
	USARTC0_CTRLC = USART_CHSIZE_8BIT_gc;
	// Enable receive and transmit
	USARTC0_CTRLB = USART_TXEN_bm | USART_RXEN_bm;
    295a:	f6 e0       	ldi	r31, 0x06	; 6
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	82 83       	std	Z+2, r24	; 0x02
    2960:	88 e1       	ldi	r24, 0x18	; 24
    2962:	80 8b       	std	Z+16, r24	; 0x10
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	0f 2e       	mov	r0, r31
    2968:	f0 e8       	ldi	r31, 0x80	; 128
    296a:	cf 2e       	mov	r12, r31
    296c:	f6 e0       	ldi	r31, 0x06	; 6
    296e:	df 2e       	mov	r13, r31
    2970:	f0 2d       	mov	r31, r0
    2972:	0f 2e       	mov	r0, r31
    2974:	fd e2       	ldi	r31, 0x2D	; 45
    2976:	ef 2e       	mov	r14, r31
    2978:	f0 e2       	ldi	r31, 0x20	; 32
    297a:	ff 2e       	mov	r15, r31
    297c:	f0 2d       	mov	r31, r0
    297e:	d0 e8       	ldi	r29, 0x80	; 128
    2980:	0d e0       	ldi	r16, 0x0D	; 13
    2982:	13 e2       	ldi	r17, 0x23	; 35
    2984:	0f 2e       	mov	r0, r31
    2986:	fc e1       	ldi	r31, 0x1C	; 28
    2988:	8f 2e       	mov	r8, r31
    298a:	f0 e2       	ldi	r31, 0x20	; 32
    298c:	9f 2e       	mov	r9, r31
    298e:	f0 2d       	mov	r31, r0
    2990:	0f 2e       	mov	r0, r31
    2992:	f4 e2       	ldi	r31, 0x24	; 36
    2994:	af 2e       	mov	r10, r31
    2996:	f0 e2       	ldi	r31, 0x20	; 32
    2998:	bf 2e       	mov	r11, r31
    299a:	f0 2d       	mov	r31, r0
    299c:	f6 01       	movw	r30, r12
    299e:	c0 85       	ldd	r28, Z+8	; 0x08
    29a0:	c1 70       	andi	r28, 0x01	; 1
    29a2:	8c 17       	cp	r24, r28
    29a4:	51 f1       	breq	.+84     	; 0x29fa <vCheckDoor+0xa2>
    29a6:	c0 93 0b 23 	sts	0x230B, r28	; 0x80230b <door_open>
    29aa:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <door_open>
    29ae:	81 11       	cpse	r24, r1
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <vCheckDoor+0x60>
    29b2:	8a 2d       	mov	r24, r10
    29b4:	9b 2d       	mov	r25, r11
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <vCheckDoor+0x64>
    29b8:	88 2d       	mov	r24, r8
    29ba:	99 2d       	mov	r25, r9
    29bc:	9f 93       	push	r25
    29be:	8f 93       	push	r24
    29c0:	ff 92       	push	r15
    29c2:	ef 92       	push	r14
    29c4:	1f 92       	push	r1
    29c6:	df 93       	push	r29
    29c8:	1f 93       	push	r17
    29ca:	0f 93       	push	r16
    29cc:	12 d3       	rcall	.+1572   	; 0x2ff2 <snprintf>
    29ce:	26 e0       	ldi	r18, 0x06	; 6
    29d0:	30 e2       	ldi	r19, 0x20	; 32
    29d2:	40 e1       	ldi	r20, 0x10	; 16
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	c8 01       	movw	r24, r16
    29d8:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <xSemaphoreDoor>
    29ea:	90 91 8e 23 	lds	r25, 0x238E	; 0x80238e <xSemaphoreDoor+0x1>
    29ee:	24 d8       	rcall	.-4024   	; 0x1a38 <xQueueGenericSend>
    29f0:	8d b7       	in	r24, 0x3d	; 61
    29f2:	9e b7       	in	r25, 0x3e	; 62
    29f4:	08 96       	adiw	r24, 0x08	; 8
    29f6:	8d bf       	out	0x3d, r24	; 61
    29f8:	9e bf       	out	0x3e, r25	; 62
    29fa:	82 e3       	ldi	r24, 0x32	; 50
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	5a dc       	rcall	.-1868   	; 0x22b4 <vTaskDelay>
    2a00:	8c 2f       	mov	r24, r28
    2a02:	cc cf       	rjmp	.-104    	; 0x299c <vCheckDoor+0x44>

00002a04 <PWM_Init>:
/* Initiate Single Slope PWM                                            */
/************************************************************************/
void PWM_Init(void)
{
	/* Set output for Buzzer */
	PORTC.DIR |= PIN0_bm;
    2a04:	e0 e4       	ldi	r30, 0x40	; 64
    2a06:	f6 e0       	ldi	r31, 0x06	; 6
    2a08:	80 81       	ld	r24, Z
    2a0a:	81 60       	ori	r24, 0x01	; 1
    2a0c:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm;
    2a0e:	e0 e0       	ldi	r30, 0x00	; 0
    2a10:	f8 e0       	ldi	r31, 0x08	; 8
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    2a16:	86 e1       	ldi	r24, 0x16	; 22
    2a18:	81 83       	std	Z+1, r24	; 0x01

	/* Set Period */
	TCC0.PER = 1000;
    2a1a:	88 ee       	ldi	r24, 0xE8	; 232
    2a1c:	93 e0       	ldi	r25, 0x03	; 3
    2a1e:	86 a3       	std	Z+38, r24	; 0x26
    2a20:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value*/
	TCC0.CCA = 0;
    2a22:	10 a6       	std	Z+40, r1	; 0x28
    2a24:	11 a6       	std	Z+41, r1	; 0x29
    2a26:	08 95       	ret

00002a28 <reset_actuators>:
/* Resets all actuators (buzzer & LED) and counter                      */
/************************************************************************/
void reset_actuators(void)
{
	// Reset buzzer
	TCC0.CCA = 0;
    2a28:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2a2c:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    2a30:	e0 ee       	ldi	r30, 0xE0	; 224
    2a32:	f7 e0       	ldi	r31, 0x07	; 7
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	85 83       	std	Z+5, r24	; 0x05
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	85 83       	std	Z+5, r24	; 0x05
	// Turn off LED
	LED_Off(LED0);
	LED_Off(LED1);
	// Reset counter
	counter = 0;
    2a3c:	10 92 08 23 	sts	0x2308, r1	; 0x802308 <counter>
    2a40:	10 92 09 23 	sts	0x2309, r1	; 0x802309 <counter+0x1>
    2a44:	08 95       	ret

00002a46 <vAlarmControl>:

/************************************************************************/
/* Task: Alarm Control                                                  */
/************************************************************************/
static portTASK_FUNCTION(vAlarmControl, pvParameters) {
	gfx_mono_draw_string("Waktu: 0", 0, 24, &sysfont);
    2a46:	26 e0       	ldi	r18, 0x06	; 6
    2a48:	30 e2       	ldi	r19, 0x20	; 32
    2a4a:	48 e1       	ldi	r20, 0x18	; 24
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	87 e3       	ldi	r24, 0x37	; 55
    2a50:	90 e2       	ldi	r25, 0x20	; 32
    2a52:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
	PWM_Init();
    2a56:	d6 df       	rcall	.-84     	; 0x2a04 <PWM_Init>

	while (1) {
		if (xSemaphoreTake(xSemaphoreDoor, portTICK_PERIOD_MS) == pdTRUE) {
			if (xSemaphoreTake(xSemaphoreSystemActive, portMAX_DELAY) == pdTRUE) {
				if (system_active && door_open) {
					alarm_active = true;
    2a58:	77 24       	eor	r7, r7
    2a5a:	73 94       	inc	r7
				TCC0.CCA = 800; // High buzzer frequency
				LED_Toggle(LED0);
				LED_Toggle(LED1);
			}
			counter++;
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d", counter);
    2a5c:	0f 2e       	mov	r0, r31
    2a5e:	f0 e4       	ldi	r31, 0x40	; 64
    2a60:	ef 2e       	mov	r14, r31
    2a62:	f0 e2       	ldi	r31, 0x20	; 32
    2a64:	ff 2e       	mov	r15, r31
    2a66:	f0 2d       	mov	r31, r0
    2a68:	68 94       	set
    2a6a:	55 24       	eor	r5, r5
    2a6c:	57 f8       	bld	r5, 7
    2a6e:	cd e0       	ldi	r28, 0x0D	; 13
    2a70:	d3 e2       	ldi	r29, 0x23	; 35
			if (counter < 10) {
				TCC0.CCA = 500; // Low buzzer frequency
				LED_On(LED0);
				LED_On(LED1);
				} else {
				TCC0.CCA = 800; // High buzzer frequency
    2a72:	c1 2c       	mov	r12, r1
    2a74:	68 94       	set
    2a76:	dd 24       	eor	r13, r13
    2a78:	d3 f8       	bld	r13, 3
    2a7a:	0f 2e       	mov	r0, r31
    2a7c:	f0 e2       	ldi	r31, 0x20	; 32
    2a7e:	8f 2e       	mov	r8, r31
    2a80:	f3 e0       	ldi	r31, 0x03	; 3
    2a82:	9f 2e       	mov	r9, r31
    2a84:	f0 2d       	mov	r31, r0

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2a86:	00 ee       	ldi	r16, 0xE0	; 224
    2a88:	17 e0       	ldi	r17, 0x07	; 7
    2a8a:	68 94       	set
    2a8c:	66 24       	eor	r6, r6
    2a8e:	61 f8       	bld	r6, 1
			}
		}

		if (alarm_active) {
			if (counter < 10) {
				TCC0.CCA = 500; // Low buzzer frequency
    2a90:	0f 2e       	mov	r0, r31
    2a92:	f4 ef       	ldi	r31, 0xF4	; 244
    2a94:	af 2e       	mov	r10, r31
    2a96:	bb 24       	eor	r11, r11
    2a98:	b3 94       	inc	r11
    2a9a:	f0 2d       	mov	r31, r0
static portTASK_FUNCTION(vAlarmControl, pvParameters) {
	gfx_mono_draw_string("Waktu: 0", 0, 24, &sysfont);
	PWM_Init();

	while (1) {
		if (xSemaphoreTake(xSemaphoreDoor, portTICK_PERIOD_MS) == pdTRUE) {
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	42 e0       	ldi	r20, 0x02	; 2
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	80 91 8d 23 	lds	r24, 0x238D	; 0x80238d <xSemaphoreDoor>
    2aaa:	90 91 8e 23 	lds	r25, 0x238E	; 0x80238e <xSemaphoreDoor+0x1>
    2aae:	87 d8       	rcall	.-3826   	; 0x1bbe <xQueueGenericReceive>
    2ab0:	81 30       	cpi	r24, 0x01	; 1
    2ab2:	21 f5       	brne	.+72     	; 0x2afc <vAlarmControl+0xb6>
			if (xSemaphoreTake(xSemaphoreSystemActive, portMAX_DELAY) == pdTRUE) {
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	4f ef       	ldi	r20, 0xFF	; 255
    2ab8:	5f ef       	ldi	r21, 0xFF	; 255
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <xSemaphoreSystemActive>
    2ac2:	90 91 90 23 	lds	r25, 0x2390	; 0x802390 <xSemaphoreSystemActive+0x1>
    2ac6:	7b d8       	rcall	.-3850   	; 0x1bbe <xQueueGenericReceive>
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	c1 f4       	brne	.+48     	; 0x2afc <vAlarmControl+0xb6>
				if (system_active && door_open) {
    2acc:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <system_active>
    2ad0:	88 23       	and	r24, r24
    2ad2:	39 f0       	breq	.+14     	; 0x2ae2 <vAlarmControl+0x9c>
    2ad4:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <door_open>
    2ad8:	88 23       	and	r24, r24
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <vAlarmControl+0x9c>
					alarm_active = true;
    2adc:	70 92 0a 23 	sts	0x230A, r7	; 0x80230a <alarm_active>
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <vAlarmControl+0xa0>
					} else {
					alarm_active = false;
    2ae2:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <alarm_active>
				}
				xSemaphoreGive(xSemaphoreSystemActive);
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <xSemaphoreSystemActive>
    2af4:	90 91 90 23 	lds	r25, 0x2390	; 0x802390 <xSemaphoreSystemActive+0x1>
    2af8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <xQueueGenericSend>
			}
		}

		if (alarm_active) {
    2afc:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <alarm_active>
    2b00:	88 23       	and	r24, r24
    2b02:	b1 f1       	breq	.+108    	; 0x2b70 <vAlarmControl+0x12a>
			if (counter < 10) {
    2b04:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <counter>
    2b08:	90 91 09 23 	lds	r25, 0x2309	; 0x802309 <counter+0x1>
    2b0c:	0a 97       	sbiw	r24, 0x0a	; 10
    2b0e:	3c f4       	brge	.+14     	; 0x2b1e <vAlarmControl+0xd8>
				TCC0.CCA = 500; // Low buzzer frequency
    2b10:	f6 01       	movw	r30, r12
    2b12:	a0 a6       	std	Z+40, r10	; 0x28
    2b14:	b1 a6       	std	Z+41, r11	; 0x29
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b16:	f8 01       	movw	r30, r16
    2b18:	76 82       	std	Z+6, r7	; 0x06
    2b1a:	66 82       	std	Z+6, r6	; 0x06
    2b1c:	06 c0       	rjmp	.+12     	; 0x2b2a <vAlarmControl+0xe4>
				LED_On(LED0);
				LED_On(LED1);
				} else {
				TCC0.CCA = 800; // High buzzer frequency
    2b1e:	f6 01       	movw	r30, r12
    2b20:	80 a6       	std	Z+40, r8	; 0x28
    2b22:	91 a6       	std	Z+41, r9	; 0x29

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2b24:	f8 01       	movw	r30, r16
    2b26:	77 82       	std	Z+7, r7	; 0x07
    2b28:	67 82       	std	Z+7, r6	; 0x07
				LED_Toggle(LED0);
				LED_Toggle(LED1);
			}
			counter++;
    2b2a:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <counter>
    2b2e:	90 91 09 23 	lds	r25, 0x2309	; 0x802309 <counter+0x1>
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	80 93 08 23 	sts	0x2308, r24	; 0x802308 <counter>
    2b38:	90 93 09 23 	sts	0x2309, r25	; 0x802309 <counter+0x1>
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d", counter);
    2b3c:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <counter>
    2b40:	90 91 09 23 	lds	r25, 0x2309	; 0x802309 <counter+0x1>
    2b44:	9f 93       	push	r25
    2b46:	8f 93       	push	r24
    2b48:	ff 92       	push	r15
    2b4a:	ef 92       	push	r14
    2b4c:	1f 92       	push	r1
    2b4e:	5f 92       	push	r5
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	4e d2       	rcall	.+1180   	; 0x2ff2 <snprintf>
			gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    2b56:	26 e0       	ldi	r18, 0x06	; 6
    2b58:	30 e2       	ldi	r19, 0x20	; 32
    2b5a:	48 e1       	ldi	r20, 0x18	; 24
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
    2b64:	ed b7       	in	r30, 0x3d	; 61
    2b66:	fe b7       	in	r31, 0x3e	; 62
    2b68:	38 96       	adiw	r30, 0x08	; 8
    2b6a:	ed bf       	out	0x3d, r30	; 61
    2b6c:	fe bf       	out	0x3e, r31	; 62
			} else {
			reset_actuators();
    2b6e:	09 c0       	rjmp	.+18     	; 0x2b82 <vAlarmControl+0x13c>
    2b70:	5b df       	rcall	.-330    	; 0x2a28 <reset_actuators>
			gfx_mono_draw_string("Waktu: 0", 0, 24, &sysfont);
    2b72:	26 e0       	ldi	r18, 0x06	; 6
    2b74:	30 e2       	ldi	r19, 0x20	; 32
    2b76:	48 e1       	ldi	r20, 0x18	; 24
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	87 e3       	ldi	r24, 0x37	; 55
    2b7c:	90 e2       	ldi	r25, 0x20	; 32
    2b7e:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
		}

		vTaskDelay(100 / portTICK_PERIOD_MS);
    2b82:	82 e3       	ldi	r24, 0x32	; 50
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	96 db       	rcall	.-2260   	; 0x22b4 <vTaskDelay>
	}
    2b88:	89 cf       	rjmp	.-238    	; 0x2a9c <vAlarmControl+0x56>

00002b8a <vPushButton>:

/************************************************************************/
/* Task: Push Button Handling                                           */
/************************************************************************/
static portTASK_FUNCTION(vPushButton, pvParameters) {
	PORTF.DIRCLR = PIN1_bm | PIN2_bm;
    2b8a:	e0 ea       	ldi	r30, 0xA0	; 160
    2b8c:	f6 e0       	ldi	r31, 0x06	; 6
    2b8e:	86 e0       	ldi	r24, 0x06	; 6
    2b90:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN1CTRL = PORT_ISC_FALLING_gc;
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_ISC_FALLING_gc;
    2b96:	82 8b       	std	Z+18, r24	; 0x12

	gfx_mono_draw_string("Sistem Nonaktif", 0, 8, &sysfont);
    2b98:	26 e0       	ldi	r18, 0x06	; 6
    2b9a:	30 e2       	ldi	r19, 0x20	; 32
    2b9c:	48 e0       	ldi	r20, 0x08	; 8
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	89 e5       	ldi	r24, 0x59	; 89
    2ba2:	90 e2       	ldi	r25, 0x20	; 32
    2ba4:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>

	while (1) {
		if (!(PORTF.IN & PIN1_bm)) {  // SW1 toggle system state
    2ba8:	c0 ea       	ldi	r28, 0xA0	; 160
    2baa:	d6 e0       	ldi	r29, 0x06	; 6
			if (xSemaphoreTake(xSemaphoreSystemActive, portMAX_DELAY) == pdTRUE) {
				system_active = !system_active;
    2bac:	dd 24       	eor	r13, r13
    2bae:	d3 94       	inc	r13
				gfx_mono_draw_string(system_active ? "Sistem Aktif" : "Sistem Nonaktif", 0, 8, &sysfont);
    2bb0:	0f 2e       	mov	r0, r31
    2bb2:	fc e4       	ldi	r31, 0x4C	; 76
    2bb4:	ef 2e       	mov	r14, r31
    2bb6:	f0 e2       	ldi	r31, 0x20	; 32
    2bb8:	ff 2e       	mov	r15, r31
    2bba:	f0 2d       	mov	r31, r0
    2bbc:	09 e5       	ldi	r16, 0x59	; 89
    2bbe:	10 e2       	ldi	r17, 0x20	; 32
	PORTF.PIN2CTRL = PORT_ISC_FALLING_gc;

	gfx_mono_draw_string("Sistem Nonaktif", 0, 8, &sysfont);

	while (1) {
		if (!(PORTF.IN & PIN1_bm)) {  // SW1 toggle system state
    2bc0:	88 85       	ldd	r24, Y+8	; 0x08
    2bc2:	81 fd       	sbrc	r24, 1
    2bc4:	36 c0       	rjmp	.+108    	; 0x2c32 <vPushButton+0xa8>
			if (xSemaphoreTake(xSemaphoreSystemActive, portMAX_DELAY) == pdTRUE) {
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	4f ef       	ldi	r20, 0xFF	; 255
    2bca:	5f ef       	ldi	r21, 0xFF	; 255
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <xSemaphoreSystemActive>
    2bd4:	90 91 90 23 	lds	r25, 0x2390	; 0x802390 <xSemaphoreSystemActive+0x1>
    2bd8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <xQueueGenericReceive>
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	31 f5       	brne	.+76     	; 0x2c2c <vPushButton+0xa2>
				system_active = !system_active;
    2be0:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <system_active>
    2be4:	8d 25       	eor	r24, r13
    2be6:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <system_active>
				gfx_mono_draw_string(system_active ? "Sistem Aktif" : "Sistem Nonaktif", 0, 8, &sysfont);
    2bea:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <system_active>
    2bee:	81 11       	cpse	r24, r1
    2bf0:	03 c0       	rjmp	.+6      	; 0x2bf8 <vPushButton+0x6e>
    2bf2:	80 2f       	mov	r24, r16
    2bf4:	91 2f       	mov	r25, r17
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <vPushButton+0x72>
    2bf8:	8e 2d       	mov	r24, r14
    2bfa:	9f 2d       	mov	r25, r15
    2bfc:	26 e0       	ldi	r18, 0x06	; 6
    2bfe:	30 e2       	ldi	r19, 0x20	; 32
    2c00:	48 e0       	ldi	r20, 0x08	; 8
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
				if (!system_active) {
    2c08:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <system_active>
    2c0c:	81 11       	cpse	r24, r1
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <vPushButton+0x8c>
					reset_actuators();
    2c10:	0b df       	rcall	.-490    	; 0x2a28 <reset_actuators>
					alarm_active = false;
    2c12:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <alarm_active>
				}
				xSemaphoreGive(xSemaphoreSystemActive);
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	60 e0       	ldi	r22, 0x00	; 0
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <xSemaphoreSystemActive>
    2c24:	90 91 90 23 	lds	r25, 0x2390	; 0x802390 <xSemaphoreSystemActive+0x1>
    2c28:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <xQueueGenericSend>
			}
			vTaskDelay(100 / portTICK_PERIOD_MS);
    2c2c:	82 e3       	ldi	r24, 0x32	; 50
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	41 db       	rcall	.-2430   	; 0x22b4 <vTaskDelay>
		}
		if (!(PORTF.IN & PIN2_bm)) {  // SW2 reset actuators
    2c32:	88 85       	ldd	r24, Y+8	; 0x08
    2c34:	82 fd       	sbrc	r24, 2
    2c36:	22 c0       	rjmp	.+68     	; 0x2c7c <vPushButton+0xf2>
			if (xSemaphoreTake(xSemaphoreSystemActive, portMAX_DELAY) == pdTRUE) {
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	4f ef       	ldi	r20, 0xFF	; 255
    2c3c:	5f ef       	ldi	r21, 0xFF	; 255
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <xSemaphoreSystemActive>
    2c46:	90 91 90 23 	lds	r25, 0x2390	; 0x802390 <xSemaphoreSystemActive+0x1>
    2c4a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <xQueueGenericReceive>
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	91 f4       	brne	.+36     	; 0x2c76 <vPushButton+0xec>
				if (system_active) {
    2c52:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <system_active>
    2c56:	88 23       	and	r24, r24
    2c58:	19 f0       	breq	.+6      	; 0x2c60 <vPushButton+0xd6>
					alarm_active = false;
    2c5a:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <alarm_active>
					reset_actuators();
    2c5e:	e4 de       	rcall	.-568    	; 0x2a28 <reset_actuators>
				}
				xSemaphoreGive(xSemaphoreSystemActive);
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	80 91 8f 23 	lds	r24, 0x238F	; 0x80238f <xSemaphoreSystemActive>
    2c6e:	90 91 90 23 	lds	r25, 0x2390	; 0x802390 <xSemaphoreSystemActive+0x1>
    2c72:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <xQueueGenericSend>
			}
			vTaskDelay(100 / portTICK_PERIOD_MS);
    2c76:	82 e3       	ldi	r24, 0x32	; 50
    2c78:	90 e0       	ldi	r25, 0x00	; 0
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);
    2c7a:	1c db       	rcall	.-2504   	; 0x22b4 <vTaskDelay>
    2c7c:	82 e3       	ldi	r24, 0x32	; 50
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	19 db       	rcall	.-2510   	; 0x22b4 <vTaskDelay>
	}
    2c82:	9e cf       	rjmp	.-196    	; 0x2bc0 <vPushButton+0x36>

00002c84 <main>:
}

/************************************************************************/
/* Main Function                                                        */
/************************************************************************/
int main(void) {
    2c84:	af 92       	push	r10
    2c86:	bf 92       	push	r11
    2c88:	cf 92       	push	r12
    2c8a:	df 92       	push	r13
    2c8c:	ef 92       	push	r14
    2c8e:	ff 92       	push	r15
    2c90:	0f 93       	push	r16
	board_init();
    2c92:	0e 94 48 07 	call	0xe90	; 0xe90 <board_init>
	sysclk_init();
    2c96:	0e 94 42 04 	call	0x884	; 0x884 <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2c9a:	87 e0       	ldi	r24, 0x07	; 7
    2c9c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	gfx_mono_init();
    2ca0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2ca4:	80 e1       	ldi	r24, 0x10	; 16
    2ca6:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	gfx_mono_draw_string("Sisnam+", 0, 0, &sysfont);
    2caa:	26 e0       	ldi	r18, 0x06	; 6
    2cac:	30 e2       	ldi	r19, 0x20	; 32
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	89 e6       	ldi	r24, 0x69	; 105
    2cb4:	90 e2       	ldi	r25, 0x20	; 32
    2cb6:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>

	// Initialize Semaphores
	xSemaphoreDoor = xSemaphoreCreateBinary();
    2cba:	43 e0       	ldi	r20, 0x03	; 3
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericCreate>
    2cc4:	80 93 8d 23 	sts	0x238D, r24	; 0x80238d <xSemaphoreDoor>
    2cc8:	90 93 8e 23 	sts	0x238E, r25	; 0x80238e <xSemaphoreDoor+0x1>
	xSemaphoreSystemActive = xSemaphoreCreateBinary();
    2ccc:	43 e0       	ldi	r20, 0x03	; 3
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <xQueueGenericCreate>
    2cd6:	80 93 8f 23 	sts	0x238F, r24	; 0x80238f <xSemaphoreSystemActive>
    2cda:	90 93 90 23 	sts	0x2390, r25	; 0x802390 <xSemaphoreSystemActive+0x1>
	xSemaphoreGive(xSemaphoreSystemActive);
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	40 e0       	ldi	r20, 0x00	; 0
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <xQueueGenericSend>

	// Create Tasks
	xTaskCreate(vPushButton, "PushButton", 1000, NULL, tskIDLE_PRIORITY + 3, NULL);
    2cec:	a1 2c       	mov	r10, r1
    2cee:	b1 2c       	mov	r11, r1
    2cf0:	c1 2c       	mov	r12, r1
    2cf2:	d1 2c       	mov	r13, r1
    2cf4:	e1 2c       	mov	r14, r1
    2cf6:	f1 2c       	mov	r15, r1
    2cf8:	03 e0       	ldi	r16, 0x03	; 3
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	48 ee       	ldi	r20, 0xE8	; 232
    2d00:	53 e0       	ldi	r21, 0x03	; 3
    2d02:	61 e7       	ldi	r22, 0x71	; 113
    2d04:	70 e2       	ldi	r23, 0x20	; 32
    2d06:	85 ec       	ldi	r24, 0xC5	; 197
    2d08:	95 e1       	ldi	r25, 0x15	; 21
    2d0a:	47 d8       	rcall	.-3954   	; 0x1d9a <xTaskGenericCreate>
	xTaskCreate(vCheckDoor, "CheckDoor", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);
    2d0c:	02 e0       	ldi	r16, 0x02	; 2
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	48 ee       	ldi	r20, 0xE8	; 232
    2d14:	53 e0       	ldi	r21, 0x03	; 3
    2d16:	6c e7       	ldi	r22, 0x7C	; 124
    2d18:	70 e2       	ldi	r23, 0x20	; 32
    2d1a:	8c ea       	ldi	r24, 0xAC	; 172
    2d1c:	94 e1       	ldi	r25, 0x14	; 20
    2d1e:	3d d8       	rcall	.-3974   	; 0x1d9a <xTaskGenericCreate>
	xTaskCreate(vAlarmControl, "AlarmControl", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);
    2d20:	01 e0       	ldi	r16, 0x01	; 1
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	48 ee       	ldi	r20, 0xE8	; 232
    2d28:	53 e0       	ldi	r21, 0x03	; 3
    2d2a:	66 e8       	ldi	r22, 0x86	; 134
    2d2c:	70 e2       	ldi	r23, 0x20	; 32
    2d2e:	83 e2       	ldi	r24, 0x23	; 35
    2d30:	95 e1       	ldi	r25, 0x15	; 21
    2d32:	33 d8       	rcall	.-3994   	; 0x1d9a <xTaskGenericCreate>

	// Start Scheduler
	vTaskStartScheduler();
    2d34:	33 d9       	rcall	.-3482   	; 0x1f9c <vTaskStartScheduler>
}
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0f 91       	pop	r16
    2d3c:	ff 90       	pop	r15
    2d3e:	ef 90       	pop	r14
    2d40:	df 90       	pop	r13
    2d42:	cf 90       	pop	r12
    2d44:	bf 90       	pop	r11
    2d46:	af 90       	pop	r10
    2d48:	08 95       	ret

00002d4a <__udivmodsi4>:
    2d4a:	a1 e2       	ldi	r26, 0x21	; 33
    2d4c:	1a 2e       	mov	r1, r26
    2d4e:	aa 1b       	sub	r26, r26
    2d50:	bb 1b       	sub	r27, r27
    2d52:	fd 01       	movw	r30, r26
    2d54:	0d c0       	rjmp	.+26     	; 0x2d70 <__udivmodsi4_ep>

00002d56 <__udivmodsi4_loop>:
    2d56:	aa 1f       	adc	r26, r26
    2d58:	bb 1f       	adc	r27, r27
    2d5a:	ee 1f       	adc	r30, r30
    2d5c:	ff 1f       	adc	r31, r31
    2d5e:	a2 17       	cp	r26, r18
    2d60:	b3 07       	cpc	r27, r19
    2d62:	e4 07       	cpc	r30, r20
    2d64:	f5 07       	cpc	r31, r21
    2d66:	20 f0       	brcs	.+8      	; 0x2d70 <__udivmodsi4_ep>
    2d68:	a2 1b       	sub	r26, r18
    2d6a:	b3 0b       	sbc	r27, r19
    2d6c:	e4 0b       	sbc	r30, r20
    2d6e:	f5 0b       	sbc	r31, r21

00002d70 <__udivmodsi4_ep>:
    2d70:	66 1f       	adc	r22, r22
    2d72:	77 1f       	adc	r23, r23
    2d74:	88 1f       	adc	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	1a 94       	dec	r1
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <__udivmodsi4_loop>
    2d7c:	60 95       	com	r22
    2d7e:	70 95       	com	r23
    2d80:	80 95       	com	r24
    2d82:	90 95       	com	r25
    2d84:	9b 01       	movw	r18, r22
    2d86:	ac 01       	movw	r20, r24
    2d88:	bd 01       	movw	r22, r26
    2d8a:	cf 01       	movw	r24, r30
    2d8c:	08 95       	ret

00002d8e <__tablejump2__>:
    2d8e:	ee 0f       	add	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	88 1f       	adc	r24, r24
    2d94:	8b bf       	out	0x3b, r24	; 59
    2d96:	07 90       	elpm	r0, Z+
    2d98:	f6 91       	elpm	r31, Z
    2d9a:	e0 2d       	mov	r30, r0
    2d9c:	19 94       	eijmp

00002d9e <malloc>:
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	82 30       	cpi	r24, 0x02	; 2
    2da8:	91 05       	cpc	r25, r1
    2daa:	10 f4       	brcc	.+4      	; 0x2db0 <malloc+0x12>
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <__flp>
    2db4:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <__flp+0x1>
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	a0 e0       	ldi	r26, 0x00	; 0
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	30 97       	sbiw	r30, 0x00	; 0
    2dc2:	19 f1       	breq	.+70     	; 0x2e0a <malloc+0x6c>
    2dc4:	40 81       	ld	r20, Z
    2dc6:	51 81       	ldd	r21, Z+1	; 0x01
    2dc8:	02 81       	ldd	r16, Z+2	; 0x02
    2dca:	13 81       	ldd	r17, Z+3	; 0x03
    2dcc:	48 17       	cp	r20, r24
    2dce:	59 07       	cpc	r21, r25
    2dd0:	c8 f0       	brcs	.+50     	; 0x2e04 <malloc+0x66>
    2dd2:	84 17       	cp	r24, r20
    2dd4:	95 07       	cpc	r25, r21
    2dd6:	69 f4       	brne	.+26     	; 0x2df2 <malloc+0x54>
    2dd8:	10 97       	sbiw	r26, 0x00	; 0
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <malloc+0x4a>
    2ddc:	12 96       	adiw	r26, 0x02	; 2
    2dde:	0c 93       	st	X, r16
    2de0:	12 97       	sbiw	r26, 0x02	; 2
    2de2:	13 96       	adiw	r26, 0x03	; 3
    2de4:	1c 93       	st	X, r17
    2de6:	27 c0       	rjmp	.+78     	; 0x2e36 <malloc+0x98>
    2de8:	00 93 93 23 	sts	0x2393, r16	; 0x802393 <__flp>
    2dec:	10 93 94 23 	sts	0x2394, r17	; 0x802394 <__flp+0x1>
    2df0:	22 c0       	rjmp	.+68     	; 0x2e36 <malloc+0x98>
    2df2:	21 15       	cp	r18, r1
    2df4:	31 05       	cpc	r19, r1
    2df6:	19 f0       	breq	.+6      	; 0x2dfe <malloc+0x60>
    2df8:	42 17       	cp	r20, r18
    2dfa:	53 07       	cpc	r21, r19
    2dfc:	18 f4       	brcc	.+6      	; 0x2e04 <malloc+0x66>
    2dfe:	9a 01       	movw	r18, r20
    2e00:	bd 01       	movw	r22, r26
    2e02:	ef 01       	movw	r28, r30
    2e04:	df 01       	movw	r26, r30
    2e06:	f8 01       	movw	r30, r16
    2e08:	db cf       	rjmp	.-74     	; 0x2dc0 <malloc+0x22>
    2e0a:	21 15       	cp	r18, r1
    2e0c:	31 05       	cpc	r19, r1
    2e0e:	f9 f0       	breq	.+62     	; 0x2e4e <malloc+0xb0>
    2e10:	28 1b       	sub	r18, r24
    2e12:	39 0b       	sbc	r19, r25
    2e14:	24 30       	cpi	r18, 0x04	; 4
    2e16:	31 05       	cpc	r19, r1
    2e18:	80 f4       	brcc	.+32     	; 0x2e3a <malloc+0x9c>
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1e:	61 15       	cp	r22, r1
    2e20:	71 05       	cpc	r23, r1
    2e22:	21 f0       	breq	.+8      	; 0x2e2c <malloc+0x8e>
    2e24:	fb 01       	movw	r30, r22
    2e26:	82 83       	std	Z+2, r24	; 0x02
    2e28:	93 83       	std	Z+3, r25	; 0x03
    2e2a:	04 c0       	rjmp	.+8      	; 0x2e34 <malloc+0x96>
    2e2c:	80 93 93 23 	sts	0x2393, r24	; 0x802393 <__flp>
    2e30:	90 93 94 23 	sts	0x2394, r25	; 0x802394 <__flp+0x1>
    2e34:	fe 01       	movw	r30, r28
    2e36:	32 96       	adiw	r30, 0x02	; 2
    2e38:	44 c0       	rjmp	.+136    	; 0x2ec2 <malloc+0x124>
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e2 0f       	add	r30, r18
    2e3e:	f3 1f       	adc	r31, r19
    2e40:	81 93       	st	Z+, r24
    2e42:	91 93       	st	Z+, r25
    2e44:	22 50       	subi	r18, 0x02	; 2
    2e46:	31 09       	sbc	r19, r1
    2e48:	28 83       	st	Y, r18
    2e4a:	39 83       	std	Y+1, r19	; 0x01
    2e4c:	3a c0       	rjmp	.+116    	; 0x2ec2 <malloc+0x124>
    2e4e:	20 91 91 23 	lds	r18, 0x2391	; 0x802391 <__brkval>
    2e52:	30 91 92 23 	lds	r19, 0x2392	; 0x802392 <__brkval+0x1>
    2e56:	23 2b       	or	r18, r19
    2e58:	41 f4       	brne	.+16     	; 0x2e6a <malloc+0xcc>
    2e5a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2e5e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2e62:	20 93 91 23 	sts	0x2391, r18	; 0x802391 <__brkval>
    2e66:	30 93 92 23 	sts	0x2392, r19	; 0x802392 <__brkval+0x1>
    2e6a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2e6e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2e72:	21 15       	cp	r18, r1
    2e74:	31 05       	cpc	r19, r1
    2e76:	41 f4       	brne	.+16     	; 0x2e88 <malloc+0xea>
    2e78:	2d b7       	in	r18, 0x3d	; 61
    2e7a:	3e b7       	in	r19, 0x3e	; 62
    2e7c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2e80:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2e84:	24 1b       	sub	r18, r20
    2e86:	35 0b       	sbc	r19, r21
    2e88:	e0 91 91 23 	lds	r30, 0x2391	; 0x802391 <__brkval>
    2e8c:	f0 91 92 23 	lds	r31, 0x2392	; 0x802392 <__brkval+0x1>
    2e90:	e2 17       	cp	r30, r18
    2e92:	f3 07       	cpc	r31, r19
    2e94:	a0 f4       	brcc	.+40     	; 0x2ebe <malloc+0x120>
    2e96:	2e 1b       	sub	r18, r30
    2e98:	3f 0b       	sbc	r19, r31
    2e9a:	28 17       	cp	r18, r24
    2e9c:	39 07       	cpc	r19, r25
    2e9e:	78 f0       	brcs	.+30     	; 0x2ebe <malloc+0x120>
    2ea0:	ac 01       	movw	r20, r24
    2ea2:	4e 5f       	subi	r20, 0xFE	; 254
    2ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea6:	24 17       	cp	r18, r20
    2ea8:	35 07       	cpc	r19, r21
    2eaa:	48 f0       	brcs	.+18     	; 0x2ebe <malloc+0x120>
    2eac:	4e 0f       	add	r20, r30
    2eae:	5f 1f       	adc	r21, r31
    2eb0:	40 93 91 23 	sts	0x2391, r20	; 0x802391 <__brkval>
    2eb4:	50 93 92 23 	sts	0x2392, r21	; 0x802392 <__brkval+0x1>
    2eb8:	81 93       	st	Z+, r24
    2eba:	91 93       	st	Z+, r25
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <malloc+0x124>
    2ebe:	e0 e0       	ldi	r30, 0x00	; 0
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	cf 01       	movw	r24, r30
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	1f 91       	pop	r17
    2eca:	0f 91       	pop	r16
    2ecc:	08 95       	ret

00002ece <free>:
    2ece:	cf 93       	push	r28
    2ed0:	df 93       	push	r29
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <free+0xa>
    2ed6:	81 c0       	rjmp	.+258    	; 0x2fda <free+0x10c>
    2ed8:	fc 01       	movw	r30, r24
    2eda:	32 97       	sbiw	r30, 0x02	; 2
    2edc:	12 82       	std	Z+2, r1	; 0x02
    2ede:	13 82       	std	Z+3, r1	; 0x03
    2ee0:	a0 91 93 23 	lds	r26, 0x2393	; 0x802393 <__flp>
    2ee4:	b0 91 94 23 	lds	r27, 0x2394	; 0x802394 <__flp+0x1>
    2ee8:	10 97       	sbiw	r26, 0x00	; 0
    2eea:	81 f4       	brne	.+32     	; 0x2f0c <free+0x3e>
    2eec:	20 81       	ld	r18, Z
    2eee:	31 81       	ldd	r19, Z+1	; 0x01
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	20 91 91 23 	lds	r18, 0x2391	; 0x802391 <__brkval>
    2ef8:	30 91 92 23 	lds	r19, 0x2392	; 0x802392 <__brkval+0x1>
    2efc:	28 17       	cp	r18, r24
    2efe:	39 07       	cpc	r19, r25
    2f00:	51 f5       	brne	.+84     	; 0x2f56 <free+0x88>
    2f02:	e0 93 91 23 	sts	0x2391, r30	; 0x802391 <__brkval>
    2f06:	f0 93 92 23 	sts	0x2392, r31	; 0x802392 <__brkval+0x1>
    2f0a:	67 c0       	rjmp	.+206    	; 0x2fda <free+0x10c>
    2f0c:	ed 01       	movw	r28, r26
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	ce 17       	cp	r28, r30
    2f14:	df 07       	cpc	r29, r31
    2f16:	40 f4       	brcc	.+16     	; 0x2f28 <free+0x5a>
    2f18:	4a 81       	ldd	r20, Y+2	; 0x02
    2f1a:	5b 81       	ldd	r21, Y+3	; 0x03
    2f1c:	9e 01       	movw	r18, r28
    2f1e:	41 15       	cp	r20, r1
    2f20:	51 05       	cpc	r21, r1
    2f22:	f1 f0       	breq	.+60     	; 0x2f60 <free+0x92>
    2f24:	ea 01       	movw	r28, r20
    2f26:	f5 cf       	rjmp	.-22     	; 0x2f12 <free+0x44>
    2f28:	c2 83       	std	Z+2, r28	; 0x02
    2f2a:	d3 83       	std	Z+3, r29	; 0x03
    2f2c:	40 81       	ld	r20, Z
    2f2e:	51 81       	ldd	r21, Z+1	; 0x01
    2f30:	84 0f       	add	r24, r20
    2f32:	95 1f       	adc	r25, r21
    2f34:	c8 17       	cp	r28, r24
    2f36:	d9 07       	cpc	r29, r25
    2f38:	59 f4       	brne	.+22     	; 0x2f50 <free+0x82>
    2f3a:	88 81       	ld	r24, Y
    2f3c:	99 81       	ldd	r25, Y+1	; 0x01
    2f3e:	84 0f       	add	r24, r20
    2f40:	95 1f       	adc	r25, r21
    2f42:	02 96       	adiw	r24, 0x02	; 2
    2f44:	80 83       	st	Z, r24
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4c:	82 83       	std	Z+2, r24	; 0x02
    2f4e:	93 83       	std	Z+3, r25	; 0x03
    2f50:	21 15       	cp	r18, r1
    2f52:	31 05       	cpc	r19, r1
    2f54:	29 f4       	brne	.+10     	; 0x2f60 <free+0x92>
    2f56:	e0 93 93 23 	sts	0x2393, r30	; 0x802393 <__flp>
    2f5a:	f0 93 94 23 	sts	0x2394, r31	; 0x802394 <__flp+0x1>
    2f5e:	3d c0       	rjmp	.+122    	; 0x2fda <free+0x10c>
    2f60:	e9 01       	movw	r28, r18
    2f62:	ea 83       	std	Y+2, r30	; 0x02
    2f64:	fb 83       	std	Y+3, r31	; 0x03
    2f66:	49 91       	ld	r20, Y+
    2f68:	59 91       	ld	r21, Y+
    2f6a:	c4 0f       	add	r28, r20
    2f6c:	d5 1f       	adc	r29, r21
    2f6e:	ec 17       	cp	r30, r28
    2f70:	fd 07       	cpc	r31, r29
    2f72:	61 f4       	brne	.+24     	; 0x2f8c <free+0xbe>
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	84 0f       	add	r24, r20
    2f7a:	95 1f       	adc	r25, r21
    2f7c:	02 96       	adiw	r24, 0x02	; 2
    2f7e:	e9 01       	movw	r28, r18
    2f80:	88 83       	st	Y, r24
    2f82:	99 83       	std	Y+1, r25	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	8a 83       	std	Y+2, r24	; 0x02
    2f8a:	9b 83       	std	Y+3, r25	; 0x03
    2f8c:	e0 e0       	ldi	r30, 0x00	; 0
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	12 96       	adiw	r26, 0x02	; 2
    2f92:	8d 91       	ld	r24, X+
    2f94:	9c 91       	ld	r25, X
    2f96:	13 97       	sbiw	r26, 0x03	; 3
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	19 f0       	breq	.+6      	; 0x2fa2 <free+0xd4>
    2f9c:	fd 01       	movw	r30, r26
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	f7 cf       	rjmp	.-18     	; 0x2f90 <free+0xc2>
    2fa2:	8d 91       	ld	r24, X+
    2fa4:	9c 91       	ld	r25, X
    2fa6:	11 97       	sbiw	r26, 0x01	; 1
    2fa8:	9d 01       	movw	r18, r26
    2faa:	2e 5f       	subi	r18, 0xFE	; 254
    2fac:	3f 4f       	sbci	r19, 0xFF	; 255
    2fae:	82 0f       	add	r24, r18
    2fb0:	93 1f       	adc	r25, r19
    2fb2:	20 91 91 23 	lds	r18, 0x2391	; 0x802391 <__brkval>
    2fb6:	30 91 92 23 	lds	r19, 0x2392	; 0x802392 <__brkval+0x1>
    2fba:	28 17       	cp	r18, r24
    2fbc:	39 07       	cpc	r19, r25
    2fbe:	69 f4       	brne	.+26     	; 0x2fda <free+0x10c>
    2fc0:	30 97       	sbiw	r30, 0x00	; 0
    2fc2:	29 f4       	brne	.+10     	; 0x2fce <free+0x100>
    2fc4:	10 92 93 23 	sts	0x2393, r1	; 0x802393 <__flp>
    2fc8:	10 92 94 23 	sts	0x2394, r1	; 0x802394 <__flp+0x1>
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <free+0x104>
    2fce:	12 82       	std	Z+2, r1	; 0x02
    2fd0:	13 82       	std	Z+3, r1	; 0x03
    2fd2:	a0 93 91 23 	sts	0x2391, r26	; 0x802391 <__brkval>
    2fd6:	b0 93 92 23 	sts	0x2392, r27	; 0x802392 <__brkval+0x1>
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	08 95       	ret

00002fe0 <memcpy>:
    2fe0:	fb 01       	movw	r30, r22
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <memcpy+0xa>
    2fe6:	01 90       	ld	r0, Z+
    2fe8:	0d 92       	st	X+, r0
    2fea:	41 50       	subi	r20, 0x01	; 1
    2fec:	50 40       	sbci	r21, 0x00	; 0
    2fee:	d8 f7       	brcc	.-10     	; 0x2fe6 <memcpy+0x6>
    2ff0:	08 95       	ret

00002ff2 <snprintf>:
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	2e 97       	sbiw	r28, 0x0e	; 14
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0e 89       	ldd	r16, Y+22	; 0x16
    3006:	1f 89       	ldd	r17, Y+23	; 0x17
    3008:	88 8d       	ldd	r24, Y+24	; 0x18
    300a:	99 8d       	ldd	r25, Y+25	; 0x19
    300c:	26 e0       	ldi	r18, 0x06	; 6
    300e:	2c 83       	std	Y+4, r18	; 0x04
    3010:	09 83       	std	Y+1, r16	; 0x01
    3012:	1a 83       	std	Y+2, r17	; 0x02
    3014:	97 ff       	sbrs	r25, 7
    3016:	02 c0       	rjmp	.+4      	; 0x301c <snprintf+0x2a>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e8       	ldi	r25, 0x80	; 128
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	8d 83       	std	Y+5, r24	; 0x05
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	ae 01       	movw	r20, r28
    3024:	44 5e       	subi	r20, 0xE4	; 228
    3026:	5f 4f       	sbci	r21, 0xFF	; 255
    3028:	6a 8d       	ldd	r22, Y+26	; 0x1a
    302a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	16 d0       	rcall	.+44     	; 0x305e <vfprintf>
    3032:	4d 81       	ldd	r20, Y+5	; 0x05
    3034:	5e 81       	ldd	r21, Y+6	; 0x06
    3036:	57 fd       	sbrc	r21, 7
    3038:	0a c0       	rjmp	.+20     	; 0x304e <snprintf+0x5c>
    303a:	2f 81       	ldd	r18, Y+7	; 0x07
    303c:	38 85       	ldd	r19, Y+8	; 0x08
    303e:	42 17       	cp	r20, r18
    3040:	53 07       	cpc	r21, r19
    3042:	0c f4       	brge	.+2      	; 0x3046 <snprintf+0x54>
    3044:	9a 01       	movw	r18, r20
    3046:	f8 01       	movw	r30, r16
    3048:	e2 0f       	add	r30, r18
    304a:	f3 1f       	adc	r31, r19
    304c:	10 82       	st	Z, r1
    304e:	2e 96       	adiw	r28, 0x0e	; 14
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	08 95       	ret

0000305e <vfprintf>:
    305e:	2f 92       	push	r2
    3060:	3f 92       	push	r3
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	2b 97       	sbiw	r28, 0x0b	; 11
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	6c 01       	movw	r12, r24
    308e:	7b 01       	movw	r14, r22
    3090:	8a 01       	movw	r16, r20
    3092:	fc 01       	movw	r30, r24
    3094:	16 82       	std	Z+6, r1	; 0x06
    3096:	17 82       	std	Z+7, r1	; 0x07
    3098:	83 81       	ldd	r24, Z+3	; 0x03
    309a:	81 ff       	sbrs	r24, 1
    309c:	bf c1       	rjmp	.+894    	; 0x341c <vfprintf+0x3be>
    309e:	ce 01       	movw	r24, r28
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	3c 01       	movw	r6, r24
    30a4:	f6 01       	movw	r30, r12
    30a6:	93 81       	ldd	r25, Z+3	; 0x03
    30a8:	f7 01       	movw	r30, r14
    30aa:	93 fd       	sbrc	r25, 3
    30ac:	85 91       	lpm	r24, Z+
    30ae:	93 ff       	sbrs	r25, 3
    30b0:	81 91       	ld	r24, Z+
    30b2:	7f 01       	movw	r14, r30
    30b4:	88 23       	and	r24, r24
    30b6:	09 f4       	brne	.+2      	; 0x30ba <vfprintf+0x5c>
    30b8:	ad c1       	rjmp	.+858    	; 0x3414 <vfprintf+0x3b6>
    30ba:	85 32       	cpi	r24, 0x25	; 37
    30bc:	39 f4       	brne	.+14     	; 0x30cc <vfprintf+0x6e>
    30be:	93 fd       	sbrc	r25, 3
    30c0:	85 91       	lpm	r24, Z+
    30c2:	93 ff       	sbrs	r25, 3
    30c4:	81 91       	ld	r24, Z+
    30c6:	7f 01       	movw	r14, r30
    30c8:	85 32       	cpi	r24, 0x25	; 37
    30ca:	21 f4       	brne	.+8      	; 0x30d4 <vfprintf+0x76>
    30cc:	b6 01       	movw	r22, r12
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	d3 d1       	rcall	.+934    	; 0x3478 <fputc>
    30d2:	e8 cf       	rjmp	.-48     	; 0x30a4 <vfprintf+0x46>
    30d4:	91 2c       	mov	r9, r1
    30d6:	21 2c       	mov	r2, r1
    30d8:	31 2c       	mov	r3, r1
    30da:	ff e1       	ldi	r31, 0x1F	; 31
    30dc:	f3 15       	cp	r31, r3
    30de:	d8 f0       	brcs	.+54     	; 0x3116 <vfprintf+0xb8>
    30e0:	8b 32       	cpi	r24, 0x2B	; 43
    30e2:	79 f0       	breq	.+30     	; 0x3102 <vfprintf+0xa4>
    30e4:	38 f4       	brcc	.+14     	; 0x30f4 <vfprintf+0x96>
    30e6:	80 32       	cpi	r24, 0x20	; 32
    30e8:	79 f0       	breq	.+30     	; 0x3108 <vfprintf+0xaa>
    30ea:	83 32       	cpi	r24, 0x23	; 35
    30ec:	a1 f4       	brne	.+40     	; 0x3116 <vfprintf+0xb8>
    30ee:	23 2d       	mov	r18, r3
    30f0:	20 61       	ori	r18, 0x10	; 16
    30f2:	1d c0       	rjmp	.+58     	; 0x312e <vfprintf+0xd0>
    30f4:	8d 32       	cpi	r24, 0x2D	; 45
    30f6:	61 f0       	breq	.+24     	; 0x3110 <vfprintf+0xb2>
    30f8:	80 33       	cpi	r24, 0x30	; 48
    30fa:	69 f4       	brne	.+26     	; 0x3116 <vfprintf+0xb8>
    30fc:	23 2d       	mov	r18, r3
    30fe:	21 60       	ori	r18, 0x01	; 1
    3100:	16 c0       	rjmp	.+44     	; 0x312e <vfprintf+0xd0>
    3102:	83 2d       	mov	r24, r3
    3104:	82 60       	ori	r24, 0x02	; 2
    3106:	38 2e       	mov	r3, r24
    3108:	e3 2d       	mov	r30, r3
    310a:	e4 60       	ori	r30, 0x04	; 4
    310c:	3e 2e       	mov	r3, r30
    310e:	2a c0       	rjmp	.+84     	; 0x3164 <vfprintf+0x106>
    3110:	f3 2d       	mov	r31, r3
    3112:	f8 60       	ori	r31, 0x08	; 8
    3114:	1d c0       	rjmp	.+58     	; 0x3150 <vfprintf+0xf2>
    3116:	37 fc       	sbrc	r3, 7
    3118:	2d c0       	rjmp	.+90     	; 0x3174 <vfprintf+0x116>
    311a:	20 ed       	ldi	r18, 0xD0	; 208
    311c:	28 0f       	add	r18, r24
    311e:	2a 30       	cpi	r18, 0x0A	; 10
    3120:	40 f0       	brcs	.+16     	; 0x3132 <vfprintf+0xd4>
    3122:	8e 32       	cpi	r24, 0x2E	; 46
    3124:	b9 f4       	brne	.+46     	; 0x3154 <vfprintf+0xf6>
    3126:	36 fc       	sbrc	r3, 6
    3128:	75 c1       	rjmp	.+746    	; 0x3414 <vfprintf+0x3b6>
    312a:	23 2d       	mov	r18, r3
    312c:	20 64       	ori	r18, 0x40	; 64
    312e:	32 2e       	mov	r3, r18
    3130:	19 c0       	rjmp	.+50     	; 0x3164 <vfprintf+0x106>
    3132:	36 fe       	sbrs	r3, 6
    3134:	06 c0       	rjmp	.+12     	; 0x3142 <vfprintf+0xe4>
    3136:	8a e0       	ldi	r24, 0x0A	; 10
    3138:	98 9e       	mul	r9, r24
    313a:	20 0d       	add	r18, r0
    313c:	11 24       	eor	r1, r1
    313e:	92 2e       	mov	r9, r18
    3140:	11 c0       	rjmp	.+34     	; 0x3164 <vfprintf+0x106>
    3142:	ea e0       	ldi	r30, 0x0A	; 10
    3144:	2e 9e       	mul	r2, r30
    3146:	20 0d       	add	r18, r0
    3148:	11 24       	eor	r1, r1
    314a:	22 2e       	mov	r2, r18
    314c:	f3 2d       	mov	r31, r3
    314e:	f0 62       	ori	r31, 0x20	; 32
    3150:	3f 2e       	mov	r3, r31
    3152:	08 c0       	rjmp	.+16     	; 0x3164 <vfprintf+0x106>
    3154:	8c 36       	cpi	r24, 0x6C	; 108
    3156:	21 f4       	brne	.+8      	; 0x3160 <vfprintf+0x102>
    3158:	83 2d       	mov	r24, r3
    315a:	80 68       	ori	r24, 0x80	; 128
    315c:	38 2e       	mov	r3, r24
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <vfprintf+0x106>
    3160:	88 36       	cpi	r24, 0x68	; 104
    3162:	41 f4       	brne	.+16     	; 0x3174 <vfprintf+0x116>
    3164:	f7 01       	movw	r30, r14
    3166:	93 fd       	sbrc	r25, 3
    3168:	85 91       	lpm	r24, Z+
    316a:	93 ff       	sbrs	r25, 3
    316c:	81 91       	ld	r24, Z+
    316e:	7f 01       	movw	r14, r30
    3170:	81 11       	cpse	r24, r1
    3172:	b3 cf       	rjmp	.-154    	; 0x30da <vfprintf+0x7c>
    3174:	98 2f       	mov	r25, r24
    3176:	9f 7d       	andi	r25, 0xDF	; 223
    3178:	95 54       	subi	r25, 0x45	; 69
    317a:	93 30       	cpi	r25, 0x03	; 3
    317c:	28 f4       	brcc	.+10     	; 0x3188 <vfprintf+0x12a>
    317e:	0c 5f       	subi	r16, 0xFC	; 252
    3180:	1f 4f       	sbci	r17, 0xFF	; 255
    3182:	9f e3       	ldi	r25, 0x3F	; 63
    3184:	99 83       	std	Y+1, r25	; 0x01
    3186:	0d c0       	rjmp	.+26     	; 0x31a2 <vfprintf+0x144>
    3188:	83 36       	cpi	r24, 0x63	; 99
    318a:	31 f0       	breq	.+12     	; 0x3198 <vfprintf+0x13a>
    318c:	83 37       	cpi	r24, 0x73	; 115
    318e:	71 f0       	breq	.+28     	; 0x31ac <vfprintf+0x14e>
    3190:	83 35       	cpi	r24, 0x53	; 83
    3192:	09 f0       	breq	.+2      	; 0x3196 <vfprintf+0x138>
    3194:	55 c0       	rjmp	.+170    	; 0x3240 <vfprintf+0x1e2>
    3196:	20 c0       	rjmp	.+64     	; 0x31d8 <vfprintf+0x17a>
    3198:	f8 01       	movw	r30, r16
    319a:	80 81       	ld	r24, Z
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	0e 5f       	subi	r16, 0xFE	; 254
    31a0:	1f 4f       	sbci	r17, 0xFF	; 255
    31a2:	88 24       	eor	r8, r8
    31a4:	83 94       	inc	r8
    31a6:	91 2c       	mov	r9, r1
    31a8:	53 01       	movw	r10, r6
    31aa:	12 c0       	rjmp	.+36     	; 0x31d0 <vfprintf+0x172>
    31ac:	28 01       	movw	r4, r16
    31ae:	f2 e0       	ldi	r31, 0x02	; 2
    31b0:	4f 0e       	add	r4, r31
    31b2:	51 1c       	adc	r5, r1
    31b4:	f8 01       	movw	r30, r16
    31b6:	a0 80       	ld	r10, Z
    31b8:	b1 80       	ldd	r11, Z+1	; 0x01
    31ba:	36 fe       	sbrs	r3, 6
    31bc:	03 c0       	rjmp	.+6      	; 0x31c4 <vfprintf+0x166>
    31be:	69 2d       	mov	r22, r9
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <vfprintf+0x16a>
    31c4:	6f ef       	ldi	r22, 0xFF	; 255
    31c6:	7f ef       	ldi	r23, 0xFF	; 255
    31c8:	c5 01       	movw	r24, r10
    31ca:	4b d1       	rcall	.+662    	; 0x3462 <strnlen>
    31cc:	4c 01       	movw	r8, r24
    31ce:	82 01       	movw	r16, r4
    31d0:	f3 2d       	mov	r31, r3
    31d2:	ff 77       	andi	r31, 0x7F	; 127
    31d4:	3f 2e       	mov	r3, r31
    31d6:	15 c0       	rjmp	.+42     	; 0x3202 <vfprintf+0x1a4>
    31d8:	28 01       	movw	r4, r16
    31da:	22 e0       	ldi	r18, 0x02	; 2
    31dc:	42 0e       	add	r4, r18
    31de:	51 1c       	adc	r5, r1
    31e0:	f8 01       	movw	r30, r16
    31e2:	a0 80       	ld	r10, Z
    31e4:	b1 80       	ldd	r11, Z+1	; 0x01
    31e6:	36 fe       	sbrs	r3, 6
    31e8:	03 c0       	rjmp	.+6      	; 0x31f0 <vfprintf+0x192>
    31ea:	69 2d       	mov	r22, r9
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <vfprintf+0x196>
    31f0:	6f ef       	ldi	r22, 0xFF	; 255
    31f2:	7f ef       	ldi	r23, 0xFF	; 255
    31f4:	c5 01       	movw	r24, r10
    31f6:	2a d1       	rcall	.+596    	; 0x344c <strnlen_P>
    31f8:	4c 01       	movw	r8, r24
    31fa:	f3 2d       	mov	r31, r3
    31fc:	f0 68       	ori	r31, 0x80	; 128
    31fe:	3f 2e       	mov	r3, r31
    3200:	82 01       	movw	r16, r4
    3202:	33 fc       	sbrc	r3, 3
    3204:	19 c0       	rjmp	.+50     	; 0x3238 <vfprintf+0x1da>
    3206:	82 2d       	mov	r24, r2
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	88 16       	cp	r8, r24
    320c:	99 06       	cpc	r9, r25
    320e:	a0 f4       	brcc	.+40     	; 0x3238 <vfprintf+0x1da>
    3210:	b6 01       	movw	r22, r12
    3212:	80 e2       	ldi	r24, 0x20	; 32
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	30 d1       	rcall	.+608    	; 0x3478 <fputc>
    3218:	2a 94       	dec	r2
    321a:	f5 cf       	rjmp	.-22     	; 0x3206 <vfprintf+0x1a8>
    321c:	f5 01       	movw	r30, r10
    321e:	37 fc       	sbrc	r3, 7
    3220:	85 91       	lpm	r24, Z+
    3222:	37 fe       	sbrs	r3, 7
    3224:	81 91       	ld	r24, Z+
    3226:	5f 01       	movw	r10, r30
    3228:	b6 01       	movw	r22, r12
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	25 d1       	rcall	.+586    	; 0x3478 <fputc>
    322e:	21 10       	cpse	r2, r1
    3230:	2a 94       	dec	r2
    3232:	21 e0       	ldi	r18, 0x01	; 1
    3234:	82 1a       	sub	r8, r18
    3236:	91 08       	sbc	r9, r1
    3238:	81 14       	cp	r8, r1
    323a:	91 04       	cpc	r9, r1
    323c:	79 f7       	brne	.-34     	; 0x321c <vfprintf+0x1be>
    323e:	e1 c0       	rjmp	.+450    	; 0x3402 <vfprintf+0x3a4>
    3240:	84 36       	cpi	r24, 0x64	; 100
    3242:	11 f0       	breq	.+4      	; 0x3248 <vfprintf+0x1ea>
    3244:	89 36       	cpi	r24, 0x69	; 105
    3246:	39 f5       	brne	.+78     	; 0x3296 <vfprintf+0x238>
    3248:	f8 01       	movw	r30, r16
    324a:	37 fe       	sbrs	r3, 7
    324c:	07 c0       	rjmp	.+14     	; 0x325c <vfprintf+0x1fe>
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	0c 5f       	subi	r16, 0xFC	; 252
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	08 c0       	rjmp	.+16     	; 0x326c <vfprintf+0x20e>
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	07 2e       	mov	r0, r23
    3262:	00 0c       	add	r0, r0
    3264:	88 0b       	sbc	r24, r24
    3266:	99 0b       	sbc	r25, r25
    3268:	0e 5f       	subi	r16, 0xFE	; 254
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	f3 2d       	mov	r31, r3
    326e:	ff 76       	andi	r31, 0x6F	; 111
    3270:	3f 2e       	mov	r3, r31
    3272:	97 ff       	sbrs	r25, 7
    3274:	09 c0       	rjmp	.+18     	; 0x3288 <vfprintf+0x22a>
    3276:	90 95       	com	r25
    3278:	80 95       	com	r24
    327a:	70 95       	com	r23
    327c:	61 95       	neg	r22
    327e:	7f 4f       	sbci	r23, 0xFF	; 255
    3280:	8f 4f       	sbci	r24, 0xFF	; 255
    3282:	9f 4f       	sbci	r25, 0xFF	; 255
    3284:	f0 68       	ori	r31, 0x80	; 128
    3286:	3f 2e       	mov	r3, r31
    3288:	2a e0       	ldi	r18, 0x0A	; 10
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	a3 01       	movw	r20, r6
    328e:	30 d1       	rcall	.+608    	; 0x34f0 <__ultoa_invert>
    3290:	88 2e       	mov	r8, r24
    3292:	86 18       	sub	r8, r6
    3294:	44 c0       	rjmp	.+136    	; 0x331e <vfprintf+0x2c0>
    3296:	85 37       	cpi	r24, 0x75	; 117
    3298:	31 f4       	brne	.+12     	; 0x32a6 <vfprintf+0x248>
    329a:	23 2d       	mov	r18, r3
    329c:	2f 7e       	andi	r18, 0xEF	; 239
    329e:	b2 2e       	mov	r11, r18
    32a0:	2a e0       	ldi	r18, 0x0A	; 10
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	25 c0       	rjmp	.+74     	; 0x32f0 <vfprintf+0x292>
    32a6:	93 2d       	mov	r25, r3
    32a8:	99 7f       	andi	r25, 0xF9	; 249
    32aa:	b9 2e       	mov	r11, r25
    32ac:	8f 36       	cpi	r24, 0x6F	; 111
    32ae:	c1 f0       	breq	.+48     	; 0x32e0 <vfprintf+0x282>
    32b0:	18 f4       	brcc	.+6      	; 0x32b8 <vfprintf+0x25a>
    32b2:	88 35       	cpi	r24, 0x58	; 88
    32b4:	79 f0       	breq	.+30     	; 0x32d4 <vfprintf+0x276>
    32b6:	ae c0       	rjmp	.+348    	; 0x3414 <vfprintf+0x3b6>
    32b8:	80 37       	cpi	r24, 0x70	; 112
    32ba:	19 f0       	breq	.+6      	; 0x32c2 <vfprintf+0x264>
    32bc:	88 37       	cpi	r24, 0x78	; 120
    32be:	21 f0       	breq	.+8      	; 0x32c8 <vfprintf+0x26a>
    32c0:	a9 c0       	rjmp	.+338    	; 0x3414 <vfprintf+0x3b6>
    32c2:	e9 2f       	mov	r30, r25
    32c4:	e0 61       	ori	r30, 0x10	; 16
    32c6:	be 2e       	mov	r11, r30
    32c8:	b4 fe       	sbrs	r11, 4
    32ca:	0d c0       	rjmp	.+26     	; 0x32e6 <vfprintf+0x288>
    32cc:	fb 2d       	mov	r31, r11
    32ce:	f4 60       	ori	r31, 0x04	; 4
    32d0:	bf 2e       	mov	r11, r31
    32d2:	09 c0       	rjmp	.+18     	; 0x32e6 <vfprintf+0x288>
    32d4:	34 fe       	sbrs	r3, 4
    32d6:	0a c0       	rjmp	.+20     	; 0x32ec <vfprintf+0x28e>
    32d8:	29 2f       	mov	r18, r25
    32da:	26 60       	ori	r18, 0x06	; 6
    32dc:	b2 2e       	mov	r11, r18
    32de:	06 c0       	rjmp	.+12     	; 0x32ec <vfprintf+0x28e>
    32e0:	28 e0       	ldi	r18, 0x08	; 8
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	05 c0       	rjmp	.+10     	; 0x32f0 <vfprintf+0x292>
    32e6:	20 e1       	ldi	r18, 0x10	; 16
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <vfprintf+0x292>
    32ec:	20 e1       	ldi	r18, 0x10	; 16
    32ee:	32 e0       	ldi	r19, 0x02	; 2
    32f0:	f8 01       	movw	r30, r16
    32f2:	b7 fe       	sbrs	r11, 7
    32f4:	07 c0       	rjmp	.+14     	; 0x3304 <vfprintf+0x2a6>
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	0c 5f       	subi	r16, 0xFC	; 252
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	06 c0       	rjmp	.+12     	; 0x3310 <vfprintf+0x2b2>
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 5f       	subi	r16, 0xFE	; 254
    330e:	1f 4f       	sbci	r17, 0xFF	; 255
    3310:	a3 01       	movw	r20, r6
    3312:	ee d0       	rcall	.+476    	; 0x34f0 <__ultoa_invert>
    3314:	88 2e       	mov	r8, r24
    3316:	86 18       	sub	r8, r6
    3318:	fb 2d       	mov	r31, r11
    331a:	ff 77       	andi	r31, 0x7F	; 127
    331c:	3f 2e       	mov	r3, r31
    331e:	36 fe       	sbrs	r3, 6
    3320:	0d c0       	rjmp	.+26     	; 0x333c <vfprintf+0x2de>
    3322:	23 2d       	mov	r18, r3
    3324:	2e 7f       	andi	r18, 0xFE	; 254
    3326:	a2 2e       	mov	r10, r18
    3328:	89 14       	cp	r8, r9
    332a:	58 f4       	brcc	.+22     	; 0x3342 <vfprintf+0x2e4>
    332c:	34 fe       	sbrs	r3, 4
    332e:	0b c0       	rjmp	.+22     	; 0x3346 <vfprintf+0x2e8>
    3330:	32 fc       	sbrc	r3, 2
    3332:	09 c0       	rjmp	.+18     	; 0x3346 <vfprintf+0x2e8>
    3334:	83 2d       	mov	r24, r3
    3336:	8e 7e       	andi	r24, 0xEE	; 238
    3338:	a8 2e       	mov	r10, r24
    333a:	05 c0       	rjmp	.+10     	; 0x3346 <vfprintf+0x2e8>
    333c:	b8 2c       	mov	r11, r8
    333e:	a3 2c       	mov	r10, r3
    3340:	03 c0       	rjmp	.+6      	; 0x3348 <vfprintf+0x2ea>
    3342:	b8 2c       	mov	r11, r8
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <vfprintf+0x2ea>
    3346:	b9 2c       	mov	r11, r9
    3348:	a4 fe       	sbrs	r10, 4
    334a:	0f c0       	rjmp	.+30     	; 0x336a <vfprintf+0x30c>
    334c:	fe 01       	movw	r30, r28
    334e:	e8 0d       	add	r30, r8
    3350:	f1 1d       	adc	r31, r1
    3352:	80 81       	ld	r24, Z
    3354:	80 33       	cpi	r24, 0x30	; 48
    3356:	21 f4       	brne	.+8      	; 0x3360 <vfprintf+0x302>
    3358:	9a 2d       	mov	r25, r10
    335a:	99 7e       	andi	r25, 0xE9	; 233
    335c:	a9 2e       	mov	r10, r25
    335e:	09 c0       	rjmp	.+18     	; 0x3372 <vfprintf+0x314>
    3360:	a2 fe       	sbrs	r10, 2
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <vfprintf+0x312>
    3364:	b3 94       	inc	r11
    3366:	b3 94       	inc	r11
    3368:	04 c0       	rjmp	.+8      	; 0x3372 <vfprintf+0x314>
    336a:	8a 2d       	mov	r24, r10
    336c:	86 78       	andi	r24, 0x86	; 134
    336e:	09 f0       	breq	.+2      	; 0x3372 <vfprintf+0x314>
    3370:	b3 94       	inc	r11
    3372:	a3 fc       	sbrc	r10, 3
    3374:	10 c0       	rjmp	.+32     	; 0x3396 <vfprintf+0x338>
    3376:	a0 fe       	sbrs	r10, 0
    3378:	06 c0       	rjmp	.+12     	; 0x3386 <vfprintf+0x328>
    337a:	b2 14       	cp	r11, r2
    337c:	80 f4       	brcc	.+32     	; 0x339e <vfprintf+0x340>
    337e:	28 0c       	add	r2, r8
    3380:	92 2c       	mov	r9, r2
    3382:	9b 18       	sub	r9, r11
    3384:	0d c0       	rjmp	.+26     	; 0x33a0 <vfprintf+0x342>
    3386:	b2 14       	cp	r11, r2
    3388:	58 f4       	brcc	.+22     	; 0x33a0 <vfprintf+0x342>
    338a:	b6 01       	movw	r22, r12
    338c:	80 e2       	ldi	r24, 0x20	; 32
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	73 d0       	rcall	.+230    	; 0x3478 <fputc>
    3392:	b3 94       	inc	r11
    3394:	f8 cf       	rjmp	.-16     	; 0x3386 <vfprintf+0x328>
    3396:	b2 14       	cp	r11, r2
    3398:	18 f4       	brcc	.+6      	; 0x33a0 <vfprintf+0x342>
    339a:	2b 18       	sub	r2, r11
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <vfprintf+0x344>
    339e:	98 2c       	mov	r9, r8
    33a0:	21 2c       	mov	r2, r1
    33a2:	a4 fe       	sbrs	r10, 4
    33a4:	0f c0       	rjmp	.+30     	; 0x33c4 <vfprintf+0x366>
    33a6:	b6 01       	movw	r22, r12
    33a8:	80 e3       	ldi	r24, 0x30	; 48
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	65 d0       	rcall	.+202    	; 0x3478 <fputc>
    33ae:	a2 fe       	sbrs	r10, 2
    33b0:	16 c0       	rjmp	.+44     	; 0x33de <vfprintf+0x380>
    33b2:	a1 fc       	sbrc	r10, 1
    33b4:	03 c0       	rjmp	.+6      	; 0x33bc <vfprintf+0x35e>
    33b6:	88 e7       	ldi	r24, 0x78	; 120
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <vfprintf+0x362>
    33bc:	88 e5       	ldi	r24, 0x58	; 88
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	b6 01       	movw	r22, r12
    33c2:	0c c0       	rjmp	.+24     	; 0x33dc <vfprintf+0x37e>
    33c4:	8a 2d       	mov	r24, r10
    33c6:	86 78       	andi	r24, 0x86	; 134
    33c8:	51 f0       	breq	.+20     	; 0x33de <vfprintf+0x380>
    33ca:	a1 fe       	sbrs	r10, 1
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <vfprintf+0x374>
    33ce:	8b e2       	ldi	r24, 0x2B	; 43
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <vfprintf+0x376>
    33d2:	80 e2       	ldi	r24, 0x20	; 32
    33d4:	a7 fc       	sbrc	r10, 7
    33d6:	8d e2       	ldi	r24, 0x2D	; 45
    33d8:	b6 01       	movw	r22, r12
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	4d d0       	rcall	.+154    	; 0x3478 <fputc>
    33de:	89 14       	cp	r8, r9
    33e0:	30 f4       	brcc	.+12     	; 0x33ee <vfprintf+0x390>
    33e2:	b6 01       	movw	r22, r12
    33e4:	80 e3       	ldi	r24, 0x30	; 48
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	47 d0       	rcall	.+142    	; 0x3478 <fputc>
    33ea:	9a 94       	dec	r9
    33ec:	f8 cf       	rjmp	.-16     	; 0x33de <vfprintf+0x380>
    33ee:	8a 94       	dec	r8
    33f0:	f3 01       	movw	r30, r6
    33f2:	e8 0d       	add	r30, r8
    33f4:	f1 1d       	adc	r31, r1
    33f6:	80 81       	ld	r24, Z
    33f8:	b6 01       	movw	r22, r12
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	3d d0       	rcall	.+122    	; 0x3478 <fputc>
    33fe:	81 10       	cpse	r8, r1
    3400:	f6 cf       	rjmp	.-20     	; 0x33ee <vfprintf+0x390>
    3402:	22 20       	and	r2, r2
    3404:	09 f4       	brne	.+2      	; 0x3408 <vfprintf+0x3aa>
    3406:	4e ce       	rjmp	.-868    	; 0x30a4 <vfprintf+0x46>
    3408:	b6 01       	movw	r22, r12
    340a:	80 e2       	ldi	r24, 0x20	; 32
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	34 d0       	rcall	.+104    	; 0x3478 <fputc>
    3410:	2a 94       	dec	r2
    3412:	f7 cf       	rjmp	.-18     	; 0x3402 <vfprintf+0x3a4>
    3414:	f6 01       	movw	r30, r12
    3416:	86 81       	ldd	r24, Z+6	; 0x06
    3418:	97 81       	ldd	r25, Z+7	; 0x07
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <vfprintf+0x3c2>
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	9f ef       	ldi	r25, 0xFF	; 255
    3420:	2b 96       	adiw	r28, 0x0b	; 11
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	bf 90       	pop	r11
    3438:	af 90       	pop	r10
    343a:	9f 90       	pop	r9
    343c:	8f 90       	pop	r8
    343e:	7f 90       	pop	r7
    3440:	6f 90       	pop	r6
    3442:	5f 90       	pop	r5
    3444:	4f 90       	pop	r4
    3446:	3f 90       	pop	r3
    3448:	2f 90       	pop	r2
    344a:	08 95       	ret

0000344c <strnlen_P>:
    344c:	fc 01       	movw	r30, r24
    344e:	05 90       	lpm	r0, Z+
    3450:	61 50       	subi	r22, 0x01	; 1
    3452:	70 40       	sbci	r23, 0x00	; 0
    3454:	01 10       	cpse	r0, r1
    3456:	d8 f7       	brcc	.-10     	; 0x344e <strnlen_P+0x2>
    3458:	80 95       	com	r24
    345a:	90 95       	com	r25
    345c:	8e 0f       	add	r24, r30
    345e:	9f 1f       	adc	r25, r31
    3460:	08 95       	ret

00003462 <strnlen>:
    3462:	fc 01       	movw	r30, r24
    3464:	61 50       	subi	r22, 0x01	; 1
    3466:	70 40       	sbci	r23, 0x00	; 0
    3468:	01 90       	ld	r0, Z+
    346a:	01 10       	cpse	r0, r1
    346c:	d8 f7       	brcc	.-10     	; 0x3464 <strnlen+0x2>
    346e:	80 95       	com	r24
    3470:	90 95       	com	r25
    3472:	8e 0f       	add	r24, r30
    3474:	9f 1f       	adc	r25, r31
    3476:	08 95       	ret

00003478 <fputc>:
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	fb 01       	movw	r30, r22
    3482:	23 81       	ldd	r18, Z+3	; 0x03
    3484:	21 fd       	sbrc	r18, 1
    3486:	03 c0       	rjmp	.+6      	; 0x348e <fputc+0x16>
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	9f ef       	ldi	r25, 0xFF	; 255
    348c:	2c c0       	rjmp	.+88     	; 0x34e6 <fputc+0x6e>
    348e:	22 ff       	sbrs	r18, 2
    3490:	16 c0       	rjmp	.+44     	; 0x34be <fputc+0x46>
    3492:	46 81       	ldd	r20, Z+6	; 0x06
    3494:	57 81       	ldd	r21, Z+7	; 0x07
    3496:	24 81       	ldd	r18, Z+4	; 0x04
    3498:	35 81       	ldd	r19, Z+5	; 0x05
    349a:	42 17       	cp	r20, r18
    349c:	53 07       	cpc	r21, r19
    349e:	44 f4       	brge	.+16     	; 0x34b0 <fputc+0x38>
    34a0:	a0 81       	ld	r26, Z
    34a2:	b1 81       	ldd	r27, Z+1	; 0x01
    34a4:	9d 01       	movw	r18, r26
    34a6:	2f 5f       	subi	r18, 0xFF	; 255
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	20 83       	st	Z, r18
    34ac:	31 83       	std	Z+1, r19	; 0x01
    34ae:	8c 93       	st	X, r24
    34b0:	26 81       	ldd	r18, Z+6	; 0x06
    34b2:	37 81       	ldd	r19, Z+7	; 0x07
    34b4:	2f 5f       	subi	r18, 0xFF	; 255
    34b6:	3f 4f       	sbci	r19, 0xFF	; 255
    34b8:	26 83       	std	Z+6, r18	; 0x06
    34ba:	37 83       	std	Z+7, r19	; 0x07
    34bc:	14 c0       	rjmp	.+40     	; 0x34e6 <fputc+0x6e>
    34be:	8b 01       	movw	r16, r22
    34c0:	ec 01       	movw	r28, r24
    34c2:	fb 01       	movw	r30, r22
    34c4:	00 84       	ldd	r0, Z+8	; 0x08
    34c6:	f1 85       	ldd	r31, Z+9	; 0x09
    34c8:	e0 2d       	mov	r30, r0
    34ca:	19 95       	eicall
    34cc:	89 2b       	or	r24, r25
    34ce:	e1 f6       	brne	.-72     	; 0x3488 <fputc+0x10>
    34d0:	d8 01       	movw	r26, r16
    34d2:	16 96       	adiw	r26, 0x06	; 6
    34d4:	8d 91       	ld	r24, X+
    34d6:	9c 91       	ld	r25, X
    34d8:	17 97       	sbiw	r26, 0x07	; 7
    34da:	01 96       	adiw	r24, 0x01	; 1
    34dc:	16 96       	adiw	r26, 0x06	; 6
    34de:	8d 93       	st	X+, r24
    34e0:	9c 93       	st	X, r25
    34e2:	17 97       	sbiw	r26, 0x07	; 7
    34e4:	ce 01       	movw	r24, r28
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	08 95       	ret

000034f0 <__ultoa_invert>:
    34f0:	fa 01       	movw	r30, r20
    34f2:	aa 27       	eor	r26, r26
    34f4:	28 30       	cpi	r18, 0x08	; 8
    34f6:	51 f1       	breq	.+84     	; 0x354c <__ultoa_invert+0x5c>
    34f8:	20 31       	cpi	r18, 0x10	; 16
    34fa:	81 f1       	breq	.+96     	; 0x355c <__ultoa_invert+0x6c>
    34fc:	e8 94       	clt
    34fe:	6f 93       	push	r22
    3500:	6e 7f       	andi	r22, 0xFE	; 254
    3502:	6e 5f       	subi	r22, 0xFE	; 254
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	8f 4f       	sbci	r24, 0xFF	; 255
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	af 4f       	sbci	r26, 0xFF	; 255
    350c:	b1 e0       	ldi	r27, 0x01	; 1
    350e:	3e d0       	rcall	.+124    	; 0x358c <__ultoa_invert+0x9c>
    3510:	b4 e0       	ldi	r27, 0x04	; 4
    3512:	3c d0       	rcall	.+120    	; 0x358c <__ultoa_invert+0x9c>
    3514:	67 0f       	add	r22, r23
    3516:	78 1f       	adc	r23, r24
    3518:	89 1f       	adc	r24, r25
    351a:	9a 1f       	adc	r25, r26
    351c:	a1 1d       	adc	r26, r1
    351e:	68 0f       	add	r22, r24
    3520:	79 1f       	adc	r23, r25
    3522:	8a 1f       	adc	r24, r26
    3524:	91 1d       	adc	r25, r1
    3526:	a1 1d       	adc	r26, r1
    3528:	6a 0f       	add	r22, r26
    352a:	71 1d       	adc	r23, r1
    352c:	81 1d       	adc	r24, r1
    352e:	91 1d       	adc	r25, r1
    3530:	a1 1d       	adc	r26, r1
    3532:	20 d0       	rcall	.+64     	; 0x3574 <__ultoa_invert+0x84>
    3534:	09 f4       	brne	.+2      	; 0x3538 <__ultoa_invert+0x48>
    3536:	68 94       	set
    3538:	3f 91       	pop	r19
    353a:	2a e0       	ldi	r18, 0x0A	; 10
    353c:	26 9f       	mul	r18, r22
    353e:	11 24       	eor	r1, r1
    3540:	30 19       	sub	r19, r0
    3542:	30 5d       	subi	r19, 0xD0	; 208
    3544:	31 93       	st	Z+, r19
    3546:	de f6       	brtc	.-74     	; 0x34fe <__ultoa_invert+0xe>
    3548:	cf 01       	movw	r24, r30
    354a:	08 95       	ret
    354c:	46 2f       	mov	r20, r22
    354e:	47 70       	andi	r20, 0x07	; 7
    3550:	40 5d       	subi	r20, 0xD0	; 208
    3552:	41 93       	st	Z+, r20
    3554:	b3 e0       	ldi	r27, 0x03	; 3
    3556:	0f d0       	rcall	.+30     	; 0x3576 <__ultoa_invert+0x86>
    3558:	c9 f7       	brne	.-14     	; 0x354c <__ultoa_invert+0x5c>
    355a:	f6 cf       	rjmp	.-20     	; 0x3548 <__ultoa_invert+0x58>
    355c:	46 2f       	mov	r20, r22
    355e:	4f 70       	andi	r20, 0x0F	; 15
    3560:	40 5d       	subi	r20, 0xD0	; 208
    3562:	4a 33       	cpi	r20, 0x3A	; 58
    3564:	18 f0       	brcs	.+6      	; 0x356c <__ultoa_invert+0x7c>
    3566:	49 5d       	subi	r20, 0xD9	; 217
    3568:	31 fd       	sbrc	r19, 1
    356a:	40 52       	subi	r20, 0x20	; 32
    356c:	41 93       	st	Z+, r20
    356e:	02 d0       	rcall	.+4      	; 0x3574 <__ultoa_invert+0x84>
    3570:	a9 f7       	brne	.-22     	; 0x355c <__ultoa_invert+0x6c>
    3572:	ea cf       	rjmp	.-44     	; 0x3548 <__ultoa_invert+0x58>
    3574:	b4 e0       	ldi	r27, 0x04	; 4
    3576:	a6 95       	lsr	r26
    3578:	97 95       	ror	r25
    357a:	87 95       	ror	r24
    357c:	77 95       	ror	r23
    357e:	67 95       	ror	r22
    3580:	ba 95       	dec	r27
    3582:	c9 f7       	brne	.-14     	; 0x3576 <__ultoa_invert+0x86>
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	61 05       	cpc	r22, r1
    3588:	71 05       	cpc	r23, r1
    358a:	08 95       	ret
    358c:	9b 01       	movw	r18, r22
    358e:	ac 01       	movw	r20, r24
    3590:	0a 2e       	mov	r0, r26
    3592:	06 94       	lsr	r0
    3594:	57 95       	ror	r21
    3596:	47 95       	ror	r20
    3598:	37 95       	ror	r19
    359a:	27 95       	ror	r18
    359c:	ba 95       	dec	r27
    359e:	c9 f7       	brne	.-14     	; 0x3592 <__ultoa_invert+0xa2>
    35a0:	62 0f       	add	r22, r18
    35a2:	73 1f       	adc	r23, r19
    35a4:	84 1f       	adc	r24, r20
    35a6:	95 1f       	adc	r25, r21
    35a8:	a0 1d       	adc	r26, r0
    35aa:	08 95       	ret

000035ac <_exit>:
    35ac:	f8 94       	cli

000035ae <__stop_program>:
    35ae:	ff cf       	rjmp	.-2      	; 0x35ae <__stop_program>
