
sistem_alarm_pintu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  00001d2a  00001dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000287  00802060  00802060  00001e1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e0fa  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b17  00000000  00000000  000102d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007258  00000000  00000000  00014de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a44  00000000  00000000  0001c044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032945  00000000  00000000  0001ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c03  00000000  00000000  0004f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00054fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be41  00000000  00000000  000553f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_104>
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1db9>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65a1>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6579>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55a1>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d79>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ea e2       	ldi	r30, 0x2A	; 42
     4a6:	fd e1       	ldi	r31, 0x1D	; 29
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a0 36       	cpi	r26, 0x60	; 96
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a0 e6       	ldi	r26, 0x60	; 96
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a7 3e       	cpi	r26, 0xE7	; 231
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 c7 0a 	call	0x158e	; 0x158e <main>
     4cc:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	1e d4       	rcall	.+2108   	; 0xd72 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	00 e4       	ldi	r16, 0x40	; 64
     53e:	12 e4       	ldi	r17, 0x42	; 66
     540:	2f e0       	ldi	r18, 0x0F	; 15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	99 e0       	ldi	r25, 0x09	; 9
     550:	3f d4       	rcall	.+2174   	; 0xdd0 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     552:	00 e6       	ldi	r16, 0x60	; 96
     554:	16 e0       	ldi	r17, 0x06	; 6
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
     55a:	f8 01       	movw	r30, r16
     55c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	4c d4       	rcall	.+2200   	; 0xe04 <usart_spi_select_device>
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     570:	e0 ea       	ldi	r30, 0xA0	; 160
     572:	f9 e0       	ldi	r31, 0x09	; 9
     574:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     592:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	99 e0       	ldi	r25, 0x09	; 9
     59e:	48 d4       	rcall	.+2192   	; 0xe30 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	2a d4       	rcall	.+2132   	; 0xe04 <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d8:	80 81       	ld	r24, Z
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e4:	25 d4       	rcall	.+2122   	; 0xe30 <usart_spi_deselect_device>
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	07 d4       	rcall	.+2062   	; 0xe04 <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62a:	02 d4       	rcall	.+2052   	; 0xe30 <usart_spi_deselect_device>
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	e4 d3       	rcall	.+1992   	; 0xe04 <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	82 ea       	ldi	r24, 0xA2	; 162
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x16e>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	df d3       	rcall	.+1982   	; 0xe30 <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	c1 d3       	rcall	.+1922   	; 0xe04 <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	8f e2       	ldi	r24, 0x2F	; 47
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x1b4>
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	bc d3       	rcall	.+1912   	; 0xe30 <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	9e d3       	rcall	.+1852   	; 0xe04 <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	88 ef       	ldi	r24, 0xF8	; 248
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1fa>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	99 d3       	rcall	.+1842   	; 0xe30 <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	7b d3       	rcall	.+1782   	; 0xe04 <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <st7565r_init+0x23e>
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	81 83       	std	Z+1, r24	; 0x01
     734:	80 81       	ld	r24, Z
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	77 d3       	rcall	.+1774   	; 0xe30 <usart_spi_deselect_device>
     742:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	59 d3       	rcall	.+1714   	; 0xe04 <usart_spi_select_device>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	fd cf       	rjmp	.-6      	; 0x75c <st7565r_init+0x274>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	86 ff       	sbrs	r24, 6
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x284>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	54 d3       	rcall	.+1704   	; 0xe30 <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	36 d3       	rcall	.+1644   	; 0xe04 <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2ba>
     7a8:	81 e8       	ldi	r24, 0x81	; 129
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x2ca>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	31 d3       	rcall	.+1634   	; 0xe30 <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	13 d3       	rcall	.+1574   	; 0xe04 <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x300>
     7ee:	81 e2       	ldi	r24, 0x21	; 33
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x310>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	0e d3       	rcall	.+1564   	; 0xe30 <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	f0 d2       	rcall	.+1504   	; 0xe04 <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x346>
     834:	8f ea       	ldi	r24, 0xAF	; 175
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x356>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     84a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	eb d2       	rcall	.+1494   	; 0xe30 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     85a:	0f 90       	pop	r0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	1f 92       	push	r1
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     87a:	9f b7       	in	r25, 0x3f	; 63
     87c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     87e:	f8 94       	cli
	return flags;
     880:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     882:	e8 2f       	mov	r30, r24
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	e0 59       	subi	r30, 0x90	; 144
     888:	ff 4f       	sbci	r31, 0xFF	; 255
     88a:	60 95       	com	r22
     88c:	80 81       	ld	r24, Z
     88e:	68 23       	and	r22, r24
     890:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     892:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	1f 92       	push	r1
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	08 2f       	mov	r16, r24
     8ae:	f6 2e       	mov	r15, r22
     8b0:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8b2:	1a d1       	rcall	.+564    	; 0xae8 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8b4:	0f 70       	andi	r16, 0x0F	; 15
     8b6:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8b8:	8b e2       	ldi	r24, 0x2B	; 43
     8ba:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8bc:	be 01       	movw	r22, r28
     8be:	6f 5f       	subi	r22, 0xFF	; 255
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	80 ea       	ldi	r24, 0xA0	; 160
     8c4:	99 e0       	ldi	r25, 0x09	; 9
     8c6:	9e d2       	rcall	.+1340   	; 0xe04 <usart_spi_select_device>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ce:	e0 ea       	ldi	r30, 0xA0	; 160
     8d0:	f9 e0       	ldi	r31, 0x09	; 9
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8d4:	95 ff       	sbrs	r25, 5
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8d8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8dc:	e0 ea       	ldi	r30, 0xA0	; 160
     8de:	f9 e0       	ldi	r31, 0x09	; 9
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8e2:	86 ff       	sbrs	r24, 6
     8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8e6:	e0 ea       	ldi	r30, 0xA0	; 160
     8e8:	f9 e0       	ldi	r31, 0x09	; 9
     8ea:	80 e4       	ldi	r24, 0x40	; 64
     8ec:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8ee:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	80 ea       	ldi	r24, 0xA0	; 160
     8f8:	99 e0       	ldi	r25, 0x09	; 9
     8fa:	9a d2       	rcall	.+1332   	; 0xe30 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8fc:	0f 2d       	mov	r16, r15
     8fe:	0f 77       	andi	r16, 0x7F	; 127
     900:	02 95       	swap	r16
     902:	0f 70       	andi	r16, 0x0F	; 15
     904:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     906:	8b e2       	ldi	r24, 0x2B	; 43
     908:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	80 ea       	ldi	r24, 0xA0	; 160
     912:	99 e0       	ldi	r25, 0x09	; 9
     914:	77 d2       	rcall	.+1262   	; 0xe04 <usart_spi_select_device>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     91c:	e0 ea       	ldi	r30, 0xA0	; 160
     91e:	f9 e0       	ldi	r31, 0x09	; 9
     920:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     922:	85 ff       	sbrs	r24, 5
     924:	fd cf       	rjmp	.-6      	; 0x920 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     926:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     92a:	e0 ea       	ldi	r30, 0xA0	; 160
     92c:	f9 e0       	ldi	r31, 0x09	; 9
     92e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     930:	86 ff       	sbrs	r24, 6
     932:	fd cf       	rjmp	.-6      	; 0x92e <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     934:	e0 ea       	ldi	r30, 0xA0	; 160
     936:	f9 e0       	ldi	r31, 0x09	; 9
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     93c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 ea       	ldi	r24, 0xA0	; 160
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	73 d2       	rcall	.+1254   	; 0xe30 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     94a:	0f 2d       	mov	r16, r15
     94c:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     94e:	8b e2       	ldi	r24, 0x2B	; 43
     950:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     952:	be 01       	movw	r22, r28
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	80 ea       	ldi	r24, 0xA0	; 160
     95a:	99 e0       	ldi	r25, 0x09	; 9
     95c:	53 d2       	rcall	.+1190   	; 0xe04 <usart_spi_select_device>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     964:	e0 ea       	ldi	r30, 0xA0	; 160
     966:	f9 e0       	ldi	r31, 0x09	; 9
     968:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     96a:	85 ff       	sbrs	r24, 5
     96c:	fd cf       	rjmp	.-6      	; 0x968 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     96e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     972:	e0 ea       	ldi	r30, 0xA0	; 160
     974:	f9 e0       	ldi	r31, 0x09	; 9
     976:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     978:	86 ff       	sbrs	r24, 6
     97a:	fd cf       	rjmp	.-6      	; 0x976 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     97c:	e0 ea       	ldi	r30, 0xA0	; 160
     97e:	f9 e0       	ldi	r31, 0x09	; 9
     980:	80 e4       	ldi	r24, 0x40	; 64
     982:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     984:	80 81       	ld	r24, Z
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	80 ea       	ldi	r24, 0xA0	; 160
     98e:	99 e0       	ldi	r25, 0x09	; 9
     990:	4f d2       	rcall	.+1182   	; 0xe30 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     992:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	31 d2       	rcall	.+1122   	; 0xe04 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
     9aa:	f9 e0       	ldi	r31, 0x09	; 9
     9ac:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9ae:	85 ff       	sbrs	r24, 5
     9b0:	fd cf       	rjmp	.-6      	; 0x9ac <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9b2:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9b6:	e0 ea       	ldi	r30, 0xA0	; 160
     9b8:	f9 e0       	ldi	r31, 0x09	; 9
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9bc:	86 ff       	sbrs	r24, 6
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9c0:	e0 ea       	ldi	r30, 0xA0	; 160
     9c2:	f9 e0       	ldi	r31, 0x09	; 9
     9c4:	80 e4       	ldi	r24, 0x40	; 64
     9c6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9c8:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	80 ea       	ldi	r24, 0xA0	; 160
     9d8:	99 e0       	ldi	r25, 0x09	; 9
     9da:	2a d2       	rcall	.+1108   	; 0xe30 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9dc:	0f 90       	pop	r0
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	08 95       	ret

000009ea <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9f8:	80 e6       	ldi	r24, 0x60	; 96
     9fa:	90 e2       	ldi	r25, 0x20	; 32
     9fc:	70 d0       	rcall	.+224    	; 0xade <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9fe:	74 dd       	rcall	.-1304   	; 0x4e8 <st7565r_init>
     a00:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	99 e0       	ldi	r25, 0x09	; 9
     a0e:	fa d1       	rcall	.+1012   	; 0xe04 <usart_spi_select_device>
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a16:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a18:	f9 e0       	ldi	r31, 0x09	; 9
     a1a:	81 81       	ldd	r24, Z+1	; 0x01
     a1c:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a1e:	fd cf       	rjmp	.-6      	; 0xa1a <gfx_mono_st7565r_init+0x30>
     a20:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a22:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a26:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a28:	f9 e0       	ldi	r31, 0x09	; 9
     a2a:	81 81       	ldd	r24, Z+1	; 0x01
     a2c:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a2e:	fd cf       	rjmp	.-6      	; 0xa2a <gfx_mono_st7565r_init+0x40>
     a30:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a32:	f9 e0       	ldi	r31, 0x09	; 9
     a34:	80 e4       	ldi	r24, 0x40	; 64
     a36:	81 83       	std	Z+1, r24	; 0x01
     a38:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a3a:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	80 ea       	ldi	r24, 0xA0	; 160
     a42:	99 e0       	ldi	r25, 0x09	; 9
     a44:	f5 d1       	rcall	.+1002   	; 0xe30 <usart_spi_deselect_device>
     a46:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	61 2f       	mov	r22, r17
     a4e:	80 2f       	mov	r24, r16
     a50:	25 df       	rcall	.-438    	; 0x89c <gfx_mono_st7565r_put_byte>
     a52:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a54:	10 38       	cpi	r17, 0x80	; 128
     a56:	c9 f7       	brne	.-14     	; 0xa4a <gfx_mono_st7565r_init+0x60>
     a58:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a5a:	04 30       	cpi	r16, 0x04	; 4
     a5c:	11 f0       	breq	.+4      	; 0xa62 <gfx_mono_st7565r_init+0x78>
     a5e:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a60:	f4 cf       	rjmp	.-24     	; 0xa4a <gfx_mono_st7565r_init+0x60>
     a62:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <gfx_mono_st7565r_draw_pixel>:
     a6e:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a78:	88 23       	and	r24, r24
     a7a:	4c f1       	brlt	.+82     	; 0xace <gfx_mono_st7565r_draw_pixel+0x60>
     a7c:	60 32       	cpi	r22, 0x20	; 32
     a7e:	38 f5       	brcc	.+78     	; 0xace <gfx_mono_st7565r_draw_pixel+0x60>
     a80:	d4 2f       	mov	r29, r20
     a82:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a84:	f6 2e       	mov	r15, r22
     a86:	f6 94       	lsr	r15
     a88:	f6 94       	lsr	r15
     a8a:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	f8 9e       	mul	r15, r24
     a92:	60 19       	sub	r22, r0
     a94:	71 09       	sbc	r23, r1
     a96:	11 24       	eor	r1, r1
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	8c 01       	movw	r16, r24
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <gfx_mono_st7565r_draw_pixel+0x36>
     aa0:	00 0f       	add	r16, r16
     aa2:	11 1f       	adc	r17, r17
     aa4:	6a 95       	dec	r22
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aa8:	6c 2f       	mov	r22, r28
     aaa:	8f 2d       	mov	r24, r15
     aac:	2b d0       	rcall	.+86     	; 0xb04 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     aae:	d1 30       	cpi	r29, 0x01	; 1
     ab0:	21 f0       	breq	.+8      	; 0xaba <gfx_mono_st7565r_draw_pixel+0x4c>
     ab2:	28 f0       	brcs	.+10     	; 0xabe <gfx_mono_st7565r_draw_pixel+0x50>
     ab4:	d2 30       	cpi	r29, 0x02	; 2
     ab6:	31 f0       	breq	.+12     	; 0xac4 <gfx_mono_st7565r_draw_pixel+0x56>
     ab8:	06 c0       	rjmp	.+12     	; 0xac6 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aba:	80 2b       	or	r24, r16
		break;
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     abe:	00 95       	com	r16
     ac0:	80 23       	and	r24, r16
		break;
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ac4:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ac6:	48 2f       	mov	r20, r24
     ac8:	6c 2f       	mov	r22, r28
     aca:	8f 2d       	mov	r24, r15
     acc:	e7 de       	rcall	.-562    	; 0x89c <gfx_mono_st7565r_put_byte>
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	08 95       	ret

00000ada <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ada:	14 c0       	rjmp	.+40     	; 0xb04 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     adc:	08 95       	ret

00000ade <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     ade:	80 93 60 22 	sts	0x2260, r24	; 0x802260 <fbpointer>
     ae2:	90 93 61 22 	sts	0x2261, r25	; 0x802261 <fbpointer+0x1>
     ae6:	08 95       	ret

00000ae8 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     ae8:	20 91 60 22 	lds	r18, 0x2260	; 0x802260 <fbpointer>
     aec:	30 91 61 22 	lds	r19, 0x2261	; 0x802261 <fbpointer+0x1>
     af0:	90 e8       	ldi	r25, 0x80	; 128
     af2:	89 9f       	mul	r24, r25
     af4:	20 0d       	add	r18, r0
     af6:	31 1d       	adc	r19, r1
     af8:	11 24       	eor	r1, r1
     afa:	f9 01       	movw	r30, r18
     afc:	e6 0f       	add	r30, r22
     afe:	f1 1d       	adc	r31, r1
     b00:	40 83       	st	Z, r20
     b02:	08 95       	ret

00000b04 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b04:	20 91 60 22 	lds	r18, 0x2260	; 0x802260 <fbpointer>
     b08:	30 91 61 22 	lds	r19, 0x2261	; 0x802261 <fbpointer+0x1>
     b0c:	90 e8       	ldi	r25, 0x80	; 128
     b0e:	89 9f       	mul	r24, r25
     b10:	20 0d       	add	r18, r0
     b12:	31 1d       	adc	r19, r1
     b14:	11 24       	eor	r1, r1
     b16:	f9 01       	movw	r30, r18
     b18:	e6 0f       	add	r30, r22
     b1a:	f1 1d       	adc	r31, r1
}
     b1c:	80 81       	ld	r24, Z
     b1e:	08 95       	ret

00000b20 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	e4 2f       	mov	r30, r20
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	e8 0f       	add	r30, r24
     b30:	f1 1d       	adc	r31, r1
     b32:	e1 38       	cpi	r30, 0x81	; 129
     b34:	f1 05       	cpc	r31, r1
     b36:	1c f0       	brlt	.+6      	; 0xb3e <gfx_mono_generic_draw_horizontal_line+0x1e>
     b38:	c0 e8       	ldi	r28, 0x80	; 128
     b3a:	4c 2f       	mov	r20, r28
     b3c:	48 1b       	sub	r20, r24
     b3e:	44 23       	and	r20, r20
     b40:	09 f4       	brne	.+2      	; 0xb44 <gfx_mono_generic_draw_horizontal_line+0x24>
     b42:	4a c0       	rjmp	.+148    	; 0xbd8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b44:	d6 2f       	mov	r29, r22
     b46:	d6 95       	lsr	r29
     b48:	d6 95       	lsr	r29
     b4a:	d6 95       	lsr	r29
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	98 e0       	ldi	r25, 0x08	; 8
     b50:	d9 9f       	mul	r29, r25
     b52:	60 19       	sub	r22, r0
     b54:	71 09       	sbc	r23, r1
     b56:	11 24       	eor	r1, r1
     b58:	e1 e0       	ldi	r30, 0x01	; 1
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	df 01       	movw	r26, r30
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <gfx_mono_generic_draw_horizontal_line+0x44>
     b60:	aa 0f       	add	r26, r26
     b62:	bb 1f       	adc	r27, r27
     b64:	6a 95       	dec	r22
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <gfx_mono_generic_draw_horizontal_line+0x40>
     b68:	fa 2e       	mov	r15, r26
     b6a:	21 30       	cpi	r18, 0x01	; 1
     b6c:	21 f0       	breq	.+8      	; 0xb76 <gfx_mono_generic_draw_horizontal_line+0x56>
     b6e:	98 f0       	brcs	.+38     	; 0xb96 <gfx_mono_generic_draw_horizontal_line+0x76>
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	19 f1       	breq	.+70     	; 0xbba <gfx_mono_generic_draw_horizontal_line+0x9a>
     b74:	31 c0       	rjmp	.+98     	; 0xbd8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b76:	c4 2f       	mov	r28, r20
     b78:	1f ef       	ldi	r17, 0xFF	; 255
     b7a:	18 0f       	add	r17, r24
     b7c:	01 2f       	mov	r16, r17
     b7e:	0c 0f       	add	r16, r28
     b80:	60 2f       	mov	r22, r16
     b82:	8d 2f       	mov	r24, r29
     b84:	aa df       	rcall	.-172    	; 0xada <gfx_mono_st7565r_get_byte>
     b86:	4f 2d       	mov	r20, r15
     b88:	48 2b       	or	r20, r24
     b8a:	60 2f       	mov	r22, r16
     b8c:	8d 2f       	mov	r24, r29
     b8e:	86 de       	rcall	.-756    	; 0x89c <gfx_mono_st7565r_put_byte>
     b90:	c1 50       	subi	r28, 0x01	; 1
     b92:	a1 f7       	brne	.-24     	; 0xb7c <gfx_mono_generic_draw_horizontal_line+0x5c>
     b94:	21 c0       	rjmp	.+66     	; 0xbd8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b96:	c4 2f       	mov	r28, r20
     b98:	1f ef       	ldi	r17, 0xFF	; 255
     b9a:	18 0f       	add	r17, r24
     b9c:	fa 2e       	mov	r15, r26
     b9e:	f0 94       	com	r15
     ba0:	01 2f       	mov	r16, r17
     ba2:	0c 0f       	add	r16, r28
     ba4:	60 2f       	mov	r22, r16
     ba6:	8d 2f       	mov	r24, r29
     ba8:	98 df       	rcall	.-208    	; 0xada <gfx_mono_st7565r_get_byte>
     baa:	4f 2d       	mov	r20, r15
     bac:	48 23       	and	r20, r24
     bae:	60 2f       	mov	r22, r16
     bb0:	8d 2f       	mov	r24, r29
     bb2:	74 de       	rcall	.-792    	; 0x89c <gfx_mono_st7565r_put_byte>
     bb4:	c1 50       	subi	r28, 0x01	; 1
     bb6:	a1 f7       	brne	.-24     	; 0xba0 <gfx_mono_generic_draw_horizontal_line+0x80>
     bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bba:	c4 2f       	mov	r28, r20
     bbc:	1f ef       	ldi	r17, 0xFF	; 255
     bbe:	18 0f       	add	r17, r24
     bc0:	01 2f       	mov	r16, r17
     bc2:	0c 0f       	add	r16, r28
     bc4:	60 2f       	mov	r22, r16
     bc6:	8d 2f       	mov	r24, r29
     bc8:	88 df       	rcall	.-240    	; 0xada <gfx_mono_st7565r_get_byte>
     bca:	4f 2d       	mov	r20, r15
     bcc:	48 27       	eor	r20, r24
     bce:	60 2f       	mov	r22, r16
     bd0:	8d 2f       	mov	r24, r29
     bd2:	64 de       	rcall	.-824    	; 0x89c <gfx_mono_st7565r_put_byte>
     bd4:	c1 50       	subi	r28, 0x01	; 1
     bd6:	a1 f7       	brne	.-24     	; 0xbc0 <gfx_mono_generic_draw_horizontal_line+0xa0>
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	08 95       	ret

00000be4 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
	if (height == 0) {
     bee:	22 23       	and	r18, r18
     bf0:	69 f0       	breq	.+26     	; 0xc0c <gfx_mono_generic_draw_filled_rect+0x28>
     bf2:	f4 2e       	mov	r15, r20
     bf4:	18 2f       	mov	r17, r24
     bf6:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     bf8:	df ef       	ldi	r29, 0xFF	; 255
     bfa:	d6 0f       	add	r29, r22
     bfc:	6d 2f       	mov	r22, r29
     bfe:	6c 0f       	add	r22, r28
     c00:	20 2f       	mov	r18, r16
     c02:	4f 2d       	mov	r20, r15
     c04:	81 2f       	mov	r24, r17
     c06:	8c df       	rcall	.-232    	; 0xb20 <gfx_mono_generic_draw_horizontal_line>
     c08:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c0a:	c1 f7       	brne	.-16     	; 0xbfc <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	08 95       	ret

00000c18 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	c8 2f       	mov	r28, r24
     c2e:	e6 2e       	mov	r14, r22
     c30:	b4 2e       	mov	r11, r20
     c32:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c34:	00 e0       	ldi	r16, 0x00	; 0
     c36:	f9 01       	movw	r30, r18
     c38:	24 81       	ldd	r18, Z+4	; 0x04
     c3a:	43 81       	ldd	r20, Z+3	; 0x03
     c3c:	6b 2d       	mov	r22, r11
     c3e:	8e 2d       	mov	r24, r14
     c40:	d1 df       	rcall	.-94     	; 0xbe4 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c42:	f6 01       	movw	r30, r12
     c44:	80 81       	ld	r24, Z
     c46:	81 11       	cpse	r24, r1
     c48:	39 c0       	rjmp	.+114    	; 0xcbc <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c4a:	83 81       	ldd	r24, Z+3	; 0x03
     c4c:	28 2f       	mov	r18, r24
     c4e:	26 95       	lsr	r18
     c50:	26 95       	lsr	r18
     c52:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c54:	87 70       	andi	r24, 0x07	; 7
     c56:	09 f0       	breq	.+2      	; 0xc5a <gfx_mono_draw_char+0x42>
		char_row_size++;
     c58:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c5a:	f6 01       	movw	r30, r12
     c5c:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c5e:	8c 2f       	mov	r24, r28
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	35 81       	ldd	r19, Z+5	; 0x05
     c64:	83 1b       	sub	r24, r19
     c66:	91 09       	sbc	r25, r1
     c68:	2a 9d       	mul	r18, r10
     c6a:	90 01       	movw	r18, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	82 9f       	mul	r24, r18
     c70:	a0 01       	movw	r20, r0
     c72:	83 9f       	mul	r24, r19
     c74:	50 0d       	add	r21, r0
     c76:	92 9f       	mul	r25, r18
     c78:	50 0d       	add	r21, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	01 81       	ldd	r16, Z+1	; 0x01
     c7e:	12 81       	ldd	r17, Z+2	; 0x02
     c80:	04 0f       	add	r16, r20
     c82:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     c84:	f6 01       	movw	r30, r12
     c86:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     c88:	ff 20       	and	r15, r15
     c8a:	a1 f0       	breq	.+40     	; 0xcb4 <gfx_mono_draw_char+0x9c>
     c8c:	d0 e0       	ldi	r29, 0x00	; 0
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
     c90:	8e 2d       	mov	r24, r14
     c92:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     c94:	9c 2f       	mov	r25, r28
     c96:	97 70       	andi	r25, 0x07	; 7
     c98:	21 f4       	brne	.+8      	; 0xca2 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     c9a:	f8 01       	movw	r30, r16
     c9c:	d4 91       	lpm	r29, Z
				glyph_data++;
     c9e:	0f 5f       	subi	r16, 0xFF	; 255
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     ca2:	dd 23       	and	r29, r29
     ca4:	1c f4       	brge	.+6      	; 0xcac <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	6b 2d       	mov	r22, r11
     caa:	e1 de       	rcall	.-574    	; 0xa6e <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     cac:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     cae:	cf 5f       	subi	r28, 0xFF	; 255
     cb0:	fc 12       	cpse	r15, r28
     cb2:	ee cf       	rjmp	.-36     	; 0xc90 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     cb4:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     cb6:	aa 94       	dec	r10
	} while (rows_left > 0);
     cb8:	a1 10       	cpse	r10, r1
     cba:	e4 cf       	rjmp	.-56     	; 0xc84 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	08 95       	ret

00000cd2 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	d6 2e       	mov	r13, r22
     ce2:	04 2f       	mov	r16, r20
     ce4:	79 01       	movw	r14, r18
     ce6:	ec 01       	movw	r28, r24
     ce8:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     cea:	89 91       	ld	r24, Y+
     cec:	8a 30       	cpi	r24, 0x0A	; 10
     cee:	31 f4       	brne	.+12     	; 0xcfc <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     cf0:	f7 01       	movw	r30, r14
     cf2:	84 81       	ldd	r24, Z+4	; 0x04
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     cf8:	1d 2d       	mov	r17, r13
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     cfc:	8d 30       	cpi	r24, 0x0D	; 13
     cfe:	39 f0       	breq	.+14     	; 0xd0e <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d00:	97 01       	movw	r18, r14
     d02:	40 2f       	mov	r20, r16
     d04:	61 2f       	mov	r22, r17
     d06:	88 df       	rcall	.-240    	; 0xc18 <gfx_mono_draw_char>
			x += font->width;
     d08:	f7 01       	movw	r30, r14
     d0a:	83 81       	ldd	r24, Z+3	; 0x03
     d0c:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d0e:	88 81       	ld	r24, Y
     d10:	81 11       	cpse	r24, r1
     d12:	eb cf       	rjmp	.-42     	; 0xcea <gfx_mono_draw_string+0x18>
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	08 95       	ret

00000d24 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d2e:	c6 2f       	mov	r28, r22
     d30:	d0 e0       	ldi	r29, 0x00	; 0
     d32:	de 01       	movw	r26, r28
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <ioport_configure_port_pin+0x18>
     d38:	b5 95       	asr	r27
     d3a:	a7 95       	ror	r26
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <ioport_configure_port_pin+0x14>
     d40:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d42:	50 8b       	std	Z+16, r21	; 0x10
     d44:	2f 5f       	subi	r18, 0xFF	; 255
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d4a:	28 30       	cpi	r18, 0x08	; 8
     d4c:	31 05       	cpc	r19, r1
     d4e:	89 f7       	brne	.-30     	; 0xd32 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d50:	40 ff       	sbrs	r20, 0
     d52:	0a c0       	rjmp	.+20     	; 0xd68 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d54:	41 ff       	sbrs	r20, 1
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d58:	fc 01       	movw	r30, r24
     d5a:	65 83       	std	Z+5, r22	; 0x05
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d5e:	fc 01       	movw	r30, r24
     d60:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d62:	fc 01       	movw	r30, r24
     d64:	61 83       	std	Z+1, r22	; 0x01
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d68:	fc 01       	movw	r30, r24
     d6a:	62 83       	std	Z+2, r22	; 0x02
	}
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     d72:	80 3a       	cpi	r24, 0xA0	; 160
     d74:	28 e0       	ldi	r18, 0x08	; 8
     d76:	92 07       	cpc	r25, r18
     d78:	21 f4       	brne	.+8      	; 0xd82 <usart_spi_init+0x10>
     d7a:	60 e1       	ldi	r22, 0x10	; 16
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	78 cd       	rjmp	.-1296   	; 0x870 <sysclk_enable_module>
     d80:	08 95       	ret
     d82:	80 3b       	cpi	r24, 0xB0	; 176
     d84:	28 e0       	ldi	r18, 0x08	; 8
     d86:	92 07       	cpc	r25, r18
     d88:	21 f4       	brne	.+8      	; 0xd92 <usart_spi_init+0x20>
     d8a:	60 e2       	ldi	r22, 0x20	; 32
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	70 cd       	rjmp	.-1312   	; 0x870 <sysclk_enable_module>
     d90:	08 95       	ret
     d92:	80 3a       	cpi	r24, 0xA0	; 160
     d94:	29 e0       	ldi	r18, 0x09	; 9
     d96:	92 07       	cpc	r25, r18
     d98:	21 f4       	brne	.+8      	; 0xda2 <usart_spi_init+0x30>
     d9a:	60 e1       	ldi	r22, 0x10	; 16
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	68 cd       	rjmp	.-1328   	; 0x870 <sysclk_enable_module>
     da0:	08 95       	ret
     da2:	80 3b       	cpi	r24, 0xB0	; 176
     da4:	29 e0       	ldi	r18, 0x09	; 9
     da6:	92 07       	cpc	r25, r18
     da8:	21 f4       	brne	.+8      	; 0xdb2 <usart_spi_init+0x40>
     daa:	60 e2       	ldi	r22, 0x20	; 32
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	60 cd       	rjmp	.-1344   	; 0x870 <sysclk_enable_module>
     db0:	08 95       	ret
     db2:	80 3a       	cpi	r24, 0xA0	; 160
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	92 07       	cpc	r25, r18
     db8:	21 f4       	brne	.+8      	; 0xdc2 <usart_spi_init+0x50>
     dba:	60 e1       	ldi	r22, 0x10	; 16
     dbc:	85 e0       	ldi	r24, 0x05	; 5
     dbe:	58 cd       	rjmp	.-1360   	; 0x870 <sysclk_enable_module>
     dc0:	08 95       	ret
     dc2:	80 3a       	cpi	r24, 0xA0	; 160
     dc4:	9b 40       	sbci	r25, 0x0B	; 11
     dc6:	19 f4       	brne	.+6      	; 0xdce <usart_spi_init+0x5c>
     dc8:	60 e1       	ldi	r22, 0x10	; 16
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	51 cd       	rjmp	.-1374   	; 0x870 <sysclk_enable_module>
     dce:	08 95       	ret

00000dd0 <usart_spi_setup_device>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <usart_spi_setup_device+0xa>
     dda:	00 d0       	rcall	.+0      	; 0xddc <usart_spi_setup_device+0xc>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	09 83       	std	Y+1, r16	; 0x01
     de2:	1a 83       	std	Y+2, r17	; 0x02
     de4:	2b 83       	std	Y+3, r18	; 0x03
     de6:	3c 83       	std	Y+4, r19	; 0x04
     de8:	4d 83       	std	Y+5, r20	; 0x05
     dea:	1e 82       	std	Y+6, r1	; 0x06
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	02 d1       	rcall	.+516    	; 0xff8 <usart_init_spi>
     df4:	26 96       	adiw	r28, 0x06	; 6
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e04:	fb 01       	movw	r30, r22
     e06:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e08:	e8 2f       	mov	r30, r24
     e0a:	e6 95       	lsr	r30
     e0c:	e6 95       	lsr	r30
     e0e:	e6 95       	lsr	r30
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	e4 9f       	mul	r30, r20
     e14:	f0 01       	movw	r30, r0
     e16:	11 24       	eor	r1, r1
     e18:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e1a:	87 70       	andi	r24, 0x07	; 7
     e1c:	21 e0       	ldi	r18, 0x01	; 1
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	a9 01       	movw	r20, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <usart_spi_select_device+0x24>
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	8a 95       	dec	r24
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e2c:	46 83       	std	Z+6, r20	; 0x06
     e2e:	08 95       	ret

00000e30 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e30:	fb 01       	movw	r30, r22
     e32:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e34:	e8 2f       	mov	r30, r24
     e36:	e6 95       	lsr	r30
     e38:	e6 95       	lsr	r30
     e3a:	e6 95       	lsr	r30
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	e4 9f       	mul	r30, r20
     e40:	f0 01       	movw	r30, r0
     e42:	11 24       	eor	r1, r1
     e44:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e46:	87 70       	andi	r24, 0x07	; 7
     e48:	21 e0       	ldi	r18, 0x01	; 1
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	a9 01       	movw	r20, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <usart_spi_deselect_device+0x24>
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	8a 95       	dec	r24
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e58:	45 83       	std	Z+5, r20	; 0x05
     e5a:	08 95       	ret

00000e5c <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e5c:	43 e0       	ldi	r20, 0x03	; 3
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	80 ee       	ldi	r24, 0xE0	; 224
     e64:	97 e0       	ldi	r25, 0x07	; 7
     e66:	5e df       	rcall	.-324    	; 0xd24 <ioport_configure_port_pin>
     e68:	43 e0       	ldi	r20, 0x03	; 3
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	62 e0       	ldi	r22, 0x02	; 2
     e6e:	80 ee       	ldi	r24, 0xE0	; 224
     e70:	97 e0       	ldi	r25, 0x07	; 7
     e72:	58 df       	rcall	.-336    	; 0xd24 <ioport_configure_port_pin>
     e74:	43 e0       	ldi	r20, 0x03	; 3
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e1       	ldi	r22, 0x10	; 16
     e7a:	80 e6       	ldi	r24, 0x60	; 96
     e7c:	96 e0       	ldi	r25, 0x06	; 6
     e7e:	52 df       	rcall	.-348    	; 0xd24 <ioport_configure_port_pin>
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	50 e4       	ldi	r21, 0x40	; 64
     e84:	60 e2       	ldi	r22, 0x20	; 32
     e86:	80 e6       	ldi	r24, 0x60	; 96
     e88:	96 e0       	ldi	r25, 0x06	; 6
     e8a:	4c df       	rcall	.-360    	; 0xd24 <ioport_configure_port_pin>
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	5b e1       	ldi	r21, 0x1B	; 27
     e90:	60 e2       	ldi	r22, 0x20	; 32
     e92:	80 e8       	ldi	r24, 0x80	; 128
     e94:	96 e0       	ldi	r25, 0x06	; 6
     e96:	46 df       	rcall	.-372    	; 0xd24 <ioport_configure_port_pin>
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	5b e1       	ldi	r21, 0x1B	; 27
     e9c:	62 e0       	ldi	r22, 0x02	; 2
     e9e:	80 ea       	ldi	r24, 0xA0	; 160
     ea0:	96 e0       	ldi	r25, 0x06	; 6
     ea2:	40 df       	rcall	.-384    	; 0xd24 <ioport_configure_port_pin>
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	5b e1       	ldi	r21, 0x1B	; 27
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	80 ea       	ldi	r24, 0xA0	; 160
     eac:	96 e0       	ldi	r25, 0x06	; 6
     eae:	3a df       	rcall	.-396    	; 0xd24 <ioport_configure_port_pin>
     eb0:	43 e0       	ldi	r20, 0x03	; 3
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	80 e6       	ldi	r24, 0x60	; 96
     eb8:	96 e0       	ldi	r25, 0x06	; 6
     eba:	34 df       	rcall	.-408    	; 0xd24 <ioport_configure_port_pin>
     ebc:	43 e0       	ldi	r20, 0x03	; 3
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	68 e0       	ldi	r22, 0x08	; 8
     ec2:	80 e6       	ldi	r24, 0x60	; 96
     ec4:	96 e0       	ldi	r25, 0x06	; 6
     ec6:	2e df       	rcall	.-420    	; 0xd24 <ioport_configure_port_pin>
     ec8:	43 e0       	ldi	r20, 0x03	; 3
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	68 e0       	ldi	r22, 0x08	; 8
     ece:	80 ea       	ldi	r24, 0xA0	; 160
     ed0:	96 e0       	ldi	r25, 0x06	; 6
     ed2:	28 df       	rcall	.-432    	; 0xd24 <ioport_configure_port_pin>
     ed4:	43 e0       	ldi	r20, 0x03	; 3
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	80 e6       	ldi	r24, 0x60	; 96
     edc:	96 e0       	ldi	r25, 0x06	; 6
     ede:	22 df       	rcall	.-444    	; 0xd24 <ioport_configure_port_pin>
     ee0:	43 e0       	ldi	r20, 0x03	; 3
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	68 e0       	ldi	r22, 0x08	; 8
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	96 e0       	ldi	r25, 0x06	; 6
     eea:	1c df       	rcall	.-456    	; 0xd24 <ioport_configure_port_pin>
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	60 e1       	ldi	r22, 0x10	; 16
     ef2:	80 e8       	ldi	r24, 0x80	; 128
     ef4:	96 e0       	ldi	r25, 0x06	; 6
     ef6:	16 df       	rcall	.-468    	; 0xd24 <ioport_configure_port_pin>
     ef8:	43 e0       	ldi	r20, 0x03	; 3
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	80 e6       	ldi	r24, 0x60	; 96
     f00:	96 e0       	ldi	r25, 0x06	; 6
     f02:	10 df       	rcall	.-480    	; 0xd24 <ioport_configure_port_pin>
     f04:	43 e0       	ldi	r20, 0x03	; 3
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	68 e0       	ldi	r22, 0x08	; 8
     f0a:	80 e6       	ldi	r24, 0x60	; 96
     f0c:	96 e0       	ldi	r25, 0x06	; 6
     f0e:	0a df       	rcall	.-492    	; 0xd24 <ioport_configure_port_pin>
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	80 e6       	ldi	r24, 0x60	; 96
     f18:	96 e0       	ldi	r25, 0x06	; 6
     f1a:	04 df       	rcall	.-504    	; 0xd24 <ioport_configure_port_pin>
     f1c:	43 e0       	ldi	r20, 0x03	; 3
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	60 e1       	ldi	r22, 0x10	; 16
     f22:	80 ea       	ldi	r24, 0xA0	; 160
     f24:	96 e0       	ldi	r25, 0x06	; 6
     f26:	fe de       	rcall	.-516    	; 0xd24 <ioport_configure_port_pin>
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	96 e0       	ldi	r25, 0x06	; 6
     f32:	f8 de       	rcall	.-528    	; 0xd24 <ioport_configure_port_pin>
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	64 e0       	ldi	r22, 0x04	; 4
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	96 e0       	ldi	r25, 0x06	; 6
     f3e:	f2 de       	rcall	.-540    	; 0xd24 <ioport_configure_port_pin>
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	96 e0       	ldi	r25, 0x06	; 6
     f4a:	ec de       	rcall	.-552    	; 0xd24 <ioport_configure_port_pin>
     f4c:	43 e0       	ldi	r20, 0x03	; 3
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	68 e0       	ldi	r22, 0x08	; 8
     f52:	80 e4       	ldi	r24, 0x40	; 64
     f54:	96 e0       	ldi	r25, 0x06	; 6
     f56:	e6 de       	rcall	.-564    	; 0xd24 <ioport_configure_port_pin>
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	64 e0       	ldi	r22, 0x04	; 4
     f5e:	80 e4       	ldi	r24, 0x40	; 64
     f60:	96 e0       	ldi	r25, 0x06	; 6
     f62:	e0 de       	rcall	.-576    	; 0xd24 <ioport_configure_port_pin>
     f64:	43 e0       	ldi	r20, 0x03	; 3
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	68 e0       	ldi	r22, 0x08	; 8
     f6a:	80 e6       	ldi	r24, 0x60	; 96
     f6c:	96 e0       	ldi	r25, 0x06	; 6
     f6e:	da de       	rcall	.-588    	; 0xd24 <ioport_configure_port_pin>
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	64 e0       	ldi	r22, 0x04	; 4
     f76:	80 e6       	ldi	r24, 0x60	; 96
     f78:	96 e0       	ldi	r25, 0x06	; 6
     f7a:	d4 de       	rcall	.-600    	; 0xd24 <ioport_configure_port_pin>
     f7c:	43 e0       	ldi	r20, 0x03	; 3
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	68 e0       	ldi	r22, 0x08	; 8
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	96 e0       	ldi	r25, 0x06	; 6
     f86:	ce de       	rcall	.-612    	; 0xd24 <ioport_configure_port_pin>
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	64 e0       	ldi	r22, 0x04	; 4
     f8e:	80 e8       	ldi	r24, 0x80	; 128
     f90:	96 e0       	ldi	r25, 0x06	; 6
     f92:	c8 ce       	rjmp	.-624    	; 0xd24 <ioport_configure_port_pin>
     f94:	08 95       	ret

00000f96 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     fa8:	d9 01       	movw	r26, r18
     faa:	c8 01       	movw	r24, r16
     fac:	b6 95       	lsr	r27
     fae:	a7 95       	ror	r26
     fb0:	97 95       	ror	r25
     fb2:	87 95       	ror	r24
     fb4:	48 17       	cp	r20, r24
     fb6:	59 07       	cpc	r21, r25
     fb8:	6a 07       	cpc	r22, r26
     fba:	7b 07       	cpc	r23, r27
     fbc:	70 f4       	brcc	.+28     	; 0xfda <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     fbe:	6a 01       	movw	r12, r20
     fc0:	7b 01       	movw	r14, r22
     fc2:	cc 0c       	add	r12, r12
     fc4:	dd 1c       	adc	r13, r13
     fc6:	ee 1c       	adc	r14, r14
     fc8:	ff 1c       	adc	r15, r15
     fca:	c9 01       	movw	r24, r18
     fcc:	b8 01       	movw	r22, r16
     fce:	a7 01       	movw	r20, r14
     fd0:	96 01       	movw	r18, r12
     fd2:	aa d3       	rcall	.+1876   	; 0x1728 <__udivmodsi4>
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	31 09       	sbc	r19, r1
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     fde:	83 2f       	mov	r24, r19
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     fe4:	2e 83       	std	Y+6, r18	; 0x06
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	08 95       	ret

00000ff8 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	1f 92       	push	r1
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	7c 01       	movw	r14, r24
    100e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f4       	brne	.+2      	; 0x1016 <usart_init_spi+0x1e>
    1014:	b2 c1       	rjmp	.+868    	; 0x137a <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1016:	80 3c       	cpi	r24, 0xC0	; 192
    1018:	91 05       	cpc	r25, r1
    101a:	21 f4       	brne	.+8      	; 0x1024 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    101c:	60 e1       	ldi	r22, 0x10	; 16
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	27 dc       	rcall	.-1970   	; 0x870 <sysclk_enable_module>
    1022:	ab c1       	rjmp	.+854    	; 0x137a <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	e8 16       	cp	r14, r24
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	f8 06       	cpc	r15, r24
    102c:	21 f4       	brne	.+8      	; 0x1036 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	1e dc       	rcall	.-1988   	; 0x870 <sysclk_enable_module>
    1034:	a2 c1       	rjmp	.+836    	; 0x137a <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1036:	e1 14       	cp	r14, r1
    1038:	e1 e0       	ldi	r30, 0x01	; 1
    103a:	fe 06       	cpc	r15, r30
    103c:	21 f4       	brne	.+8      	; 0x1046 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	16 dc       	rcall	.-2004   	; 0x870 <sysclk_enable_module>
    1044:	9a c1       	rjmp	.+820    	; 0x137a <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1046:	f0 e8       	ldi	r31, 0x80	; 128
    1048:	ef 16       	cp	r14, r31
    104a:	f3 e0       	ldi	r31, 0x03	; 3
    104c:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    104e:	21 f4       	brne	.+8      	; 0x1058 <usart_init_spi+0x60>
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0d dc       	rcall	.-2022   	; 0x870 <sysclk_enable_module>
    1056:	91 c1       	rjmp	.+802    	; 0x137a <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1058:	30 e9       	ldi	r19, 0x90	; 144
    105a:	e3 16       	cp	r14, r19
    105c:	33 e0       	ldi	r19, 0x03	; 3
    105e:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1060:	21 f4       	brne	.+8      	; 0x106a <usart_init_spi+0x72>
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	04 dc       	rcall	.-2040   	; 0x870 <sysclk_enable_module>
    1068:	88 c1       	rjmp	.+784    	; 0x137a <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    106a:	e1 14       	cp	r14, r1
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1070:	21 f4       	brne	.+8      	; 0x107a <usart_init_spi+0x82>
    1072:	62 e0       	ldi	r22, 0x02	; 2
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	fc db       	rcall	.-2056   	; 0x870 <sysclk_enable_module>
    1078:	80 c1       	rjmp	.+768    	; 0x137a <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    107a:	e0 e4       	ldi	r30, 0x40	; 64
    107c:	ee 16       	cp	r14, r30
    107e:	e2 e0       	ldi	r30, 0x02	; 2
    1080:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1082:	21 f4       	brne	.+8      	; 0x108c <usart_init_spi+0x94>
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	f3 db       	rcall	.-2074   	; 0x870 <sysclk_enable_module>
    108a:	77 c1       	rjmp	.+750    	; 0x137a <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    108c:	f0 e2       	ldi	r31, 0x20	; 32
    108e:	ef 16       	cp	r14, r31
    1090:	f3 e0       	ldi	r31, 0x03	; 3
    1092:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1094:	21 f4       	brne	.+8      	; 0x109e <usart_init_spi+0xa6>
    1096:	64 e0       	ldi	r22, 0x04	; 4
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	ea db       	rcall	.-2092   	; 0x870 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    109c:	6e c1       	rjmp	.+732    	; 0x137a <usart_init_spi+0x382>
    109e:	e1 14       	cp	r14, r1
    10a0:	38 e0       	ldi	r19, 0x08	; 8
    10a2:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10a4:	21 f4       	brne	.+8      	; 0x10ae <usart_init_spi+0xb6>
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	e2 db       	rcall	.-2108   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10ac:	66 c1       	rjmp	.+716    	; 0x137a <usart_init_spi+0x382>
    10ae:	e1 14       	cp	r14, r1
    10b0:	89 e0       	ldi	r24, 0x09	; 9
    10b2:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10b4:	21 f4       	brne	.+8      	; 0x10be <usart_init_spi+0xc6>
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	84 e0       	ldi	r24, 0x04	; 4
    10ba:	da db       	rcall	.-2124   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10bc:	5e c1       	rjmp	.+700    	; 0x137a <usart_init_spi+0x382>
    10be:	e1 14       	cp	r14, r1
    10c0:	ea e0       	ldi	r30, 0x0A	; 10
    10c2:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10c4:	21 f4       	brne	.+8      	; 0x10ce <usart_init_spi+0xd6>
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	85 e0       	ldi	r24, 0x05	; 5
    10ca:	d2 db       	rcall	.-2140   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    10cc:	56 c1       	rjmp	.+684    	; 0x137a <usart_init_spi+0x382>
    10ce:	e1 14       	cp	r14, r1
    10d0:	fb e0       	ldi	r31, 0x0B	; 11
    10d2:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    10d4:	21 f4       	brne	.+8      	; 0x10de <usart_init_spi+0xe6>
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	86 e0       	ldi	r24, 0x06	; 6
    10da:	ca db       	rcall	.-2156   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    10dc:	4e c1       	rjmp	.+668    	; 0x137a <usart_init_spi+0x382>
    10de:	30 e4       	ldi	r19, 0x40	; 64
    10e0:	e3 16       	cp	r14, r19
    10e2:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    10e4:	f3 06       	cpc	r15, r19
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <usart_init_spi+0xf8>
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	c1 db       	rcall	.-2174   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    10ee:	45 c1       	rjmp	.+650    	; 0x137a <usart_init_spi+0x382>
    10f0:	80 e4       	ldi	r24, 0x40	; 64
    10f2:	e8 16       	cp	r14, r24
    10f4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    10f6:	f8 06       	cpc	r15, r24
    10f8:	21 f4       	brne	.+8      	; 0x1102 <usart_init_spi+0x10a>
    10fa:	62 e0       	ldi	r22, 0x02	; 2
    10fc:	84 e0       	ldi	r24, 0x04	; 4
    10fe:	b8 db       	rcall	.-2192   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1100:	3c c1       	rjmp	.+632    	; 0x137a <usart_init_spi+0x382>
    1102:	e0 e4       	ldi	r30, 0x40	; 64
    1104:	ee 16       	cp	r14, r30
    1106:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1108:	fe 06       	cpc	r15, r30
    110a:	21 f4       	brne	.+8      	; 0x1114 <usart_init_spi+0x11c>
    110c:	62 e0       	ldi	r22, 0x02	; 2
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	af db       	rcall	.-2210   	; 0x870 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1112:	33 c1       	rjmp	.+614    	; 0x137a <usart_init_spi+0x382>
    1114:	f0 e9       	ldi	r31, 0x90	; 144
    1116:	ef 16       	cp	r14, r31
    1118:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    111a:	ff 06       	cpc	r15, r31
    111c:	21 f4       	brne	.+8      	; 0x1126 <usart_init_spi+0x12e>
    111e:	64 e0       	ldi	r22, 0x04	; 4
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	a6 db       	rcall	.-2228   	; 0x870 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1124:	2a c1       	rjmp	.+596    	; 0x137a <usart_init_spi+0x382>
    1126:	30 e9       	ldi	r19, 0x90	; 144
    1128:	e3 16       	cp	r14, r19
    112a:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    112c:	f3 06       	cpc	r15, r19
    112e:	21 f4       	brne	.+8      	; 0x1138 <usart_init_spi+0x140>
    1130:	64 e0       	ldi	r22, 0x04	; 4
    1132:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1134:	9d db       	rcall	.-2246   	; 0x870 <sysclk_enable_module>
    1136:	21 c1       	rjmp	.+578    	; 0x137a <usart_init_spi+0x382>
    1138:	80 e9       	ldi	r24, 0x90	; 144
    113a:	e8 16       	cp	r14, r24
    113c:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    113e:	f8 06       	cpc	r15, r24
    1140:	21 f4       	brne	.+8      	; 0x114a <usart_init_spi+0x152>
    1142:	64 e0       	ldi	r22, 0x04	; 4
    1144:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1146:	94 db       	rcall	.-2264   	; 0x870 <sysclk_enable_module>
    1148:	18 c1       	rjmp	.+560    	; 0x137a <usart_init_spi+0x382>
    114a:	e0 e9       	ldi	r30, 0x90	; 144
    114c:	ee 16       	cp	r14, r30
    114e:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1150:	fe 06       	cpc	r15, r30
    1152:	21 f4       	brne	.+8      	; 0x115c <usart_init_spi+0x164>
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1158:	8b db       	rcall	.-2282   	; 0x870 <sysclk_enable_module>
    115a:	0f c1       	rjmp	.+542    	; 0x137a <usart_init_spi+0x382>
    115c:	f0 ec       	ldi	r31, 0xC0	; 192
    115e:	ef 16       	cp	r14, r31
    1160:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1162:	ff 06       	cpc	r15, r31
    1164:	21 f4       	brne	.+8      	; 0x116e <usart_init_spi+0x176>
    1166:	68 e0       	ldi	r22, 0x08	; 8
    1168:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    116a:	82 db       	rcall	.-2300   	; 0x870 <sysclk_enable_module>
    116c:	06 c1       	rjmp	.+524    	; 0x137a <usart_init_spi+0x382>
    116e:	30 ec       	ldi	r19, 0xC0	; 192
    1170:	e3 16       	cp	r14, r19
    1172:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1174:	f3 06       	cpc	r15, r19
    1176:	21 f4       	brne	.+8      	; 0x1180 <usart_init_spi+0x188>
    1178:	68 e0       	ldi	r22, 0x08	; 8
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	79 db       	rcall	.-2318   	; 0x870 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    117e:	fd c0       	rjmp	.+506    	; 0x137a <usart_init_spi+0x382>
    1180:	80 ea       	ldi	r24, 0xA0	; 160
    1182:	e8 16       	cp	r14, r24
    1184:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1186:	f8 06       	cpc	r15, r24
    1188:	61 f4       	brne	.+24     	; 0x11a2 <usart_init_spi+0x1aa>
    118a:	60 e1       	ldi	r22, 0x10	; 16
    118c:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    118e:	70 db       	rcall	.-2336   	; 0x870 <sysclk_enable_module>
    1190:	e0 ea       	ldi	r30, 0xA0	; 160
    1192:	f8 e0       	ldi	r31, 0x08	; 8
    1194:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1196:	8f 7e       	andi	r24, 0xEF	; 239
    1198:	84 83       	std	Z+4, r24	; 0x04
    119a:	f8 01       	movw	r30, r16
    119c:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    119e:	22 50       	subi	r18, 0x02	; 2
    11a0:	4c c0       	rjmp	.+152    	; 0x123a <usart_init_spi+0x242>
    11a2:	f0 ea       	ldi	r31, 0xA0	; 160
    11a4:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11a6:	f9 e0       	ldi	r31, 0x09	; 9
    11a8:	ff 06       	cpc	r15, r31
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <usart_init_spi+0x1bc>
    11ac:	60 e1       	ldi	r22, 0x10	; 16
    11ae:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11b0:	5f db       	rcall	.-2370   	; 0x870 <sysclk_enable_module>
    11b2:	e3 c0       	rjmp	.+454    	; 0x137a <usart_init_spi+0x382>
    11b4:	30 ea       	ldi	r19, 0xA0	; 160
    11b6:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11b8:	3a e0       	ldi	r19, 0x0A	; 10
    11ba:	f3 06       	cpc	r15, r19
    11bc:	21 f4       	brne	.+8      	; 0x11c6 <usart_init_spi+0x1ce>
    11be:	60 e1       	ldi	r22, 0x10	; 16
    11c0:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11c2:	56 db       	rcall	.-2388   	; 0x870 <sysclk_enable_module>
    11c4:	da c0       	rjmp	.+436    	; 0x137a <usart_init_spi+0x382>
    11c6:	80 ea       	ldi	r24, 0xA0	; 160
    11c8:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    11ca:	8b e0       	ldi	r24, 0x0B	; 11
    11cc:	f8 06       	cpc	r15, r24
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <usart_init_spi+0x1e0>
    11d0:	60 e1       	ldi	r22, 0x10	; 16
    11d2:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11d4:	4d db       	rcall	.-2406   	; 0x870 <sysclk_enable_module>
    11d6:	d1 c0       	rjmp	.+418    	; 0x137a <usart_init_spi+0x382>
    11d8:	e0 eb       	ldi	r30, 0xB0	; 176
    11da:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11dc:	e8 e0       	ldi	r30, 0x08	; 8
    11de:	fe 06       	cpc	r15, r30
    11e0:	21 f4       	brne	.+8      	; 0x11ea <usart_init_spi+0x1f2>
    11e2:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	44 db       	rcall	.-2424   	; 0x870 <sysclk_enable_module>
    11e8:	c8 c0       	rjmp	.+400    	; 0x137a <usart_init_spi+0x382>
    11ea:	f0 eb       	ldi	r31, 0xB0	; 176
    11ec:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    11ee:	f9 e0       	ldi	r31, 0x09	; 9
    11f0:	ff 06       	cpc	r15, r31
    11f2:	21 f4       	brne	.+8      	; 0x11fc <usart_init_spi+0x204>
    11f4:	60 e2       	ldi	r22, 0x20	; 32
    11f6:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    11f8:	3b db       	rcall	.-2442   	; 0x870 <sysclk_enable_module>
    11fa:	bf c0       	rjmp	.+382    	; 0x137a <usart_init_spi+0x382>
    11fc:	30 e8       	ldi	r19, 0x80	; 128
    11fe:	e3 16       	cp	r14, r19
    1200:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1202:	f3 06       	cpc	r15, r19
    1204:	21 f4       	brne	.+8      	; 0x120e <usart_init_spi+0x216>
    1206:	60 e4       	ldi	r22, 0x40	; 64
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	32 db       	rcall	.-2460   	; 0x870 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    120c:	b6 c0       	rjmp	.+364    	; 0x137a <usart_init_spi+0x382>
    120e:	80 ea       	ldi	r24, 0xA0	; 160
    1210:	e8 16       	cp	r14, r24
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1216:	21 f4       	brne	.+8      	; 0x1220 <usart_init_spi+0x228>
    1218:	60 e4       	ldi	r22, 0x40	; 64
    121a:	85 e0       	ldi	r24, 0x05	; 5
    121c:	29 db       	rcall	.-2478   	; 0x870 <sysclk_enable_module>
    121e:	ad c0       	rjmp	.+346    	; 0x137a <usart_init_spi+0x382>
    1220:	f7 01       	movw	r30, r14
    1222:	84 81       	ldd	r24, Z+4	; 0x04
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	84 83       	std	Z+4, r24	; 0x04
    1228:	fb 01       	movw	r30, r22
    122a:	24 81       	ldd	r18, Z+4	; 0x04
    122c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    122e:	c7 01       	movw	r24, r14
    1230:	f0 ea       	ldi	r31, 0xA0	; 160
    1232:	ef 16       	cp	r14, r31
    1234:	f8 e0       	ldi	r31, 0x08	; 8
    1236:	ff 06       	cpc	r15, r31
    1238:	49 f4       	brne	.+18     	; 0x124c <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    123a:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    123e:	84 fd       	sbrc	r24, 4
    1240:	a5 c0       	rjmp	.+330    	; 0x138c <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1242:	0f 2e       	mov	r0, r31
    1244:	f1 e1       	ldi	r31, 0x11	; 17
    1246:	df 2e       	mov	r13, r31
    1248:	f0 2d       	mov	r31, r0
    124a:	a4 c0       	rjmp	.+328    	; 0x1394 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    124c:	80 3b       	cpi	r24, 0xB0	; 176
    124e:	38 e0       	ldi	r19, 0x08	; 8
    1250:	93 07       	cpc	r25, r19
    1252:	91 f0       	breq	.+36     	; 0x1278 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1254:	80 3a       	cpi	r24, 0xA0	; 160
    1256:	e9 e0       	ldi	r30, 0x09	; 9
    1258:	9e 07       	cpc	r25, r30
    125a:	49 f4       	brne	.+18     	; 0x126e <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    125c:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1260:	34 fd       	sbrc	r19, 4
    1262:	9b c0       	rjmp	.+310    	; 0x139a <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1264:	0f 2e       	mov	r0, r31
    1266:	f9 e1       	ldi	r31, 0x19	; 25
    1268:	df 2e       	mov	r13, r31
    126a:	f0 2d       	mov	r31, r0
    126c:	16 c0       	rjmp	.+44     	; 0x129a <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    126e:	80 3b       	cpi	r24, 0xB0	; 176
    1270:	f9 e0       	ldi	r31, 0x09	; 9
    1272:	9f 07       	cpc	r25, r31
    1274:	f1 f0       	breq	.+60     	; 0x12b2 <usart_init_spi+0x2ba>
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1278:	0f 2e       	mov	r0, r31
    127a:	f5 e1       	ldi	r31, 0x15	; 21
    127c:	df 2e       	mov	r13, r31
    127e:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1280:	80 3a       	cpi	r24, 0xA0	; 160
    1282:	3a e0       	ldi	r19, 0x0A	; 10
    1284:	93 07       	cpc	r25, r19
    1286:	49 f4       	brne	.+18     	; 0x129a <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1288:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    128c:	84 fd       	sbrc	r24, 4
    128e:	8a c0       	rjmp	.+276    	; 0x13a4 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1290:	0f 2e       	mov	r0, r31
    1292:	f1 e2       	ldi	r31, 0x21	; 33
    1294:	df 2e       	mov	r13, r31
    1296:	f0 2d       	mov	r31, r0
    1298:	15 c0       	rjmp	.+42     	; 0x12c4 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    129a:	80 3a       	cpi	r24, 0xA0	; 160
    129c:	9b 40       	sbci	r25, 0x0B	; 11
    129e:	91 f4       	brne	.+36     	; 0x12c4 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    12a0:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    12a4:	84 fd       	sbrc	r24, 4
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    12a8:	0f 2e       	mov	r0, r31
    12aa:	f9 e2       	ldi	r31, 0x29	; 41
    12ac:	df 2e       	mov	r13, r31
    12ae:	f0 2d       	mov	r31, r0
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12b2:	0f 2e       	mov	r0, r31
    12b4:	fd e1       	ldi	r31, 0x1D	; 29
    12b6:	df 2e       	mov	r13, r31
    12b8:	f0 2d       	mov	r31, r0
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    12bc:	0f 2e       	mov	r0, r31
    12be:	fd e2       	ldi	r31, 0x2D	; 45
    12c0:	df 2e       	mov	r13, r31
    12c2:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12c4:	ed 2d       	mov	r30, r13
    12c6:	e6 95       	lsr	r30
    12c8:	e6 95       	lsr	r30
    12ca:	e6 95       	lsr	r30
    12cc:	30 e2       	ldi	r19, 0x20	; 32
    12ce:	e3 9f       	mul	r30, r19
    12d0:	f0 01       	movw	r30, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	fa 5f       	subi	r31, 0xFA	; 250
    12d6:	3d 2d       	mov	r19, r13
    12d8:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	03 2e       	mov	r0, r19
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <usart_init_spi+0x2ee>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    12ea:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <usart_init_spi+0x2fc>
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <usart_init_spi+0x2fe>
    12f4:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    12f6:	df 01       	movw	r26, r30
    12f8:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    12fa:	a3 0f       	add	r26, r19
    12fc:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12fe:	9f b7       	in	r25, 0x3f	; 63
    1300:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1302:	f8 94       	cli
	return flags;
    1304:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1306:	2c 91       	ld	r18, X
    1308:	27 70       	andi	r18, 0x07	; 7
    130a:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    130c:	9c 91       	ld	r25, X
    130e:	94 2b       	or	r25, r20
    1310:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1312:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1314:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1316:	f7 01       	movw	r30, r14
    1318:	85 81       	ldd	r24, Z+5	; 0x05
    131a:	80 6c       	ori	r24, 0xC0	; 192
    131c:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    131e:	f8 01       	movw	r30, r16
    1320:	84 81       	ldd	r24, Z+4	; 0x04
    1322:	8d 7f       	andi	r24, 0xFD	; 253
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	29 f4       	brne	.+10     	; 0x1332 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1328:	f7 01       	movw	r30, r14
    132a:	85 81       	ldd	r24, Z+5	; 0x05
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1330:	04 c0       	rjmp	.+8      	; 0x133a <usart_init_spi+0x342>
    1332:	f7 01       	movw	r30, r14
    1334:	85 81       	ldd	r24, Z+5	; 0x05
    1336:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    1338:	85 83       	std	Z+5, r24	; 0x05
    133a:	f8 01       	movw	r30, r16
    133c:	85 81       	ldd	r24, Z+5	; 0x05
    133e:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1340:	29 f0       	breq	.+10     	; 0x134c <usart_init_spi+0x354>
    1342:	f7 01       	movw	r30, r14
    1344:	85 81       	ldd	r24, Z+5	; 0x05
    1346:	84 60       	ori	r24, 0x04	; 4
    1348:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <usart_init_spi+0x35c>
    134c:	f7 01       	movw	r30, r14
    134e:	85 81       	ldd	r24, Z+5	; 0x05
    1350:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1352:	85 83       	std	Z+5, r24	; 0x05
    1354:	f8 01       	movw	r30, r16
    1356:	40 81       	ld	r20, Z
    1358:	51 81       	ldd	r21, Z+1	; 0x01
    135a:	62 81       	ldd	r22, Z+2	; 0x02
    135c:	73 81       	ldd	r23, Z+3	; 0x03
    135e:	00 e8       	ldi	r16, 0x80	; 128
    1360:	14 e8       	ldi	r17, 0x84	; 132
    1362:	2e e1       	ldi	r18, 0x1E	; 30
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	c7 01       	movw	r24, r14
    1368:	16 de       	rcall	.-980    	; 0xf96 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    136a:	f7 01       	movw	r30, r14
    136c:	84 81       	ldd	r24, Z+4	; 0x04
    136e:	88 60       	ori	r24, 0x08	; 8
    1370:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	80 61       	ori	r24, 0x10	; 16
    1376:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1378:	1a c0       	rjmp	.+52     	; 0x13ae <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    137a:	f7 01       	movw	r30, r14
    137c:	84 81       	ldd	r24, Z+4	; 0x04
    137e:	8f 7e       	andi	r24, 0xEF	; 239
    1380:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1382:	f8 01       	movw	r30, r16
    1384:	24 81       	ldd	r18, Z+4	; 0x04
    1386:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1388:	c7 01       	movw	r24, r14
    138a:	60 cf       	rjmp	.-320    	; 0x124c <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    138c:	0f 2e       	mov	r0, r31
    138e:	f5 e1       	ldi	r31, 0x15	; 21
    1390:	df 2e       	mov	r13, r31
    1392:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1394:	80 ea       	ldi	r24, 0xA0	; 160
    1396:	98 e0       	ldi	r25, 0x08	; 8
    1398:	6a cf       	rjmp	.-300    	; 0x126e <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    139a:	0f 2e       	mov	r0, r31
    139c:	fd e1       	ldi	r31, 0x1D	; 29
    139e:	df 2e       	mov	r13, r31
    13a0:	f0 2d       	mov	r31, r0
    13a2:	7b cf       	rjmp	.-266    	; 0x129a <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    13a4:	0f 2e       	mov	r0, r31
    13a6:	f5 e2       	ldi	r31, 0x25	; 37
    13a8:	df 2e       	mov	r13, r31
    13aa:	f0 2d       	mov	r31, r0
    13ac:	8b cf       	rjmp	.-234    	; 0x12c4 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	08 95       	ret

000013c0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    13c2:	61 50       	subi	r22, 0x01	; 1
    13c4:	71 09       	sbc	r23, r1
    13c6:	81 09       	sbc	r24, r1
    13c8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    13ca:	61 15       	cp	r22, r1
    13cc:	71 05       	cpc	r23, r1
    13ce:	81 05       	cpc	r24, r1
    13d0:	91 05       	cpc	r25, r1
    13d2:	b9 f7       	brne	.-18     	; 0x13c2 <__portable_avr_delay_cycles+0x2>
    13d4:	08 95       	ret

000013d6 <PWM_Init>:
/* Initiate Single Slope PWM                                            */
/************************************************************************/
void PWM_Init(void)
{
	/* Set output for Buzzer */
	PORTC.DIR |= PIN0_bm;
    13d6:	e0 e4       	ldi	r30, 0x40	; 64
    13d8:	f6 e0       	ldi	r31, 0x06	; 6
    13da:	80 81       	ld	r24, Z
    13dc:	81 60       	ori	r24, 0x01	; 1
    13de:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm; //(PIN2_bm) | (PIN0_bm);
    13e0:	e0 e0       	ldi	r30, 0x00	; 0
    13e2:	f8 e0       	ldi	r31, 0x08	; 8
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    13e8:	86 e1       	ldi	r24, 0x16	; 22
    13ea:	81 83       	std	Z+1, r24	; 0x01

	/* Set Period */
	TCC0.PER = 1000;
    13ec:	88 ee       	ldi	r24, 0xE8	; 232
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	86 a3       	std	Z+38, r24	; 0x26
    13f2:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value*/
	TCC0.CCA = 0;
    13f4:	10 a6       	std	Z+40, r1	; 0x28
    13f6:	11 a6       	std	Z+41, r1	; 0x29
    13f8:	08 95       	ret

000013fa <reset_actuators>:
/* Resets all actuators (buzzer & LED) and counter                      */
/************************************************************************/
void reset_actuators(void)
{
	// Turn off the buzzer
	TCC0.CCA = 0;  
    13fa:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    13fe:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1402:	e0 ee       	ldi	r30, 0xE0	; 224
    1404:	f7 e0       	ldi	r31, 0x07	; 7
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	85 83       	std	Z+5, r24	; 0x05
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	85 83       	std	Z+5, r24	; 0x05
	// Turn off LED
	LED_Off(LED0);
	LED_Off(LED1);
	
	// Reset counter
	counter = 0;  
    140e:	10 92 62 22 	sts	0x2262, r1	; 0x802262 <counter>
    1412:	10 92 63 22 	sts	0x2263, r1	; 0x802263 <counter+0x1>
    1416:	08 95       	ret

00001418 <__vector_104>:
   SW1 toggles the system state (active/inactive)
   SW2 deactivates the actuators if the system is active
*/
/************************************************************************/
ISR(PORTF_INT0_vect)
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	0b b6       	in	r0, 0x3b	; 59
    1424:	0f 92       	push	r0
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
	// Handle SW1 press to toggle system state
	if (!(PORTF.IN & PIN1_bm)) {
    143e:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
    1442:	81 fd       	sbrc	r24, 1
    1444:	3c c0       	rjmp	.+120    	; 0x14be <__vector_104+0xa6>
		system_active = !system_active;
    1446:	90 91 66 22 	lds	r25, 0x2266	; 0x802266 <system_active>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 27       	eor	r24, r25
    144e:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <system_active>
		
		// Reset actuators if the system is inactive
		if (!system_active) {
    1452:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <system_active>
    1456:	81 11       	cpse	r24, r1
    1458:	2d c0       	rjmp	.+90     	; 0x14b4 <__vector_104+0x9c>
			reset_actuators(); 
    145a:	cf df       	rcall	.-98     	; 0x13fa <reset_actuators>
			
			// Ensure alarm is off 
			alarm_active = false;  
    145c:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <alarm_active>
			
			// Update LCD display status
			gfx_mono_draw_string("Sistem Nonaktif", 0, 8, &sysfont); 
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e2       	ldi	r19, 0x20	; 32
    1464:	48 e0       	ldi	r20, 0x08	; 8
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	87 e0       	ldi	r24, 0x07	; 7
    146a:	90 e2       	ldi	r25, 0x20	; 32
    146c:	32 dc       	rcall	.-1948   	; 0xcd2 <gfx_mono_draw_string>
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
    146e:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <counter>
    1472:	90 91 63 22 	lds	r25, 0x2263	; 0x802263 <counter+0x1>
    1476:	9f 93       	push	r25
    1478:	8f 93       	push	r24
    147a:	87 e1       	ldi	r24, 0x17	; 23
    147c:	90 e2       	ldi	r25, 0x20	; 32
    147e:	9f 93       	push	r25
    1480:	8f 93       	push	r24
    1482:	1f 92       	push	r1
    1484:	80 e8       	ldi	r24, 0x80	; 128
    1486:	8f 93       	push	r24
    1488:	87 e6       	ldi	r24, 0x67	; 103
    148a:	92 e2       	ldi	r25, 0x22	; 34
    148c:	9f 93       	push	r25
    148e:	8f 93       	push	r24
    1490:	6d d1       	rcall	.+730    	; 0x176c <snprintf>
			gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e2       	ldi	r19, 0x20	; 32
    1496:	48 e1       	ldi	r20, 0x18	; 24
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	87 e6       	ldi	r24, 0x67	; 103
    149c:	92 e2       	ldi	r25, 0x22	; 34
    149e:	19 dc       	rcall	.-1998   	; 0xcd2 <gfx_mono_draw_string>
			delay_ms(100);
    14a0:	66 e3       	ldi	r22, 0x36	; 54
    14a2:	72 e8       	ldi	r23, 0x82	; 130
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	8b df       	rcall	.-234    	; 0x13c0 <__portable_avr_delay_cycles>
    14aa:	8d b7       	in	r24, 0x3d	; 61
    14ac:	9e b7       	in	r25, 0x3e	; 62
    14ae:	08 96       	adiw	r24, 0x08	; 8
    14b0:	8d bf       	out	0x3d, r24	; 61
    14b2:	9e bf       	out	0x3e, r25	; 62
		}
		delay_ms(100);
    14b4:	66 e3       	ldi	r22, 0x36	; 54
    14b6:	72 e8       	ldi	r23, 0x82	; 130
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	81 df       	rcall	.-254    	; 0x13c0 <__portable_avr_delay_cycles>
    14be:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
	}
	
	// Handle SW2 press to deactivate actuators if system is active
	if (!(PORTF.IN & PIN2_bm)) {
    14c2:	82 fd       	sbrc	r24, 2
    14c4:	0c c0       	rjmp	.+24     	; 0x14de <__vector_104+0xc6>
    14c6:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <system_active>
		if (system_active) {
    14ca:	88 23       	and	r24, r24
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <__vector_104+0xbc>
			alarm_active = false;
    14ce:	10 92 64 22 	sts	0x2264, r1	; 0x802264 <alarm_active>
			reset_actuators();
    14d2:	93 df       	rcall	.-218    	; 0x13fa <reset_actuators>
		}
		delay_ms(100);
    14d4:	66 e3       	ldi	r22, 0x36	; 54
    14d6:	72 e8       	ldi	r23, 0x82	; 130
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	71 df       	rcall	.-286    	; 0x13c0 <__portable_avr_delay_cycles>
    14de:	ff 91       	pop	r31
	}
}
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0b be       	out	0x3b, r0	; 59
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <init_interrupts>:
    1504:	e0 ea       	ldi	r30, 0xA0	; 160
/* Initializes external interrupts for SW1 and SW2                      */
/************************************************************************/
void init_interrupts(void)
{
	// Set PIN1 dan PIN2 as input
	PORTF.DIRCLR = PIN1_bm | PIN2_bm;
    1506:	f6 e0       	ldi	r31, 0x06	; 6
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	82 83       	std	Z+2, r24	; 0x02

	// Configure falling edge detection for both switches
	PORTF.PIN1CTRL = PORT_ISC_FALLING_gc;  // SW1
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	91 8b       	std	Z+17, r25	; 0x11
	PORTF.PIN2CTRL = PORT_ISC_FALLING_gc;  // SW2
    1510:	92 8b       	std	Z+18, r25	; 0x12

	// Enable interrupts for both switches
	PORTF.INT0MASK = PIN1_bm | PIN2_bm;  // Mask interrupt for PIN1 and PIN2
    1512:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;  // Set interrupt level to low
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	81 87       	std	Z+9, r24	; 0x09

	// Enable low-level interrupts
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1518:	e0 ea       	ldi	r30, 0xA0	; 160
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	81 60       	ori	r24, 0x01	; 1
    1520:	82 83       	std	Z+2, r24	; 0x02

	// Enable global interrupts
	cpu_irq_enable();
    1522:	78 94       	sei
    1524:	08 95       	ret

00001526 <init_door_sensor>:
/************************************************************************/
/* Initializes the magnetic door sensor on PORTE PIN0                   */
/************************************************************************/
void init_door_sensor(void)
{
	PORTE.DIRCLR = PIN0_bm;
    1526:	e0 e8       	ldi	r30, 0x80	; 128
    1528:	f6 e0       	ldi	r31, 0x06	; 6
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	82 83       	std	Z+2, r24	; 0x02
	
	// Enable pull-up resistor
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;
    152e:	88 e1       	ldi	r24, 0x18	; 24
    1530:	80 8b       	std	Z+16, r24	; 0x10
    1532:	08 95       	ret

00001534 <set_on_led>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1534:	e0 ee       	ldi	r30, 0xE0	; 224
    1536:	f7 e0       	ldi	r31, 0x07	; 7
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	86 83       	std	Z+6, r24	; 0x06
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	86 83       	std	Z+6, r24	; 0x06
    1540:	08 95       	ret

00001542 <set_flicker_led>:

/************************************************************************/
/* Makes the LEDs blink alternately.                                    */
/************************************************************************/
void set_flicker_led(void)
{
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	c0 ee       	ldi	r28, 0xE0	; 224
    154c:	d7 e0       	ldi	r29, 0x07	; 7
    154e:	01 e0       	ldi	r16, 0x01	; 1
    1550:	0e 83       	std	Y+6, r16	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1552:	12 e0       	ldi	r17, 0x02	; 2
    1554:	1d 83       	std	Y+5, r17	; 0x05
	LED_On(LED0);
	LED_Off(LED1);

	delay_ms(100);
    1556:	66 e3       	ldi	r22, 0x36	; 54
    1558:	72 e8       	ldi	r23, 0x82	; 130
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	30 df       	rcall	.-416    	; 0x13c0 <__portable_avr_delay_cycles>
    1560:	0d 83       	std	Y+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1562:	1e 83       	std	Y+6, r17	; 0x06

	LED_Off(LED0);
	LED_On(LED1);
	
	delay_ms(100);
    1564:	66 e3       	ldi	r22, 0x36	; 54
    1566:	72 e8       	ldi	r23, 0x82	; 130
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	29 df       	rcall	.-430    	; 0x13c0 <__portable_avr_delay_cycles>
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <check_door_sensor>:
/* Checks the status of the door sensor                                 */
/************************************************************************/
void check_door_sensor(void)
{
	// Read sensor state from PORTE PIN0
	bool is_closed = PORTE.IN & PIN0_bm;
    1578:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	// Update door status
	if (is_closed) {
    157c:	80 ff       	sbrs	r24, 0
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <check_door_sensor+0xe>
		door_open = false;
    1580:	10 92 65 22 	sts	0x2265, r1	; 0x802265 <door_open>
    1584:	08 95       	ret
	}
	else{
		door_open = true;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <door_open>
    158c:	08 95       	ret

0000158e <main>:
/* Main function                                                        */
/************************************************************************/
int main(void)
{
	// Initialize  board
	board_init();
    158e:	66 dc       	rcall	.-1844   	; 0xe5c <board_init>

	// Initialize  PWM
	PWM_Init();
    1590:	22 df       	rcall	.-444    	; 0x13d6 <PWM_Init>

	// Initialize  Interrupt
	init_interrupts();
    1592:	b8 df       	rcall	.-144    	; 0x1504 <init_interrupts>
    1594:	2a da       	rcall	.-2988   	; 0x9ea <gfx_mono_st7565r_init>

	// Initialize  LCD
	gfx_mono_init();
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e2       	ldi	r19, 0x20	; 32

	// Enable background lamp LCD
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

	gfx_mono_draw_string("Sisnam+", 0, 0, &sysfont);
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	87 e3       	ldi	r24, 0x37	; 55
    15a6:	90 e2       	ldi	r25, 0x20	; 32
    15a8:	94 db       	rcall	.-2264   	; 0xcd2 <gfx_mono_draw_string>
    15aa:	bd df       	rcall	.-134    	; 0x1526 <init_door_sensor>
	
	// Initialize door sensor
	init_door_sensor();
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e2       	ldi	r19, 0x20	; 32
	
	// Display initial system state
	gfx_mono_draw_string("Sistem Nonaktif", 0, 8, &sysfont);
    15b0:	48 e0       	ldi	r20, 0x08	; 8
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	87 e0       	ldi	r24, 0x07	; 7
    15b6:	90 e2       	ldi	r25, 0x20	; 32
    15b8:	8c db       	rcall	.-2280   	; 0xcd2 <gfx_mono_draw_string>
    15ba:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <counter>
	snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
    15be:	90 91 63 22 	lds	r25, 0x2263	; 0x802263 <counter+0x1>
    15c2:	9f 93       	push	r25
    15c4:	8f 93       	push	r24
    15c6:	87 e1       	ldi	r24, 0x17	; 23
    15c8:	90 e2       	ldi	r25, 0x20	; 32
    15ca:	9f 93       	push	r25
    15cc:	8f 93       	push	r24
    15ce:	1f 92       	push	r1
    15d0:	80 e8       	ldi	r24, 0x80	; 128
    15d2:	8f 93       	push	r24
    15d4:	87 e6       	ldi	r24, 0x67	; 103
    15d6:	92 e2       	ldi	r25, 0x22	; 34
    15d8:	9f 93       	push	r25
    15da:	8f 93       	push	r24
    15dc:	c7 d0       	rcall	.+398    	; 0x176c <snprintf>
    15de:	20 e0       	ldi	r18, 0x00	; 0
	gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    15e0:	30 e2       	ldi	r19, 0x20	; 32
    15e2:	48 e1       	ldi	r20, 0x18	; 24
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	87 e6       	ldi	r24, 0x67	; 103
    15e8:	92 e2       	ldi	r25, 0x22	; 34
    15ea:	73 db       	rcall	.-2330   	; 0xcd2 <gfx_mono_draw_string>
    15ec:	2d b7       	in	r18, 0x3d	; 61
    15ee:	3e b7       	in	r19, 0x3e	; 62
    15f0:	28 5f       	subi	r18, 0xF8	; 248
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	2d bf       	out	0x3d, r18	; 61
    15f6:	3e bf       	out	0x3e, r19	; 62
    15f8:	0f 2e       	mov	r0, r31
    15fa:	f9 e2       	ldi	r31, 0x29	; 41
	// Main loop
	while (true)
	{
		// Check door status
		check_door_sensor();
		snprintf(strbuf, sizeof(strbuf), "Status Pintu: %s", door_open ? "Closed" : "Opened");
    15fc:	af 2e       	mov	r10, r31
    15fe:	f0 e2       	ldi	r31, 0x20	; 32
    1600:	bf 2e       	mov	r11, r31
    1602:	f0 2d       	mov	r31, r0
    1604:	0f 2e       	mov	r0, r31
    1606:	f0 e3       	ldi	r31, 0x30	; 48
    1608:	cf 2e       	mov	r12, r31
    160a:	f0 e2       	ldi	r31, 0x20	; 32
    160c:	df 2e       	mov	r13, r31
    160e:	f0 2d       	mov	r31, r0
    1610:	0f e3       	ldi	r16, 0x3F	; 63
    1612:	10 e2       	ldi	r17, 0x20	; 32
    1614:	68 94       	set
    1616:	33 24       	eor	r3, r3
    1618:	37 f8       	bld	r3, 7
    161a:	c7 e6       	ldi	r28, 0x67	; 103
    161c:	d2 e2       	ldi	r29, 0x22	; 34
    161e:	0f 2e       	mov	r0, r31
    1620:	f7 e1       	ldi	r31, 0x17	; 23
		// Check if system is active
		if (system_active)
		{
			// Update system status on LCD display
			gfx_mono_draw_string("Sistem Aktif   ", 0, 8, &sysfont);
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
    1622:	ef 2e       	mov	r14, r31
    1624:	f0 e2       	ldi	r31, 0x20	; 32
    1626:	ff 2e       	mov	r15, r31
    1628:	f0 2d       	mov	r31, r0
    162a:	81 2c       	mov	r8, r1
    162c:	68 94       	set
					set_on_led();
				}
				// Set high buzzer and LED intensity above 10 seconds
				else
				{
					TCC0.CCA = 1000;
    162e:	99 24       	eor	r9, r9
    1630:	93 f8       	bld	r9, 3
    1632:	0f 2e       	mov	r0, r31
    1634:	f8 ee       	ldi	r31, 0xE8	; 232
    1636:	6f 2e       	mov	r6, r31
    1638:	f3 e0       	ldi	r31, 0x03	; 3
    163a:	7f 2e       	mov	r7, r31
    163c:	f0 2d       	mov	r31, r0
    163e:	0f 2e       	mov	r0, r31
			if (alarm_active){
				
				// Set low buzzer and LED intensity below 10 seconds
				if (counter < 10)
				{
					TCC0.CCA = 800;
    1640:	f0 e2       	ldi	r31, 0x20	; 32
    1642:	4f 2e       	mov	r4, r31
    1644:	f3 e0       	ldi	r31, 0x03	; 3
    1646:	5f 2e       	mov	r5, r31
    1648:	f0 2d       	mov	r31, r0
    164a:	22 24       	eor	r2, r2
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
			gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
			
			// Check if door is opened
			if (!door_open){
				alarm_active = true;				
    164c:	23 94       	inc	r2
    164e:	94 df       	rcall	.-216    	; 0x1578 <check_door_sensor>
	
	// Main loop
	while (true)
	{
		// Check door status
		check_door_sensor();
    1650:	80 91 65 22 	lds	r24, 0x2265	; 0x802265 <door_open>
		snprintf(strbuf, sizeof(strbuf), "Status Pintu: %s", door_open ? "Closed" : "Opened");
    1654:	81 11       	cpse	r24, r1
    1656:	03 c0       	rjmp	.+6      	; 0x165e <main+0xd0>
    1658:	8c 2d       	mov	r24, r12
    165a:	9d 2d       	mov	r25, r13
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <main+0xd4>
    165e:	8a 2d       	mov	r24, r10
    1660:	9b 2d       	mov	r25, r11
    1662:	9f 93       	push	r25
    1664:	8f 93       	push	r24
    1666:	1f 93       	push	r17
    1668:	0f 93       	push	r16
    166a:	1f 92       	push	r1
    166c:	3f 92       	push	r3
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	7c d0       	rcall	.+248    	; 0x176c <snprintf>
    1674:	20 e0       	ldi	r18, 0x00	; 0
		gfx_mono_draw_string(strbuf, 0, 16, &sysfont);
    1676:	30 e2       	ldi	r19, 0x20	; 32
    1678:	40 e1       	ldi	r20, 0x10	; 16
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	ce 01       	movw	r24, r28
    167e:	29 db       	rcall	.-2478   	; 0xcd2 <gfx_mono_draw_string>
    1680:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <system_active>
		
		// Check if system is active
		if (system_active)
    1684:	ed b7       	in	r30, 0x3d	; 61
    1686:	fe b7       	in	r31, 0x3e	; 62
    1688:	38 96       	adiw	r30, 0x08	; 8
    168a:	ed bf       	out	0x3d, r30	; 61
    168c:	fe bf       	out	0x3e, r31	; 62
    168e:	88 23       	and	r24, r24
    1690:	09 f4       	brne	.+2      	; 0x1694 <main+0x106>
    1692:	48 c0       	rjmp	.+144    	; 0x1724 <main+0x196>
    1694:	20 e0       	ldi	r18, 0x00	; 0
		{
			// Update system status on LCD display
			gfx_mono_draw_string("Sistem Aktif   ", 0, 8, &sysfont);
    1696:	30 e2       	ldi	r19, 0x20	; 32
    1698:	48 e0       	ldi	r20, 0x08	; 8
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	80 e5       	ldi	r24, 0x50	; 80
    169e:	90 e2       	ldi	r25, 0x20	; 32
    16a0:	18 db       	rcall	.-2512   	; 0xcd2 <gfx_mono_draw_string>
    16a2:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <counter>
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
    16a6:	90 91 63 22 	lds	r25, 0x2263	; 0x802263 <counter+0x1>
    16aa:	9f 93       	push	r25
    16ac:	8f 93       	push	r24
    16ae:	ff 92       	push	r15
    16b0:	ef 92       	push	r14
    16b2:	1f 92       	push	r1
    16b4:	3f 92       	push	r3
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	58 d0       	rcall	.+176    	; 0x176c <snprintf>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
			gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    16be:	30 e2       	ldi	r19, 0x20	; 32
    16c0:	48 e1       	ldi	r20, 0x18	; 24
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	ce 01       	movw	r24, r28
    16c6:	05 db       	rcall	.-2550   	; 0xcd2 <gfx_mono_draw_string>
    16c8:	80 91 65 22 	lds	r24, 0x2265	; 0x802265 <door_open>
			
			// Check if door is opened
			if (!door_open){
    16cc:	ed b7       	in	r30, 0x3d	; 61
    16ce:	fe b7       	in	r31, 0x3e	; 62
    16d0:	38 96       	adiw	r30, 0x08	; 8
    16d2:	ed bf       	out	0x3d, r30	; 61
    16d4:	fe bf       	out	0x3e, r31	; 62
    16d6:	81 11       	cpse	r24, r1
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <main+0x150>
    16da:	20 92 64 22 	sts	0x2264, r2	; 0x802264 <alarm_active>
				alarm_active = true;				
    16de:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <alarm_active>
			}
			
			// Check if alarm is active
			if (alarm_active){
    16e2:	88 23       	and	r24, r24
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <main+0x15a>
    16e6:	b3 cf       	rjmp	.-154    	; 0x164e <main+0xc0>
				
				// Set low buzzer and LED intensity below 10 seconds
				if (counter < 10)
    16e8:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <counter>
    16ec:	90 91 63 22 	lds	r25, 0x2263	; 0x802263 <counter+0x1>
    16f0:	0a 97       	sbiw	r24, 0x0a	; 10
    16f2:	2c f4       	brge	.+10     	; 0x16fe <main+0x170>
				{
					TCC0.CCA = 800;
    16f4:	f4 01       	movw	r30, r8
    16f6:	40 a6       	std	Z+40, r4	; 0x28
    16f8:	51 a6       	std	Z+41, r5	; 0x29
					set_on_led();
    16fa:	1c df       	rcall	.-456    	; 0x1534 <set_on_led>
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <main+0x178>
    16fe:	f4 01       	movw	r30, r8
				}
				// Set high buzzer and LED intensity above 10 seconds
				else
				{
					TCC0.CCA = 1000;
    1700:	60 a6       	std	Z+40, r6	; 0x28
    1702:	71 a6       	std	Z+41, r7	; 0x29
					set_flicker_led();
    1704:	1e df       	rcall	.-452    	; 0x1542 <set_flicker_led>
				}

				// Increment counter each loop
				counter++;
    1706:	80 91 62 22 	lds	r24, 0x2262	; 0x802262 <counter>
    170a:	90 91 63 22 	lds	r25, 0x2263	; 0x802263 <counter+0x1>
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	80 93 62 22 	sts	0x2262, r24	; 0x802262 <counter>
    1714:	90 93 63 22 	sts	0x2263, r25	; 0x802263 <counter+0x1>
				delay_ms(100);
    1718:	66 e3       	ldi	r22, 0x36	; 54
    171a:	72 e8       	ldi	r23, 0x82	; 130
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	4f de       	rcall	.-866    	; 0x13c0 <__portable_avr_delay_cycles>
    1722:	95 cf       	rjmp	.-214    	; 0x164e <main+0xc0>
    1724:	6a de       	rcall	.-812    	; 0x13fa <reset_actuators>
			}
		}
		// Reset actuators if system is inactive
		else{
			reset_actuators();
    1726:	93 cf       	rjmp	.-218    	; 0x164e <main+0xc0>

00001728 <__udivmodsi4>:
    1728:	a1 e2       	ldi	r26, 0x21	; 33
    172a:	1a 2e       	mov	r1, r26
    172c:	aa 1b       	sub	r26, r26
    172e:	bb 1b       	sub	r27, r27
    1730:	fd 01       	movw	r30, r26
    1732:	0d c0       	rjmp	.+26     	; 0x174e <__udivmodsi4_ep>

00001734 <__udivmodsi4_loop>:
    1734:	aa 1f       	adc	r26, r26
    1736:	bb 1f       	adc	r27, r27
    1738:	ee 1f       	adc	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	a2 17       	cp	r26, r18
    173e:	b3 07       	cpc	r27, r19
    1740:	e4 07       	cpc	r30, r20
    1742:	f5 07       	cpc	r31, r21
    1744:	20 f0       	brcs	.+8      	; 0x174e <__udivmodsi4_ep>
    1746:	a2 1b       	sub	r26, r18
    1748:	b3 0b       	sbc	r27, r19
    174a:	e4 0b       	sbc	r30, r20
    174c:	f5 0b       	sbc	r31, r21

0000174e <__udivmodsi4_ep>:
    174e:	66 1f       	adc	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	1a 94       	dec	r1
    1758:	69 f7       	brne	.-38     	; 0x1734 <__udivmodsi4_loop>
    175a:	60 95       	com	r22
    175c:	70 95       	com	r23
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	9b 01       	movw	r18, r22
    1764:	ac 01       	movw	r20, r24
    1766:	bd 01       	movw	r22, r26
    1768:	cf 01       	movw	r24, r30
    176a:	08 95       	ret

0000176c <snprintf>:
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	2e 97       	sbiw	r28, 0x0e	; 14
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0e 89       	ldd	r16, Y+22	; 0x16
    1780:	1f 89       	ldd	r17, Y+23	; 0x17
    1782:	88 8d       	ldd	r24, Y+24	; 0x18
    1784:	99 8d       	ldd	r25, Y+25	; 0x19
    1786:	26 e0       	ldi	r18, 0x06	; 6
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	09 83       	std	Y+1, r16	; 0x01
    178c:	1a 83       	std	Y+2, r17	; 0x02
    178e:	97 ff       	sbrs	r25, 7
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <snprintf+0x2a>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e8       	ldi	r25, 0x80	; 128
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	ae 01       	movw	r20, r28
    179e:	44 5e       	subi	r20, 0xE4	; 228
    17a0:	5f 4f       	sbci	r21, 0xFF	; 255
    17a2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17a4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	16 d0       	rcall	.+44     	; 0x17d8 <vfprintf>
    17ac:	4d 81       	ldd	r20, Y+5	; 0x05
    17ae:	5e 81       	ldd	r21, Y+6	; 0x06
    17b0:	57 fd       	sbrc	r21, 7
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <snprintf+0x5c>
    17b4:	2f 81       	ldd	r18, Y+7	; 0x07
    17b6:	38 85       	ldd	r19, Y+8	; 0x08
    17b8:	42 17       	cp	r20, r18
    17ba:	53 07       	cpc	r21, r19
    17bc:	0c f4       	brge	.+2      	; 0x17c0 <snprintf+0x54>
    17be:	9a 01       	movw	r18, r20
    17c0:	f8 01       	movw	r30, r16
    17c2:	e2 0f       	add	r30, r18
    17c4:	f3 1f       	adc	r31, r19
    17c6:	10 82       	st	Z, r1
    17c8:	2e 96       	adiw	r28, 0x0e	; 14
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <vfprintf>:
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	2b 97       	sbiw	r28, 0x0b	; 11
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	6c 01       	movw	r12, r24
    1808:	7b 01       	movw	r14, r22
    180a:	8a 01       	movw	r16, r20
    180c:	fc 01       	movw	r30, r24
    180e:	16 82       	std	Z+6, r1	; 0x06
    1810:	17 82       	std	Z+7, r1	; 0x07
    1812:	83 81       	ldd	r24, Z+3	; 0x03
    1814:	81 ff       	sbrs	r24, 1
    1816:	bf c1       	rjmp	.+894    	; 0x1b96 <vfprintf+0x3be>
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	3c 01       	movw	r6, r24
    181e:	f6 01       	movw	r30, r12
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	f7 01       	movw	r30, r14
    1824:	93 fd       	sbrc	r25, 3
    1826:	85 91       	lpm	r24, Z+
    1828:	93 ff       	sbrs	r25, 3
    182a:	81 91       	ld	r24, Z+
    182c:	7f 01       	movw	r14, r30
    182e:	88 23       	and	r24, r24
    1830:	09 f4       	brne	.+2      	; 0x1834 <vfprintf+0x5c>
    1832:	ad c1       	rjmp	.+858    	; 0x1b8e <vfprintf+0x3b6>
    1834:	85 32       	cpi	r24, 0x25	; 37
    1836:	39 f4       	brne	.+14     	; 0x1846 <vfprintf+0x6e>
    1838:	93 fd       	sbrc	r25, 3
    183a:	85 91       	lpm	r24, Z+
    183c:	93 ff       	sbrs	r25, 3
    183e:	81 91       	ld	r24, Z+
    1840:	7f 01       	movw	r14, r30
    1842:	85 32       	cpi	r24, 0x25	; 37
    1844:	21 f4       	brne	.+8      	; 0x184e <vfprintf+0x76>
    1846:	b6 01       	movw	r22, r12
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	d3 d1       	rcall	.+934    	; 0x1bf2 <fputc>
    184c:	e8 cf       	rjmp	.-48     	; 0x181e <vfprintf+0x46>
    184e:	91 2c       	mov	r9, r1
    1850:	21 2c       	mov	r2, r1
    1852:	31 2c       	mov	r3, r1
    1854:	ff e1       	ldi	r31, 0x1F	; 31
    1856:	f3 15       	cp	r31, r3
    1858:	d8 f0       	brcs	.+54     	; 0x1890 <vfprintf+0xb8>
    185a:	8b 32       	cpi	r24, 0x2B	; 43
    185c:	79 f0       	breq	.+30     	; 0x187c <vfprintf+0xa4>
    185e:	38 f4       	brcc	.+14     	; 0x186e <vfprintf+0x96>
    1860:	80 32       	cpi	r24, 0x20	; 32
    1862:	79 f0       	breq	.+30     	; 0x1882 <vfprintf+0xaa>
    1864:	83 32       	cpi	r24, 0x23	; 35
    1866:	a1 f4       	brne	.+40     	; 0x1890 <vfprintf+0xb8>
    1868:	23 2d       	mov	r18, r3
    186a:	20 61       	ori	r18, 0x10	; 16
    186c:	1d c0       	rjmp	.+58     	; 0x18a8 <vfprintf+0xd0>
    186e:	8d 32       	cpi	r24, 0x2D	; 45
    1870:	61 f0       	breq	.+24     	; 0x188a <vfprintf+0xb2>
    1872:	80 33       	cpi	r24, 0x30	; 48
    1874:	69 f4       	brne	.+26     	; 0x1890 <vfprintf+0xb8>
    1876:	23 2d       	mov	r18, r3
    1878:	21 60       	ori	r18, 0x01	; 1
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <vfprintf+0xd0>
    187c:	83 2d       	mov	r24, r3
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	38 2e       	mov	r3, r24
    1882:	e3 2d       	mov	r30, r3
    1884:	e4 60       	ori	r30, 0x04	; 4
    1886:	3e 2e       	mov	r3, r30
    1888:	2a c0       	rjmp	.+84     	; 0x18de <vfprintf+0x106>
    188a:	f3 2d       	mov	r31, r3
    188c:	f8 60       	ori	r31, 0x08	; 8
    188e:	1d c0       	rjmp	.+58     	; 0x18ca <vfprintf+0xf2>
    1890:	37 fc       	sbrc	r3, 7
    1892:	2d c0       	rjmp	.+90     	; 0x18ee <vfprintf+0x116>
    1894:	20 ed       	ldi	r18, 0xD0	; 208
    1896:	28 0f       	add	r18, r24
    1898:	2a 30       	cpi	r18, 0x0A	; 10
    189a:	40 f0       	brcs	.+16     	; 0x18ac <vfprintf+0xd4>
    189c:	8e 32       	cpi	r24, 0x2E	; 46
    189e:	b9 f4       	brne	.+46     	; 0x18ce <vfprintf+0xf6>
    18a0:	36 fc       	sbrc	r3, 6
    18a2:	75 c1       	rjmp	.+746    	; 0x1b8e <vfprintf+0x3b6>
    18a4:	23 2d       	mov	r18, r3
    18a6:	20 64       	ori	r18, 0x40	; 64
    18a8:	32 2e       	mov	r3, r18
    18aa:	19 c0       	rjmp	.+50     	; 0x18de <vfprintf+0x106>
    18ac:	36 fe       	sbrs	r3, 6
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <vfprintf+0xe4>
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	98 9e       	mul	r9, r24
    18b4:	20 0d       	add	r18, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	92 2e       	mov	r9, r18
    18ba:	11 c0       	rjmp	.+34     	; 0x18de <vfprintf+0x106>
    18bc:	ea e0       	ldi	r30, 0x0A	; 10
    18be:	2e 9e       	mul	r2, r30
    18c0:	20 0d       	add	r18, r0
    18c2:	11 24       	eor	r1, r1
    18c4:	22 2e       	mov	r2, r18
    18c6:	f3 2d       	mov	r31, r3
    18c8:	f0 62       	ori	r31, 0x20	; 32
    18ca:	3f 2e       	mov	r3, r31
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <vfprintf+0x106>
    18ce:	8c 36       	cpi	r24, 0x6C	; 108
    18d0:	21 f4       	brne	.+8      	; 0x18da <vfprintf+0x102>
    18d2:	83 2d       	mov	r24, r3
    18d4:	80 68       	ori	r24, 0x80	; 128
    18d6:	38 2e       	mov	r3, r24
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x106>
    18da:	88 36       	cpi	r24, 0x68	; 104
    18dc:	41 f4       	brne	.+16     	; 0x18ee <vfprintf+0x116>
    18de:	f7 01       	movw	r30, r14
    18e0:	93 fd       	sbrc	r25, 3
    18e2:	85 91       	lpm	r24, Z+
    18e4:	93 ff       	sbrs	r25, 3
    18e6:	81 91       	ld	r24, Z+
    18e8:	7f 01       	movw	r14, r30
    18ea:	81 11       	cpse	r24, r1
    18ec:	b3 cf       	rjmp	.-154    	; 0x1854 <vfprintf+0x7c>
    18ee:	98 2f       	mov	r25, r24
    18f0:	9f 7d       	andi	r25, 0xDF	; 223
    18f2:	95 54       	subi	r25, 0x45	; 69
    18f4:	93 30       	cpi	r25, 0x03	; 3
    18f6:	28 f4       	brcc	.+10     	; 0x1902 <vfprintf+0x12a>
    18f8:	0c 5f       	subi	r16, 0xFC	; 252
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	9f e3       	ldi	r25, 0x3F	; 63
    18fe:	99 83       	std	Y+1, r25	; 0x01
    1900:	0d c0       	rjmp	.+26     	; 0x191c <vfprintf+0x144>
    1902:	83 36       	cpi	r24, 0x63	; 99
    1904:	31 f0       	breq	.+12     	; 0x1912 <vfprintf+0x13a>
    1906:	83 37       	cpi	r24, 0x73	; 115
    1908:	71 f0       	breq	.+28     	; 0x1926 <vfprintf+0x14e>
    190a:	83 35       	cpi	r24, 0x53	; 83
    190c:	09 f0       	breq	.+2      	; 0x1910 <vfprintf+0x138>
    190e:	55 c0       	rjmp	.+170    	; 0x19ba <vfprintf+0x1e2>
    1910:	20 c0       	rjmp	.+64     	; 0x1952 <vfprintf+0x17a>
    1912:	f8 01       	movw	r30, r16
    1914:	80 81       	ld	r24, Z
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	0e 5f       	subi	r16, 0xFE	; 254
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	88 24       	eor	r8, r8
    191e:	83 94       	inc	r8
    1920:	91 2c       	mov	r9, r1
    1922:	53 01       	movw	r10, r6
    1924:	12 c0       	rjmp	.+36     	; 0x194a <vfprintf+0x172>
    1926:	28 01       	movw	r4, r16
    1928:	f2 e0       	ldi	r31, 0x02	; 2
    192a:	4f 0e       	add	r4, r31
    192c:	51 1c       	adc	r5, r1
    192e:	f8 01       	movw	r30, r16
    1930:	a0 80       	ld	r10, Z
    1932:	b1 80       	ldd	r11, Z+1	; 0x01
    1934:	36 fe       	sbrs	r3, 6
    1936:	03 c0       	rjmp	.+6      	; 0x193e <vfprintf+0x166>
    1938:	69 2d       	mov	r22, r9
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <vfprintf+0x16a>
    193e:	6f ef       	ldi	r22, 0xFF	; 255
    1940:	7f ef       	ldi	r23, 0xFF	; 255
    1942:	c5 01       	movw	r24, r10
    1944:	4b d1       	rcall	.+662    	; 0x1bdc <strnlen>
    1946:	4c 01       	movw	r8, r24
    1948:	82 01       	movw	r16, r4
    194a:	f3 2d       	mov	r31, r3
    194c:	ff 77       	andi	r31, 0x7F	; 127
    194e:	3f 2e       	mov	r3, r31
    1950:	15 c0       	rjmp	.+42     	; 0x197c <vfprintf+0x1a4>
    1952:	28 01       	movw	r4, r16
    1954:	22 e0       	ldi	r18, 0x02	; 2
    1956:	42 0e       	add	r4, r18
    1958:	51 1c       	adc	r5, r1
    195a:	f8 01       	movw	r30, r16
    195c:	a0 80       	ld	r10, Z
    195e:	b1 80       	ldd	r11, Z+1	; 0x01
    1960:	36 fe       	sbrs	r3, 6
    1962:	03 c0       	rjmp	.+6      	; 0x196a <vfprintf+0x192>
    1964:	69 2d       	mov	r22, r9
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	02 c0       	rjmp	.+4      	; 0x196e <vfprintf+0x196>
    196a:	6f ef       	ldi	r22, 0xFF	; 255
    196c:	7f ef       	ldi	r23, 0xFF	; 255
    196e:	c5 01       	movw	r24, r10
    1970:	2a d1       	rcall	.+596    	; 0x1bc6 <strnlen_P>
    1972:	4c 01       	movw	r8, r24
    1974:	f3 2d       	mov	r31, r3
    1976:	f0 68       	ori	r31, 0x80	; 128
    1978:	3f 2e       	mov	r3, r31
    197a:	82 01       	movw	r16, r4
    197c:	33 fc       	sbrc	r3, 3
    197e:	19 c0       	rjmp	.+50     	; 0x19b2 <vfprintf+0x1da>
    1980:	82 2d       	mov	r24, r2
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	88 16       	cp	r8, r24
    1986:	99 06       	cpc	r9, r25
    1988:	a0 f4       	brcc	.+40     	; 0x19b2 <vfprintf+0x1da>
    198a:	b6 01       	movw	r22, r12
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	30 d1       	rcall	.+608    	; 0x1bf2 <fputc>
    1992:	2a 94       	dec	r2
    1994:	f5 cf       	rjmp	.-22     	; 0x1980 <vfprintf+0x1a8>
    1996:	f5 01       	movw	r30, r10
    1998:	37 fc       	sbrc	r3, 7
    199a:	85 91       	lpm	r24, Z+
    199c:	37 fe       	sbrs	r3, 7
    199e:	81 91       	ld	r24, Z+
    19a0:	5f 01       	movw	r10, r30
    19a2:	b6 01       	movw	r22, r12
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	25 d1       	rcall	.+586    	; 0x1bf2 <fputc>
    19a8:	21 10       	cpse	r2, r1
    19aa:	2a 94       	dec	r2
    19ac:	21 e0       	ldi	r18, 0x01	; 1
    19ae:	82 1a       	sub	r8, r18
    19b0:	91 08       	sbc	r9, r1
    19b2:	81 14       	cp	r8, r1
    19b4:	91 04       	cpc	r9, r1
    19b6:	79 f7       	brne	.-34     	; 0x1996 <vfprintf+0x1be>
    19b8:	e1 c0       	rjmp	.+450    	; 0x1b7c <vfprintf+0x3a4>
    19ba:	84 36       	cpi	r24, 0x64	; 100
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <vfprintf+0x1ea>
    19be:	89 36       	cpi	r24, 0x69	; 105
    19c0:	39 f5       	brne	.+78     	; 0x1a10 <vfprintf+0x238>
    19c2:	f8 01       	movw	r30, r16
    19c4:	37 fe       	sbrs	r3, 7
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <vfprintf+0x1fe>
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	0c 5f       	subi	r16, 0xFC	; 252
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	08 c0       	rjmp	.+16     	; 0x19e6 <vfprintf+0x20e>
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	07 2e       	mov	r0, r23
    19dc:	00 0c       	add	r0, r0
    19de:	88 0b       	sbc	r24, r24
    19e0:	99 0b       	sbc	r25, r25
    19e2:	0e 5f       	subi	r16, 0xFE	; 254
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	f3 2d       	mov	r31, r3
    19e8:	ff 76       	andi	r31, 0x6F	; 111
    19ea:	3f 2e       	mov	r3, r31
    19ec:	97 ff       	sbrs	r25, 7
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <vfprintf+0x22a>
    19f0:	90 95       	com	r25
    19f2:	80 95       	com	r24
    19f4:	70 95       	com	r23
    19f6:	61 95       	neg	r22
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	f0 68       	ori	r31, 0x80	; 128
    1a00:	3f 2e       	mov	r3, r31
    1a02:	2a e0       	ldi	r18, 0x0A	; 10
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	a3 01       	movw	r20, r6
    1a08:	30 d1       	rcall	.+608    	; 0x1c6a <__ultoa_invert>
    1a0a:	88 2e       	mov	r8, r24
    1a0c:	86 18       	sub	r8, r6
    1a0e:	44 c0       	rjmp	.+136    	; 0x1a98 <vfprintf+0x2c0>
    1a10:	85 37       	cpi	r24, 0x75	; 117
    1a12:	31 f4       	brne	.+12     	; 0x1a20 <vfprintf+0x248>
    1a14:	23 2d       	mov	r18, r3
    1a16:	2f 7e       	andi	r18, 0xEF	; 239
    1a18:	b2 2e       	mov	r11, r18
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	25 c0       	rjmp	.+74     	; 0x1a6a <vfprintf+0x292>
    1a20:	93 2d       	mov	r25, r3
    1a22:	99 7f       	andi	r25, 0xF9	; 249
    1a24:	b9 2e       	mov	r11, r25
    1a26:	8f 36       	cpi	r24, 0x6F	; 111
    1a28:	c1 f0       	breq	.+48     	; 0x1a5a <vfprintf+0x282>
    1a2a:	18 f4       	brcc	.+6      	; 0x1a32 <vfprintf+0x25a>
    1a2c:	88 35       	cpi	r24, 0x58	; 88
    1a2e:	79 f0       	breq	.+30     	; 0x1a4e <vfprintf+0x276>
    1a30:	ae c0       	rjmp	.+348    	; 0x1b8e <vfprintf+0x3b6>
    1a32:	80 37       	cpi	r24, 0x70	; 112
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <vfprintf+0x264>
    1a36:	88 37       	cpi	r24, 0x78	; 120
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <vfprintf+0x26a>
    1a3a:	a9 c0       	rjmp	.+338    	; 0x1b8e <vfprintf+0x3b6>
    1a3c:	e9 2f       	mov	r30, r25
    1a3e:	e0 61       	ori	r30, 0x10	; 16
    1a40:	be 2e       	mov	r11, r30
    1a42:	b4 fe       	sbrs	r11, 4
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <vfprintf+0x288>
    1a46:	fb 2d       	mov	r31, r11
    1a48:	f4 60       	ori	r31, 0x04	; 4
    1a4a:	bf 2e       	mov	r11, r31
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <vfprintf+0x288>
    1a4e:	34 fe       	sbrs	r3, 4
    1a50:	0a c0       	rjmp	.+20     	; 0x1a66 <vfprintf+0x28e>
    1a52:	29 2f       	mov	r18, r25
    1a54:	26 60       	ori	r18, 0x06	; 6
    1a56:	b2 2e       	mov	r11, r18
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <vfprintf+0x28e>
    1a5a:	28 e0       	ldi	r18, 0x08	; 8
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <vfprintf+0x292>
    1a60:	20 e1       	ldi	r18, 0x10	; 16
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x292>
    1a66:	20 e1       	ldi	r18, 0x10	; 16
    1a68:	32 e0       	ldi	r19, 0x02	; 2
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	b7 fe       	sbrs	r11, 7
    1a6e:	07 c0       	rjmp	.+14     	; 0x1a7e <vfprintf+0x2a6>
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	0c 5f       	subi	r16, 0xFC	; 252
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x2b2>
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 5f       	subi	r16, 0xFE	; 254
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	a3 01       	movw	r20, r6
    1a8c:	ee d0       	rcall	.+476    	; 0x1c6a <__ultoa_invert>
    1a8e:	88 2e       	mov	r8, r24
    1a90:	86 18       	sub	r8, r6
    1a92:	fb 2d       	mov	r31, r11
    1a94:	ff 77       	andi	r31, 0x7F	; 127
    1a96:	3f 2e       	mov	r3, r31
    1a98:	36 fe       	sbrs	r3, 6
    1a9a:	0d c0       	rjmp	.+26     	; 0x1ab6 <vfprintf+0x2de>
    1a9c:	23 2d       	mov	r18, r3
    1a9e:	2e 7f       	andi	r18, 0xFE	; 254
    1aa0:	a2 2e       	mov	r10, r18
    1aa2:	89 14       	cp	r8, r9
    1aa4:	58 f4       	brcc	.+22     	; 0x1abc <vfprintf+0x2e4>
    1aa6:	34 fe       	sbrs	r3, 4
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <vfprintf+0x2e8>
    1aaa:	32 fc       	sbrc	r3, 2
    1aac:	09 c0       	rjmp	.+18     	; 0x1ac0 <vfprintf+0x2e8>
    1aae:	83 2d       	mov	r24, r3
    1ab0:	8e 7e       	andi	r24, 0xEE	; 238
    1ab2:	a8 2e       	mov	r10, r24
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <vfprintf+0x2e8>
    1ab6:	b8 2c       	mov	r11, r8
    1ab8:	a3 2c       	mov	r10, r3
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <vfprintf+0x2ea>
    1abc:	b8 2c       	mov	r11, r8
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <vfprintf+0x2ea>
    1ac0:	b9 2c       	mov	r11, r9
    1ac2:	a4 fe       	sbrs	r10, 4
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <vfprintf+0x30c>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e8 0d       	add	r30, r8
    1aca:	f1 1d       	adc	r31, r1
    1acc:	80 81       	ld	r24, Z
    1ace:	80 33       	cpi	r24, 0x30	; 48
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <vfprintf+0x302>
    1ad2:	9a 2d       	mov	r25, r10
    1ad4:	99 7e       	andi	r25, 0xE9	; 233
    1ad6:	a9 2e       	mov	r10, r25
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <vfprintf+0x314>
    1ada:	a2 fe       	sbrs	r10, 2
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <vfprintf+0x312>
    1ade:	b3 94       	inc	r11
    1ae0:	b3 94       	inc	r11
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <vfprintf+0x314>
    1ae4:	8a 2d       	mov	r24, r10
    1ae6:	86 78       	andi	r24, 0x86	; 134
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <vfprintf+0x314>
    1aea:	b3 94       	inc	r11
    1aec:	a3 fc       	sbrc	r10, 3
    1aee:	10 c0       	rjmp	.+32     	; 0x1b10 <vfprintf+0x338>
    1af0:	a0 fe       	sbrs	r10, 0
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <vfprintf+0x328>
    1af4:	b2 14       	cp	r11, r2
    1af6:	80 f4       	brcc	.+32     	; 0x1b18 <vfprintf+0x340>
    1af8:	28 0c       	add	r2, r8
    1afa:	92 2c       	mov	r9, r2
    1afc:	9b 18       	sub	r9, r11
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <vfprintf+0x342>
    1b00:	b2 14       	cp	r11, r2
    1b02:	58 f4       	brcc	.+22     	; 0x1b1a <vfprintf+0x342>
    1b04:	b6 01       	movw	r22, r12
    1b06:	80 e2       	ldi	r24, 0x20	; 32
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	73 d0       	rcall	.+230    	; 0x1bf2 <fputc>
    1b0c:	b3 94       	inc	r11
    1b0e:	f8 cf       	rjmp	.-16     	; 0x1b00 <vfprintf+0x328>
    1b10:	b2 14       	cp	r11, r2
    1b12:	18 f4       	brcc	.+6      	; 0x1b1a <vfprintf+0x342>
    1b14:	2b 18       	sub	r2, r11
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <vfprintf+0x344>
    1b18:	98 2c       	mov	r9, r8
    1b1a:	21 2c       	mov	r2, r1
    1b1c:	a4 fe       	sbrs	r10, 4
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <vfprintf+0x366>
    1b20:	b6 01       	movw	r22, r12
    1b22:	80 e3       	ldi	r24, 0x30	; 48
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	65 d0       	rcall	.+202    	; 0x1bf2 <fputc>
    1b28:	a2 fe       	sbrs	r10, 2
    1b2a:	16 c0       	rjmp	.+44     	; 0x1b58 <vfprintf+0x380>
    1b2c:	a1 fc       	sbrc	r10, 1
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <vfprintf+0x35e>
    1b30:	88 e7       	ldi	r24, 0x78	; 120
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <vfprintf+0x362>
    1b36:	88 e5       	ldi	r24, 0x58	; 88
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	0c c0       	rjmp	.+24     	; 0x1b56 <vfprintf+0x37e>
    1b3e:	8a 2d       	mov	r24, r10
    1b40:	86 78       	andi	r24, 0x86	; 134
    1b42:	51 f0       	breq	.+20     	; 0x1b58 <vfprintf+0x380>
    1b44:	a1 fe       	sbrs	r10, 1
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <vfprintf+0x374>
    1b48:	8b e2       	ldi	r24, 0x2B	; 43
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <vfprintf+0x376>
    1b4c:	80 e2       	ldi	r24, 0x20	; 32
    1b4e:	a7 fc       	sbrc	r10, 7
    1b50:	8d e2       	ldi	r24, 0x2D	; 45
    1b52:	b6 01       	movw	r22, r12
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	4d d0       	rcall	.+154    	; 0x1bf2 <fputc>
    1b58:	89 14       	cp	r8, r9
    1b5a:	30 f4       	brcc	.+12     	; 0x1b68 <vfprintf+0x390>
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	80 e3       	ldi	r24, 0x30	; 48
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	47 d0       	rcall	.+142    	; 0x1bf2 <fputc>
    1b64:	9a 94       	dec	r9
    1b66:	f8 cf       	rjmp	.-16     	; 0x1b58 <vfprintf+0x380>
    1b68:	8a 94       	dec	r8
    1b6a:	f3 01       	movw	r30, r6
    1b6c:	e8 0d       	add	r30, r8
    1b6e:	f1 1d       	adc	r31, r1
    1b70:	80 81       	ld	r24, Z
    1b72:	b6 01       	movw	r22, r12
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	3d d0       	rcall	.+122    	; 0x1bf2 <fputc>
    1b78:	81 10       	cpse	r8, r1
    1b7a:	f6 cf       	rjmp	.-20     	; 0x1b68 <vfprintf+0x390>
    1b7c:	22 20       	and	r2, r2
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <vfprintf+0x3aa>
    1b80:	4e ce       	rjmp	.-868    	; 0x181e <vfprintf+0x46>
    1b82:	b6 01       	movw	r22, r12
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	34 d0       	rcall	.+104    	; 0x1bf2 <fputc>
    1b8a:	2a 94       	dec	r2
    1b8c:	f7 cf       	rjmp	.-18     	; 0x1b7c <vfprintf+0x3a4>
    1b8e:	f6 01       	movw	r30, r12
    1b90:	86 81       	ldd	r24, Z+6	; 0x06
    1b92:	97 81       	ldd	r25, Z+7	; 0x07
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <vfprintf+0x3c2>
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	9f ef       	ldi	r25, 0xFF	; 255
    1b9a:	2b 96       	adiw	r28, 0x0b	; 11
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	bf 90       	pop	r11
    1bb2:	af 90       	pop	r10
    1bb4:	9f 90       	pop	r9
    1bb6:	8f 90       	pop	r8
    1bb8:	7f 90       	pop	r7
    1bba:	6f 90       	pop	r6
    1bbc:	5f 90       	pop	r5
    1bbe:	4f 90       	pop	r4
    1bc0:	3f 90       	pop	r3
    1bc2:	2f 90       	pop	r2
    1bc4:	08 95       	ret

00001bc6 <strnlen_P>:
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	05 90       	lpm	r0, Z+
    1bca:	61 50       	subi	r22, 0x01	; 1
    1bcc:	70 40       	sbci	r23, 0x00	; 0
    1bce:	01 10       	cpse	r0, r1
    1bd0:	d8 f7       	brcc	.-10     	; 0x1bc8 <strnlen_P+0x2>
    1bd2:	80 95       	com	r24
    1bd4:	90 95       	com	r25
    1bd6:	8e 0f       	add	r24, r30
    1bd8:	9f 1f       	adc	r25, r31
    1bda:	08 95       	ret

00001bdc <strnlen>:
    1bdc:	fc 01       	movw	r30, r24
    1bde:	61 50       	subi	r22, 0x01	; 1
    1be0:	70 40       	sbci	r23, 0x00	; 0
    1be2:	01 90       	ld	r0, Z+
    1be4:	01 10       	cpse	r0, r1
    1be6:	d8 f7       	brcc	.-10     	; 0x1bde <strnlen+0x2>
    1be8:	80 95       	com	r24
    1bea:	90 95       	com	r25
    1bec:	8e 0f       	add	r24, r30
    1bee:	9f 1f       	adc	r25, r31
    1bf0:	08 95       	ret

00001bf2 <fputc>:
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	fb 01       	movw	r30, r22
    1bfc:	23 81       	ldd	r18, Z+3	; 0x03
    1bfe:	21 fd       	sbrc	r18, 1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <fputc+0x16>
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	9f ef       	ldi	r25, 0xFF	; 255
    1c06:	2c c0       	rjmp	.+88     	; 0x1c60 <fputc+0x6e>
    1c08:	22 ff       	sbrs	r18, 2
    1c0a:	16 c0       	rjmp	.+44     	; 0x1c38 <fputc+0x46>
    1c0c:	46 81       	ldd	r20, Z+6	; 0x06
    1c0e:	57 81       	ldd	r21, Z+7	; 0x07
    1c10:	24 81       	ldd	r18, Z+4	; 0x04
    1c12:	35 81       	ldd	r19, Z+5	; 0x05
    1c14:	42 17       	cp	r20, r18
    1c16:	53 07       	cpc	r21, r19
    1c18:	44 f4       	brge	.+16     	; 0x1c2a <fputc+0x38>
    1c1a:	a0 81       	ld	r26, Z
    1c1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c1e:	9d 01       	movw	r18, r26
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	20 83       	st	Z, r18
    1c26:	31 83       	std	Z+1, r19	; 0x01
    1c28:	8c 93       	st	X, r24
    1c2a:	26 81       	ldd	r18, Z+6	; 0x06
    1c2c:	37 81       	ldd	r19, Z+7	; 0x07
    1c2e:	2f 5f       	subi	r18, 0xFF	; 255
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	26 83       	std	Z+6, r18	; 0x06
    1c34:	37 83       	std	Z+7, r19	; 0x07
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <fputc+0x6e>
    1c38:	8b 01       	movw	r16, r22
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	fb 01       	movw	r30, r22
    1c3e:	00 84       	ldd	r0, Z+8	; 0x08
    1c40:	f1 85       	ldd	r31, Z+9	; 0x09
    1c42:	e0 2d       	mov	r30, r0
    1c44:	19 95       	eicall
    1c46:	89 2b       	or	r24, r25
    1c48:	e1 f6       	brne	.-72     	; 0x1c02 <fputc+0x10>
    1c4a:	d8 01       	movw	r26, r16
    1c4c:	16 96       	adiw	r26, 0x06	; 6
    1c4e:	8d 91       	ld	r24, X+
    1c50:	9c 91       	ld	r25, X
    1c52:	17 97       	sbiw	r26, 0x07	; 7
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	16 96       	adiw	r26, 0x06	; 6
    1c58:	8d 93       	st	X+, r24
    1c5a:	9c 93       	st	X, r25
    1c5c:	17 97       	sbiw	r26, 0x07	; 7
    1c5e:	ce 01       	movw	r24, r28
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	08 95       	ret

00001c6a <__ultoa_invert>:
    1c6a:	fa 01       	movw	r30, r20
    1c6c:	aa 27       	eor	r26, r26
    1c6e:	28 30       	cpi	r18, 0x08	; 8
    1c70:	51 f1       	breq	.+84     	; 0x1cc6 <__ultoa_invert+0x5c>
    1c72:	20 31       	cpi	r18, 0x10	; 16
    1c74:	81 f1       	breq	.+96     	; 0x1cd6 <__ultoa_invert+0x6c>
    1c76:	e8 94       	clt
    1c78:	6f 93       	push	r22
    1c7a:	6e 7f       	andi	r22, 0xFE	; 254
    1c7c:	6e 5f       	subi	r22, 0xFE	; 254
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	8f 4f       	sbci	r24, 0xFF	; 255
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	af 4f       	sbci	r26, 0xFF	; 255
    1c86:	b1 e0       	ldi	r27, 0x01	; 1
    1c88:	3e d0       	rcall	.+124    	; 0x1d06 <__ultoa_invert+0x9c>
    1c8a:	b4 e0       	ldi	r27, 0x04	; 4
    1c8c:	3c d0       	rcall	.+120    	; 0x1d06 <__ultoa_invert+0x9c>
    1c8e:	67 0f       	add	r22, r23
    1c90:	78 1f       	adc	r23, r24
    1c92:	89 1f       	adc	r24, r25
    1c94:	9a 1f       	adc	r25, r26
    1c96:	a1 1d       	adc	r26, r1
    1c98:	68 0f       	add	r22, r24
    1c9a:	79 1f       	adc	r23, r25
    1c9c:	8a 1f       	adc	r24, r26
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	6a 0f       	add	r22, r26
    1ca4:	71 1d       	adc	r23, r1
    1ca6:	81 1d       	adc	r24, r1
    1ca8:	91 1d       	adc	r25, r1
    1caa:	a1 1d       	adc	r26, r1
    1cac:	20 d0       	rcall	.+64     	; 0x1cee <__ultoa_invert+0x84>
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <__ultoa_invert+0x48>
    1cb0:	68 94       	set
    1cb2:	3f 91       	pop	r19
    1cb4:	2a e0       	ldi	r18, 0x0A	; 10
    1cb6:	26 9f       	mul	r18, r22
    1cb8:	11 24       	eor	r1, r1
    1cba:	30 19       	sub	r19, r0
    1cbc:	30 5d       	subi	r19, 0xD0	; 208
    1cbe:	31 93       	st	Z+, r19
    1cc0:	de f6       	brtc	.-74     	; 0x1c78 <__ultoa_invert+0xe>
    1cc2:	cf 01       	movw	r24, r30
    1cc4:	08 95       	ret
    1cc6:	46 2f       	mov	r20, r22
    1cc8:	47 70       	andi	r20, 0x07	; 7
    1cca:	40 5d       	subi	r20, 0xD0	; 208
    1ccc:	41 93       	st	Z+, r20
    1cce:	b3 e0       	ldi	r27, 0x03	; 3
    1cd0:	0f d0       	rcall	.+30     	; 0x1cf0 <__ultoa_invert+0x86>
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <__ultoa_invert+0x5c>
    1cd4:	f6 cf       	rjmp	.-20     	; 0x1cc2 <__ultoa_invert+0x58>
    1cd6:	46 2f       	mov	r20, r22
    1cd8:	4f 70       	andi	r20, 0x0F	; 15
    1cda:	40 5d       	subi	r20, 0xD0	; 208
    1cdc:	4a 33       	cpi	r20, 0x3A	; 58
    1cde:	18 f0       	brcs	.+6      	; 0x1ce6 <__ultoa_invert+0x7c>
    1ce0:	49 5d       	subi	r20, 0xD9	; 217
    1ce2:	31 fd       	sbrc	r19, 1
    1ce4:	40 52       	subi	r20, 0x20	; 32
    1ce6:	41 93       	st	Z+, r20
    1ce8:	02 d0       	rcall	.+4      	; 0x1cee <__ultoa_invert+0x84>
    1cea:	a9 f7       	brne	.-22     	; 0x1cd6 <__ultoa_invert+0x6c>
    1cec:	ea cf       	rjmp	.-44     	; 0x1cc2 <__ultoa_invert+0x58>
    1cee:	b4 e0       	ldi	r27, 0x04	; 4
    1cf0:	a6 95       	lsr	r26
    1cf2:	97 95       	ror	r25
    1cf4:	87 95       	ror	r24
    1cf6:	77 95       	ror	r23
    1cf8:	67 95       	ror	r22
    1cfa:	ba 95       	dec	r27
    1cfc:	c9 f7       	brne	.-14     	; 0x1cf0 <__ultoa_invert+0x86>
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	61 05       	cpc	r22, r1
    1d02:	71 05       	cpc	r23, r1
    1d04:	08 95       	ret
    1d06:	9b 01       	movw	r18, r22
    1d08:	ac 01       	movw	r20, r24
    1d0a:	0a 2e       	mov	r0, r26
    1d0c:	06 94       	lsr	r0
    1d0e:	57 95       	ror	r21
    1d10:	47 95       	ror	r20
    1d12:	37 95       	ror	r19
    1d14:	27 95       	ror	r18
    1d16:	ba 95       	dec	r27
    1d18:	c9 f7       	brne	.-14     	; 0x1d0c <__ultoa_invert+0xa2>
    1d1a:	62 0f       	add	r22, r18
    1d1c:	73 1f       	adc	r23, r19
    1d1e:	84 1f       	adc	r24, r20
    1d20:	95 1f       	adc	r25, r21
    1d22:	a0 1d       	adc	r26, r0
    1d24:	08 95       	ret

00001d26 <_exit>:
    1d26:	f8 94       	cli

00001d28 <__stop_program>:
    1d28:	ff cf       	rjmp	.-2      	; 0x1d28 <__stop_program>
