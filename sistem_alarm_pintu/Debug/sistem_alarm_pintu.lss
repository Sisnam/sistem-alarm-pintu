
sistem_alarm_pintu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00802000  00001ba2  00001c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000285  00802042  00802042  00001c78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e200  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b41  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007173  00000000  00000000  00014d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000978  00000000  00000000  0001becc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003292a  00000000  00000000  0001c844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005945  00000000  00000000  0004f16e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00054ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be41  00000000  00000000  00054eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	18 c2       	rjmp	.+1072   	; 0x4ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	16 c2       	rjmp	.+1068   	; 0x4ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	14 c2       	rjmp	.+1064   	; 0x4ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d8 c1       	rjmp	.+944    	; 0x4ce <__bad_interrupt>
     11e:	00 00       	nop
     120:	d6 c1       	rjmp	.+940    	; 0x4ce <__bad_interrupt>
     122:	00 00       	nop
     124:	d4 c1       	rjmp	.+936    	; 0x4ce <__bad_interrupt>
     126:	00 00       	nop
     128:	d2 c1       	rjmp	.+932    	; 0x4ce <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_104>
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dd9>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65c1>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6599>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55c1>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d99>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e2 ea       	ldi	r30, 0xA2	; 162
     4a6:	fb e1       	ldi	r31, 0x1B	; 27
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a2 34       	cpi	r26, 0x42	; 66
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a2 e4       	ldi	r26, 0x42	; 66
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a7 3c       	cpi	r26, 0xC7	; 199
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	e9 d7       	rcall	.+4050   	; 0x149c <main>
     4ca:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
     4d6:	81 09       	sbc	r24, r1
     4d8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4da:	61 15       	cp	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	81 05       	cpc	r24, r1
     4e0:	91 05       	cpc	r25, r1
     4e2:	b9 f7       	brne	.-18     	; 0x4d2 <__portable_avr_delay_cycles+0x2>
     4e4:	08 95       	ret

000004e6 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	16 e0       	ldi	r17, 0x06	; 6
     502:	68 94       	set
     504:	ff 24       	eor	r15, r15
     506:	f3 f8       	bld	r15, 3
     508:	f8 01       	movw	r30, r16
     50a:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50c:	64 e0       	ldi	r22, 0x04	; 4
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	dd df       	rcall	.-70     	; 0x4d0 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     516:	f8 01       	movw	r30, r16
     518:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	d6 df       	rcall	.-84     	; 0x4d0 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     524:	0f 2e       	mov	r0, r31
     526:	fb e2       	ldi	r31, 0x2B	; 43
     528:	bf 2e       	mov	r11, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	99 e0       	ldi	r25, 0x09	; 9
     532:	2e d4       	rcall	.+2140   	; 0xd90 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     534:	c1 2c       	mov	r12, r1
     536:	d1 2c       	mov	r13, r1
     538:	76 01       	movw	r14, r12
     53a:	00 e4       	ldi	r16, 0x40	; 64
     53c:	12 e4       	ldi	r17, 0x42	; 66
     53e:	2f e0       	ldi	r18, 0x0F	; 15
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	43 e0       	ldi	r20, 0x03	; 3
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	80 ea       	ldi	r24, 0xA0	; 160
     54c:	99 e0       	ldi	r25, 0x09	; 9
     54e:	4f d4       	rcall	.+2206   	; 0xdee <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     550:	00 e6       	ldi	r16, 0x60	; 96
     552:	16 e0       	ldi	r17, 0x06	; 6
     554:	ff 24       	eor	r15, r15
     556:	f3 94       	inc	r15
     558:	f8 01       	movw	r30, r16
     55a:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55c:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     55e:	be 01       	movw	r22, r28
     560:	6f 5f       	subi	r22, 0xFF	; 255
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	80 ea       	ldi	r24, 0xA0	; 160
     566:	99 e0       	ldi	r25, 0x09	; 9
     568:	5c d4       	rcall	.+2232   	; 0xe22 <usart_spi_select_device>
     56a:	f8 01       	movw	r30, r16
     56c:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     56e:	e0 ea       	ldi	r30, 0xA0	; 160
     570:	f9 e0       	ldi	r31, 0x09	; 9
     572:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     574:	85 ff       	sbrs	r24, 5
     576:	fd cf       	rjmp	.-6      	; 0x572 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     57e:	e0 ea       	ldi	r30, 0xA0	; 160
     580:	f9 e0       	ldi	r31, 0x09	; 9
     582:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     584:	86 ff       	sbrs	r24, 6
     586:	fd cf       	rjmp	.-6      	; 0x582 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     588:	e0 ea       	ldi	r30, 0xA0	; 160
     58a:	f9 e0       	ldi	r31, 0x09	; 9
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     590:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     592:	be 01       	movw	r22, r28
     594:	6f 5f       	subi	r22, 0xFF	; 255
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	80 ea       	ldi	r24, 0xA0	; 160
     59a:	99 e0       	ldi	r25, 0x09	; 9
     59c:	58 d4       	rcall	.+2224   	; 0xe4e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     59e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	80 ea       	ldi	r24, 0xA0	; 160
     5aa:	99 e0       	ldi	r25, 0x09	; 9
     5ac:	3a d4       	rcall	.+2164   	; 0xe22 <usart_spi_select_device>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b4:	e0 ea       	ldi	r30, 0xA0	; 160
     5b6:	f9 e0       	ldi	r31, 0x09	; 9
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5ba:	85 ff       	sbrs	r24, 5
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5be:	86 ea       	ldi	r24, 0xA6	; 166
     5c0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c4:	e0 ea       	ldi	r30, 0xA0	; 160
     5c6:	f9 e0       	ldi	r31, 0x09	; 9
     5c8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ca:	86 ff       	sbrs	r24, 6
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ce:	e0 ea       	ldi	r30, 0xA0	; 160
     5d0:	f9 e0       	ldi	r31, 0x09	; 9
     5d2:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d4:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d6:	80 81       	ld	r24, Z
     5d8:	be 01       	movw	r22, r28
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e2:	35 d4       	rcall	.+2154   	; 0xe4e <usart_spi_deselect_device>
     5e4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	be 01       	movw	r22, r28
     5ea:	6f 5f       	subi	r22, 0xFF	; 255
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	80 ea       	ldi	r24, 0xA0	; 160
     5f0:	99 e0       	ldi	r25, 0x09	; 9
     5f2:	17 d4       	rcall	.+2094   	; 0xe22 <usart_spi_select_device>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fa:	e0 ea       	ldi	r30, 0xA0	; 160
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     600:	85 ff       	sbrs	r24, 5
     602:	fd cf       	rjmp	.-6      	; 0x5fe <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     604:	88 ec       	ldi	r24, 0xC8	; 200
     606:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60a:	e0 ea       	ldi	r30, 0xA0	; 160
     60c:	f9 e0       	ldi	r31, 0x09	; 9
     60e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     610:	86 ff       	sbrs	r24, 6
     612:	fd cf       	rjmp	.-6      	; 0x60e <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     614:	e0 ea       	ldi	r30, 0xA0	; 160
     616:	f9 e0       	ldi	r31, 0x09	; 9
     618:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61c:	80 81       	ld	r24, Z
     61e:	be 01       	movw	r22, r28
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	80 ea       	ldi	r24, 0xA0	; 160
     626:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     628:	12 d4       	rcall	.+2084   	; 0xe4e <usart_spi_deselect_device>
     62a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	80 ea       	ldi	r24, 0xA0	; 160
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	f4 d3       	rcall	.+2024   	; 0xe22 <usart_spi_select_device>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     640:	e0 ea       	ldi	r30, 0xA0	; 160
     642:	f9 e0       	ldi	r31, 0x09	; 9
     644:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     646:	85 ff       	sbrs	r24, 5
     648:	fd cf       	rjmp	.-6      	; 0x644 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64a:	82 ea       	ldi	r24, 0xA2	; 162
     64c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     650:	e0 ea       	ldi	r30, 0xA0	; 160
     652:	f9 e0       	ldi	r31, 0x09	; 9
     654:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     656:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     658:	fd cf       	rjmp	.-6      	; 0x654 <st7565r_init+0x16e>
     65a:	e0 ea       	ldi	r30, 0xA0	; 160
     65c:	f9 e0       	ldi	r31, 0x09	; 9
     65e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     660:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     662:	80 81       	ld	r24, Z
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	80 ea       	ldi	r24, 0xA0	; 160
     66c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     66e:	ef d3       	rcall	.+2014   	; 0xe4e <usart_spi_deselect_device>
     670:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	80 ea       	ldi	r24, 0xA0	; 160
     67c:	99 e0       	ldi	r25, 0x09	; 9
     67e:	d1 d3       	rcall	.+1954   	; 0xe22 <usart_spi_select_device>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     686:	e0 ea       	ldi	r30, 0xA0	; 160
     688:	f9 e0       	ldi	r31, 0x09	; 9
     68a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68c:	85 ff       	sbrs	r24, 5
     68e:	fd cf       	rjmp	.-6      	; 0x68a <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     690:	8f e2       	ldi	r24, 0x2F	; 47
     692:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     696:	e0 ea       	ldi	r30, 0xA0	; 160
     698:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69a:	81 81       	ldd	r24, Z+1	; 0x01
     69c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     69e:	fd cf       	rjmp	.-6      	; 0x69a <st7565r_init+0x1b4>
     6a0:	e0 ea       	ldi	r30, 0xA0	; 160
     6a2:	f9 e0       	ldi	r31, 0x09	; 9
     6a4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6a8:	80 81       	ld	r24, Z
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	80 ea       	ldi	r24, 0xA0	; 160
     6b2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b4:	cc d3       	rcall	.+1944   	; 0xe4e <usart_spi_deselect_device>
     6b6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	80 ea       	ldi	r24, 0xA0	; 160
     6c2:	99 e0       	ldi	r25, 0x09	; 9
     6c4:	ae d3       	rcall	.+1884   	; 0xe22 <usart_spi_select_device>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6cc:	e0 ea       	ldi	r30, 0xA0	; 160
     6ce:	f9 e0       	ldi	r31, 0x09	; 9
     6d0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d6:	88 ef       	ldi	r24, 0xF8	; 248
     6d8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6dc:	e0 ea       	ldi	r30, 0xA0	; 160
     6de:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e0:	81 81       	ldd	r24, Z+1	; 0x01
     6e2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <st7565r_init+0x1fa>
     6e6:	e0 ea       	ldi	r30, 0xA0	; 160
     6e8:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ea:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ec:	81 83       	std	Z+1, r24	; 0x01
     6ee:	80 81       	ld	r24, Z
     6f0:	be 01       	movw	r22, r28
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	80 ea       	ldi	r24, 0xA0	; 160
     6f8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fa:	a9 d3       	rcall	.+1874   	; 0xe4e <usart_spi_deselect_device>
     6fc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	80 ea       	ldi	r24, 0xA0	; 160
     708:	99 e0       	ldi	r25, 0x09	; 9
     70a:	8b d3       	rcall	.+1814   	; 0xe22 <usart_spi_select_device>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     712:	e0 ea       	ldi	r30, 0xA0	; 160
     714:	f9 e0       	ldi	r31, 0x09	; 9
     716:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     718:	85 ff       	sbrs	r24, 5
     71a:	fd cf       	rjmp	.-6      	; 0x716 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     720:	e0 ea       	ldi	r30, 0xA0	; 160
     722:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     728:	fd cf       	rjmp	.-6      	; 0x724 <st7565r_init+0x23e>
     72a:	e0 ea       	ldi	r30, 0xA0	; 160
     72c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     72e:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     730:	81 83       	std	Z+1, r24	; 0x01
     732:	80 81       	ld	r24, Z
     734:	be 01       	movw	r22, r28
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	80 ea       	ldi	r24, 0xA0	; 160
     73c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     73e:	87 d3       	rcall	.+1806   	; 0xe4e <usart_spi_deselect_device>
     740:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	be 01       	movw	r22, r28
     746:	6f 5f       	subi	r22, 0xFF	; 255
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	80 ea       	ldi	r24, 0xA0	; 160
     74c:	99 e0       	ldi	r25, 0x09	; 9
     74e:	69 d3       	rcall	.+1746   	; 0xe22 <usart_spi_select_device>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     756:	e0 ea       	ldi	r30, 0xA0	; 160
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75c:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     75e:	fd cf       	rjmp	.-6      	; 0x75a <st7565r_init+0x274>
     760:	81 e2       	ldi	r24, 0x21	; 33
     762:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     766:	e0 ea       	ldi	r30, 0xA0	; 160
     768:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76c:	86 ff       	sbrs	r24, 6
     76e:	fd cf       	rjmp	.-6      	; 0x76a <st7565r_init+0x284>
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     774:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     776:	81 83       	std	Z+1, r24	; 0x01
     778:	80 81       	ld	r24, Z
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     784:	64 d3       	rcall	.+1736   	; 0xe4e <usart_spi_deselect_device>
     786:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	be 01       	movw	r22, r28
     78c:	6f 5f       	subi	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	80 ea       	ldi	r24, 0xA0	; 160
     792:	99 e0       	ldi	r25, 0x09	; 9
     794:	46 d3       	rcall	.+1676   	; 0xe22 <usart_spi_select_device>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79c:	e0 ea       	ldi	r30, 0xA0	; 160
     79e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
     7a2:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <st7565r_init+0x2ba>
     7a6:	81 e8       	ldi	r24, 0x81	; 129
     7a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ac:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ae:	f9 e0       	ldi	r31, 0x09	; 9
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b2:	86 ff       	sbrs	r24, 6
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <st7565r_init+0x2ca>
     7b6:	e0 ea       	ldi	r30, 0xA0	; 160
     7b8:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ba:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7bc:	81 83       	std	Z+1, r24	; 0x01
     7be:	80 81       	ld	r24, Z
     7c0:	be 01       	movw	r22, r28
     7c2:	6f 5f       	subi	r22, 0xFF	; 255
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	80 ea       	ldi	r24, 0xA0	; 160
     7c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ca:	41 d3       	rcall	.+1666   	; 0xe4e <usart_spi_deselect_device>
     7cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	be 01       	movw	r22, r28
     7d2:	6f 5f       	subi	r22, 0xFF	; 255
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	80 ea       	ldi	r24, 0xA0	; 160
     7d8:	99 e0       	ldi	r25, 0x09	; 9
     7da:	23 d3       	rcall	.+1606   	; 0xe22 <usart_spi_select_device>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e2:	e0 ea       	ldi	r30, 0xA0	; 160
     7e4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e6:	81 81       	ldd	r24, Z+1	; 0x01
     7e8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <st7565r_init+0x300>
     7ec:	81 e2       	ldi	r24, 0x21	; 33
     7ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f4:	f9 e0       	ldi	r31, 0x09	; 9
     7f6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f8:	86 ff       	sbrs	r24, 6
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <st7565r_init+0x310>
     7fc:	e0 ea       	ldi	r30, 0xA0	; 160
     7fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     800:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     802:	81 83       	std	Z+1, r24	; 0x01
     804:	80 81       	ld	r24, Z
     806:	be 01       	movw	r22, r28
     808:	6f 5f       	subi	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	80 ea       	ldi	r24, 0xA0	; 160
     80e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     810:	1e d3       	rcall	.+1596   	; 0xe4e <usart_spi_deselect_device>
     812:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	be 01       	movw	r22, r28
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	99 e0       	ldi	r25, 0x09	; 9
     820:	00 d3       	rcall	.+1536   	; 0xe22 <usart_spi_select_device>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     828:	e0 ea       	ldi	r30, 0xA0	; 160
     82a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82c:	81 81       	ldd	r24, Z+1	; 0x01
     82e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     830:	fd cf       	rjmp	.-6      	; 0x82c <st7565r_init+0x346>
     832:	8f ea       	ldi	r24, 0xAF	; 175
     834:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     838:	e0 ea       	ldi	r30, 0xA0	; 160
     83a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     840:	fd cf       	rjmp	.-6      	; 0x83c <st7565r_init+0x356>
     842:	e0 ea       	ldi	r30, 0xA0	; 160
     844:	f9 e0       	ldi	r31, 0x09	; 9
     846:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     848:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84a:	80 81       	ld	r24, Z
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	80 ea       	ldi	r24, 0xA0	; 160
     854:	99 e0       	ldi	r25, 0x09	; 9
     856:	fb d2       	rcall	.+1526   	; 0xe4e <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	08 95       	ret

0000086e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     874:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     878:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     87c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     880:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     884:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     888:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     88c:	08 95       	ret

0000088e <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	1f 92       	push	r1
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     898:	9f b7       	in	r25, 0x3f	; 63
     89a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     89c:	f8 94       	cli
	return flags;
     89e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8a0:	e8 2f       	mov	r30, r24
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	e0 59       	subi	r30, 0x90	; 144
     8a6:	ff 4f       	sbci	r31, 0xFF	; 255
     8a8:	60 95       	com	r22
     8aa:	80 81       	ld	r24, Z
     8ac:	68 23       	and	r22, r24
     8ae:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	08 2f       	mov	r16, r24
     8cc:	f6 2e       	mov	r15, r22
     8ce:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8d0:	1a d1       	rcall	.+564    	; 0xb06 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8d2:	0f 70       	andi	r16, 0x0F	; 15
     8d4:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8d6:	8b e2       	ldi	r24, 0x2B	; 43
     8d8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8da:	be 01       	movw	r22, r28
     8dc:	6f 5f       	subi	r22, 0xFF	; 255
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	80 ea       	ldi	r24, 0xA0	; 160
     8e2:	99 e0       	ldi	r25, 0x09	; 9
     8e4:	9e d2       	rcall	.+1340   	; 0xe22 <usart_spi_select_device>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ec:	e0 ea       	ldi	r30, 0xA0	; 160
     8ee:	f9 e0       	ldi	r31, 0x09	; 9
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f2:	95 ff       	sbrs	r25, 5
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8f6:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fa:	e0 ea       	ldi	r30, 0xA0	; 160
     8fc:	f9 e0       	ldi	r31, 0x09	; 9
     8fe:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     900:	86 ff       	sbrs	r24, 6
     902:	fd cf       	rjmp	.-6      	; 0x8fe <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     904:	e0 ea       	ldi	r30, 0xA0	; 160
     906:	f9 e0       	ldi	r31, 0x09	; 9
     908:	80 e4       	ldi	r24, 0x40	; 64
     90a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     90c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     90e:	be 01       	movw	r22, r28
     910:	6f 5f       	subi	r22, 0xFF	; 255
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	80 ea       	ldi	r24, 0xA0	; 160
     916:	99 e0       	ldi	r25, 0x09	; 9
     918:	9a d2       	rcall	.+1332   	; 0xe4e <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     91a:	0f 2d       	mov	r16, r15
     91c:	0f 77       	andi	r16, 0x7F	; 127
     91e:	02 95       	swap	r16
     920:	0f 70       	andi	r16, 0x0F	; 15
     922:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     924:	8b e2       	ldi	r24, 0x2B	; 43
     926:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	80 ea       	ldi	r24, 0xA0	; 160
     930:	99 e0       	ldi	r25, 0x09	; 9
     932:	77 d2       	rcall	.+1262   	; 0xe22 <usart_spi_select_device>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     93a:	e0 ea       	ldi	r30, 0xA0	; 160
     93c:	f9 e0       	ldi	r31, 0x09	; 9
     93e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     940:	85 ff       	sbrs	r24, 5
     942:	fd cf       	rjmp	.-6      	; 0x93e <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     944:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     948:	e0 ea       	ldi	r30, 0xA0	; 160
     94a:	f9 e0       	ldi	r31, 0x09	; 9
     94c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94e:	86 ff       	sbrs	r24, 6
     950:	fd cf       	rjmp	.-6      	; 0x94c <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     952:	e0 ea       	ldi	r30, 0xA0	; 160
     954:	f9 e0       	ldi	r31, 0x09	; 9
     956:	80 e4       	ldi	r24, 0x40	; 64
     958:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     95a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     95c:	be 01       	movw	r22, r28
     95e:	6f 5f       	subi	r22, 0xFF	; 255
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	99 e0       	ldi	r25, 0x09	; 9
     966:	73 d2       	rcall	.+1254   	; 0xe4e <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     968:	0f 2d       	mov	r16, r15
     96a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     96c:	8b e2       	ldi	r24, 0x2B	; 43
     96e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     970:	be 01       	movw	r22, r28
     972:	6f 5f       	subi	r22, 0xFF	; 255
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	80 ea       	ldi	r24, 0xA0	; 160
     978:	99 e0       	ldi	r25, 0x09	; 9
     97a:	53 d2       	rcall	.+1190   	; 0xe22 <usart_spi_select_device>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     982:	e0 ea       	ldi	r30, 0xA0	; 160
     984:	f9 e0       	ldi	r31, 0x09	; 9
     986:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     988:	85 ff       	sbrs	r24, 5
     98a:	fd cf       	rjmp	.-6      	; 0x986 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     98c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     990:	e0 ea       	ldi	r30, 0xA0	; 160
     992:	f9 e0       	ldi	r31, 0x09	; 9
     994:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     996:	86 ff       	sbrs	r24, 6
     998:	fd cf       	rjmp	.-6      	; 0x994 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     99a:	e0 ea       	ldi	r30, 0xA0	; 160
     99c:	f9 e0       	ldi	r31, 0x09	; 9
     99e:	80 e4       	ldi	r24, 0x40	; 64
     9a0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a2:	80 81       	ld	r24, Z
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
     9ac:	99 e0       	ldi	r25, 0x09	; 9
     9ae:	4f d2       	rcall	.+1182   	; 0xe4e <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9b0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	be 01       	movw	r22, r28
     9b6:	6f 5f       	subi	r22, 0xFF	; 255
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	80 ea       	ldi	r24, 0xA0	; 160
     9bc:	99 e0       	ldi	r25, 0x09	; 9
     9be:	31 d2       	rcall	.+1122   	; 0xe22 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9c6:	e0 ea       	ldi	r30, 0xA0	; 160
     9c8:	f9 e0       	ldi	r31, 0x09	; 9
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9cc:	85 ff       	sbrs	r24, 5
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9d0:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
     9d6:	f9 e0       	ldi	r31, 0x09	; 9
     9d8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9da:	86 ff       	sbrs	r24, 6
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9de:	e0 ea       	ldi	r30, 0xA0	; 160
     9e0:	f9 e0       	ldi	r31, 0x09	; 9
     9e2:	80 e4       	ldi	r24, 0x40	; 64
     9e4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9e6:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ee:	be 01       	movw	r22, r28
     9f0:	6f 5f       	subi	r22, 0xFF	; 255
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	80 ea       	ldi	r24, 0xA0	; 160
     9f6:	99 e0       	ldi	r25, 0x09	; 9
     9f8:	2a d2       	rcall	.+1108   	; 0xe4e <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9fa:	0f 90       	pop	r0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	08 95       	ret

00000a08 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	1f 92       	push	r1
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a16:	82 e4       	ldi	r24, 0x42	; 66
     a18:	90 e2       	ldi	r25, 0x20	; 32
     a1a:	70 d0       	rcall	.+224    	; 0xafc <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a1c:	64 dd       	rcall	.-1336   	; 0x4e6 <st7565r_init>
     a1e:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a24:	6f 5f       	subi	r22, 0xFF	; 255
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	80 ea       	ldi	r24, 0xA0	; 160
     a2a:	99 e0       	ldi	r25, 0x09	; 9
     a2c:	fa d1       	rcall	.+1012   	; 0xe22 <usart_spi_select_device>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a34:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a36:	f9 e0       	ldi	r31, 0x09	; 9
     a38:	81 81       	ldd	r24, Z+1	; 0x01
     a3a:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <gfx_mono_st7565r_init+0x30>
     a3e:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a40:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a44:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a46:	f9 e0       	ldi	r31, 0x09	; 9
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <gfx_mono_st7565r_init+0x40>
     a4e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a50:	f9 e0       	ldi	r31, 0x09	; 9
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	81 83       	std	Z+1, r24	; 0x01
     a56:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a58:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	80 ea       	ldi	r24, 0xA0	; 160
     a60:	99 e0       	ldi	r25, 0x09	; 9
     a62:	f5 d1       	rcall	.+1002   	; 0xe4e <usart_spi_deselect_device>
     a64:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a66:	0a c0       	rjmp	.+20     	; 0xa7c <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	61 2f       	mov	r22, r17
     a6c:	80 2f       	mov	r24, r16
     a6e:	25 df       	rcall	.-438    	; 0x8ba <gfx_mono_st7565r_put_byte>
     a70:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a72:	10 38       	cpi	r17, 0x80	; 128
     a74:	c9 f7       	brne	.-14     	; 0xa68 <gfx_mono_st7565r_init+0x60>
     a76:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a78:	04 30       	cpi	r16, 0x04	; 4
     a7a:	11 f0       	breq	.+4      	; 0xa80 <gfx_mono_st7565r_init+0x78>
     a7c:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a7e:	f4 cf       	rjmp	.-24     	; 0xa68 <gfx_mono_st7565r_init+0x60>
     a80:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <gfx_mono_st7565r_draw_pixel>:
     a8c:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a96:	88 23       	and	r24, r24
     a98:	4c f1       	brlt	.+82     	; 0xaec <gfx_mono_st7565r_draw_pixel+0x60>
     a9a:	60 32       	cpi	r22, 0x20	; 32
     a9c:	38 f5       	brcc	.+78     	; 0xaec <gfx_mono_st7565r_draw_pixel+0x60>
     a9e:	d4 2f       	mov	r29, r20
     aa0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     aa2:	f6 2e       	mov	r15, r22
     aa4:	f6 94       	lsr	r15
     aa6:	f6 94       	lsr	r15
     aa8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	f8 9e       	mul	r15, r24
     ab0:	60 19       	sub	r22, r0
     ab2:	71 09       	sbc	r23, r1
     ab4:	11 24       	eor	r1, r1
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	8c 01       	movw	r16, r24
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <gfx_mono_st7565r_draw_pixel+0x36>
     abe:	00 0f       	add	r16, r16
     ac0:	11 1f       	adc	r17, r17
     ac2:	6a 95       	dec	r22
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac6:	6c 2f       	mov	r22, r28
     ac8:	8f 2d       	mov	r24, r15
     aca:	2b d0       	rcall	.+86     	; 0xb22 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     acc:	d1 30       	cpi	r29, 0x01	; 1
     ace:	21 f0       	breq	.+8      	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x4c>
     ad0:	28 f0       	brcs	.+10     	; 0xadc <gfx_mono_st7565r_draw_pixel+0x50>
     ad2:	d2 30       	cpi	r29, 0x02	; 2
     ad4:	31 f0       	breq	.+12     	; 0xae2 <gfx_mono_st7565r_draw_pixel+0x56>
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ad8:	80 2b       	or	r24, r16
		break;
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     adc:	00 95       	com	r16
     ade:	80 23       	and	r24, r16
		break;
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ae2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ae4:	48 2f       	mov	r20, r24
     ae6:	6c 2f       	mov	r22, r28
     ae8:	8f 2d       	mov	r24, r15
     aea:	e7 de       	rcall	.-562    	; 0x8ba <gfx_mono_st7565r_put_byte>
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	08 95       	ret

00000af8 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     afa:	08 95       	ret

00000afc <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     afc:	80 93 42 22 	sts	0x2242, r24	; 0x802242 <fbpointer>
     b00:	90 93 43 22 	sts	0x2243, r25	; 0x802243 <fbpointer+0x1>
     b04:	08 95       	ret

00000b06 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b06:	20 91 42 22 	lds	r18, 0x2242	; 0x802242 <fbpointer>
     b0a:	30 91 43 22 	lds	r19, 0x2243	; 0x802243 <fbpointer+0x1>
     b0e:	90 e8       	ldi	r25, 0x80	; 128
     b10:	89 9f       	mul	r24, r25
     b12:	20 0d       	add	r18, r0
     b14:	31 1d       	adc	r19, r1
     b16:	11 24       	eor	r1, r1
     b18:	f9 01       	movw	r30, r18
     b1a:	e6 0f       	add	r30, r22
     b1c:	f1 1d       	adc	r31, r1
     b1e:	40 83       	st	Z, r20
     b20:	08 95       	ret

00000b22 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b22:	20 91 42 22 	lds	r18, 0x2242	; 0x802242 <fbpointer>
     b26:	30 91 43 22 	lds	r19, 0x2243	; 0x802243 <fbpointer+0x1>
     b2a:	90 e8       	ldi	r25, 0x80	; 128
     b2c:	89 9f       	mul	r24, r25
     b2e:	20 0d       	add	r18, r0
     b30:	31 1d       	adc	r19, r1
     b32:	11 24       	eor	r1, r1
     b34:	f9 01       	movw	r30, r18
     b36:	e6 0f       	add	r30, r22
     b38:	f1 1d       	adc	r31, r1
}
     b3a:	80 81       	ld	r24, Z
     b3c:	08 95       	ret

00000b3e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	e4 2f       	mov	r30, r20
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	e8 0f       	add	r30, r24
     b4e:	f1 1d       	adc	r31, r1
     b50:	e1 38       	cpi	r30, 0x81	; 129
     b52:	f1 05       	cpc	r31, r1
     b54:	1c f0       	brlt	.+6      	; 0xb5c <gfx_mono_generic_draw_horizontal_line+0x1e>
     b56:	c0 e8       	ldi	r28, 0x80	; 128
     b58:	4c 2f       	mov	r20, r28
     b5a:	48 1b       	sub	r20, r24
     b5c:	44 23       	and	r20, r20
     b5e:	09 f4       	brne	.+2      	; 0xb62 <gfx_mono_generic_draw_horizontal_line+0x24>
     b60:	4a c0       	rjmp	.+148    	; 0xbf6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b62:	d6 2f       	mov	r29, r22
     b64:	d6 95       	lsr	r29
     b66:	d6 95       	lsr	r29
     b68:	d6 95       	lsr	r29
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	98 e0       	ldi	r25, 0x08	; 8
     b6e:	d9 9f       	mul	r29, r25
     b70:	60 19       	sub	r22, r0
     b72:	71 09       	sbc	r23, r1
     b74:	11 24       	eor	r1, r1
     b76:	e1 e0       	ldi	r30, 0x01	; 1
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	df 01       	movw	r26, r30
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <gfx_mono_generic_draw_horizontal_line+0x44>
     b7e:	aa 0f       	add	r26, r26
     b80:	bb 1f       	adc	r27, r27
     b82:	6a 95       	dec	r22
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <gfx_mono_generic_draw_horizontal_line+0x40>
     b86:	fa 2e       	mov	r15, r26
     b88:	21 30       	cpi	r18, 0x01	; 1
     b8a:	21 f0       	breq	.+8      	; 0xb94 <gfx_mono_generic_draw_horizontal_line+0x56>
     b8c:	98 f0       	brcs	.+38     	; 0xbb4 <gfx_mono_generic_draw_horizontal_line+0x76>
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	19 f1       	breq	.+70     	; 0xbd8 <gfx_mono_generic_draw_horizontal_line+0x9a>
     b92:	31 c0       	rjmp	.+98     	; 0xbf6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b94:	c4 2f       	mov	r28, r20
     b96:	1f ef       	ldi	r17, 0xFF	; 255
     b98:	18 0f       	add	r17, r24
     b9a:	01 2f       	mov	r16, r17
     b9c:	0c 0f       	add	r16, r28
     b9e:	60 2f       	mov	r22, r16
     ba0:	8d 2f       	mov	r24, r29
     ba2:	aa df       	rcall	.-172    	; 0xaf8 <gfx_mono_st7565r_get_byte>
     ba4:	4f 2d       	mov	r20, r15
     ba6:	48 2b       	or	r20, r24
     ba8:	60 2f       	mov	r22, r16
     baa:	8d 2f       	mov	r24, r29
     bac:	86 de       	rcall	.-756    	; 0x8ba <gfx_mono_st7565r_put_byte>
     bae:	c1 50       	subi	r28, 0x01	; 1
     bb0:	a1 f7       	brne	.-24     	; 0xb9a <gfx_mono_generic_draw_horizontal_line+0x5c>
     bb2:	21 c0       	rjmp	.+66     	; 0xbf6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bb4:	c4 2f       	mov	r28, r20
     bb6:	1f ef       	ldi	r17, 0xFF	; 255
     bb8:	18 0f       	add	r17, r24
     bba:	fa 2e       	mov	r15, r26
     bbc:	f0 94       	com	r15
     bbe:	01 2f       	mov	r16, r17
     bc0:	0c 0f       	add	r16, r28
     bc2:	60 2f       	mov	r22, r16
     bc4:	8d 2f       	mov	r24, r29
     bc6:	98 df       	rcall	.-208    	; 0xaf8 <gfx_mono_st7565r_get_byte>
     bc8:	4f 2d       	mov	r20, r15
     bca:	48 23       	and	r20, r24
     bcc:	60 2f       	mov	r22, r16
     bce:	8d 2f       	mov	r24, r29
     bd0:	74 de       	rcall	.-792    	; 0x8ba <gfx_mono_st7565r_put_byte>
     bd2:	c1 50       	subi	r28, 0x01	; 1
     bd4:	a1 f7       	brne	.-24     	; 0xbbe <gfx_mono_generic_draw_horizontal_line+0x80>
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bd8:	c4 2f       	mov	r28, r20
     bda:	1f ef       	ldi	r17, 0xFF	; 255
     bdc:	18 0f       	add	r17, r24
     bde:	01 2f       	mov	r16, r17
     be0:	0c 0f       	add	r16, r28
     be2:	60 2f       	mov	r22, r16
     be4:	8d 2f       	mov	r24, r29
     be6:	88 df       	rcall	.-240    	; 0xaf8 <gfx_mono_st7565r_get_byte>
     be8:	4f 2d       	mov	r20, r15
     bea:	48 27       	eor	r20, r24
     bec:	60 2f       	mov	r22, r16
     bee:	8d 2f       	mov	r24, r29
     bf0:	64 de       	rcall	.-824    	; 0x8ba <gfx_mono_st7565r_put_byte>
     bf2:	c1 50       	subi	r28, 0x01	; 1
     bf4:	a1 f7       	brne	.-24     	; 0xbde <gfx_mono_generic_draw_horizontal_line+0xa0>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	08 95       	ret

00000c02 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
	if (height == 0) {
     c0c:	22 23       	and	r18, r18
     c0e:	69 f0       	breq	.+26     	; 0xc2a <gfx_mono_generic_draw_filled_rect+0x28>
     c10:	f4 2e       	mov	r15, r20
     c12:	18 2f       	mov	r17, r24
     c14:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c16:	df ef       	ldi	r29, 0xFF	; 255
     c18:	d6 0f       	add	r29, r22
     c1a:	6d 2f       	mov	r22, r29
     c1c:	6c 0f       	add	r22, r28
     c1e:	20 2f       	mov	r18, r16
     c20:	4f 2d       	mov	r20, r15
     c22:	81 2f       	mov	r24, r17
     c24:	8c df       	rcall	.-232    	; 0xb3e <gfx_mono_generic_draw_horizontal_line>
     c26:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c28:	c1 f7       	brne	.-16     	; 0xc1a <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	08 95       	ret

00000c36 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c36:	af 92       	push	r10
     c38:	bf 92       	push	r11
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	c8 2f       	mov	r28, r24
     c4c:	e6 2e       	mov	r14, r22
     c4e:	b4 2e       	mov	r11, r20
     c50:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	24 81       	ldd	r18, Z+4	; 0x04
     c58:	43 81       	ldd	r20, Z+3	; 0x03
     c5a:	6b 2d       	mov	r22, r11
     c5c:	8e 2d       	mov	r24, r14
     c5e:	d1 df       	rcall	.-94     	; 0xc02 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c60:	f6 01       	movw	r30, r12
     c62:	80 81       	ld	r24, Z
     c64:	81 11       	cpse	r24, r1
     c66:	39 c0       	rjmp	.+114    	; 0xcda <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c68:	83 81       	ldd	r24, Z+3	; 0x03
     c6a:	28 2f       	mov	r18, r24
     c6c:	26 95       	lsr	r18
     c6e:	26 95       	lsr	r18
     c70:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c72:	87 70       	andi	r24, 0x07	; 7
     c74:	09 f0       	breq	.+2      	; 0xc78 <gfx_mono_draw_char+0x42>
		char_row_size++;
     c76:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c78:	f6 01       	movw	r30, r12
     c7a:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c7c:	8c 2f       	mov	r24, r28
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	35 81       	ldd	r19, Z+5	; 0x05
     c82:	83 1b       	sub	r24, r19
     c84:	91 09       	sbc	r25, r1
     c86:	2a 9d       	mul	r18, r10
     c88:	90 01       	movw	r18, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	82 9f       	mul	r24, r18
     c8e:	a0 01       	movw	r20, r0
     c90:	83 9f       	mul	r24, r19
     c92:	50 0d       	add	r21, r0
     c94:	92 9f       	mul	r25, r18
     c96:	50 0d       	add	r21, r0
     c98:	11 24       	eor	r1, r1
     c9a:	01 81       	ldd	r16, Z+1	; 0x01
     c9c:	12 81       	ldd	r17, Z+2	; 0x02
     c9e:	04 0f       	add	r16, r20
     ca0:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     ca2:	f6 01       	movw	r30, r12
     ca4:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     ca6:	ff 20       	and	r15, r15
     ca8:	a1 f0       	breq	.+40     	; 0xcd2 <gfx_mono_draw_char+0x9c>
     caa:	d0 e0       	ldi	r29, 0x00	; 0
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	8e 2d       	mov	r24, r14
     cb0:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cb2:	9c 2f       	mov	r25, r28
     cb4:	97 70       	andi	r25, 0x07	; 7
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     cb8:	f8 01       	movw	r30, r16
     cba:	d4 91       	lpm	r29, Z
				glyph_data++;
     cbc:	0f 5f       	subi	r16, 0xFF	; 255
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     cc0:	dd 23       	and	r29, r29
     cc2:	1c f4       	brge	.+6      	; 0xcca <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	6b 2d       	mov	r22, r11
     cc8:	e1 de       	rcall	.-574    	; 0xa8c <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     cca:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     ccc:	cf 5f       	subi	r28, 0xFF	; 255
     cce:	fc 12       	cpse	r15, r28
     cd0:	ee cf       	rjmp	.-36     	; 0xcae <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     cd2:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     cd4:	aa 94       	dec	r10
	} while (rows_left > 0);
     cd6:	a1 10       	cpse	r10, r1
     cd8:	e4 cf       	rjmp	.-56     	; 0xca2 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	08 95       	ret

00000cf0 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	d6 2e       	mov	r13, r22
     d00:	04 2f       	mov	r16, r20
     d02:	79 01       	movw	r14, r18
     d04:	ec 01       	movw	r28, r24
     d06:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d08:	89 91       	ld	r24, Y+
     d0a:	8a 30       	cpi	r24, 0x0A	; 10
     d0c:	31 f4       	brne	.+12     	; 0xd1a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d0e:	f7 01       	movw	r30, r14
     d10:	84 81       	ldd	r24, Z+4	; 0x04
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d16:	1d 2d       	mov	r17, r13
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d1a:	8d 30       	cpi	r24, 0x0D	; 13
     d1c:	39 f0       	breq	.+14     	; 0xd2c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d1e:	97 01       	movw	r18, r14
     d20:	40 2f       	mov	r20, r16
     d22:	61 2f       	mov	r22, r17
     d24:	88 df       	rcall	.-240    	; 0xc36 <gfx_mono_draw_char>
			x += font->width;
     d26:	f7 01       	movw	r30, r14
     d28:	83 81       	ldd	r24, Z+3	; 0x03
     d2a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d2c:	88 81       	ld	r24, Y
     d2e:	81 11       	cpse	r24, r1
     d30:	eb cf       	rjmp	.-42     	; 0xd08 <gfx_mono_draw_string+0x18>
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	08 95       	ret

00000d42 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d4c:	c6 2f       	mov	r28, r22
     d4e:	d0 e0       	ldi	r29, 0x00	; 0
     d50:	de 01       	movw	r26, r28
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <ioport_configure_port_pin+0x18>
     d56:	b5 95       	asr	r27
     d58:	a7 95       	ror	r26
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <ioport_configure_port_pin+0x14>
     d5e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d60:	50 8b       	std	Z+16, r21	; 0x10
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d68:	28 30       	cpi	r18, 0x08	; 8
     d6a:	31 05       	cpc	r19, r1
     d6c:	89 f7       	brne	.-30     	; 0xd50 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d6e:	40 ff       	sbrs	r20, 0
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d72:	41 ff       	sbrs	r20, 1
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d76:	fc 01       	movw	r30, r24
     d78:	65 83       	std	Z+5, r22	; 0x05
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d7c:	fc 01       	movw	r30, r24
     d7e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d80:	fc 01       	movw	r30, r24
     d82:	61 83       	std	Z+1, r22	; 0x01
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d86:	fc 01       	movw	r30, r24
     d88:	62 83       	std	Z+2, r22	; 0x02
	}
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     d90:	80 3a       	cpi	r24, 0xA0	; 160
     d92:	28 e0       	ldi	r18, 0x08	; 8
     d94:	92 07       	cpc	r25, r18
     d96:	21 f4       	brne	.+8      	; 0xda0 <usart_spi_init+0x10>
     d98:	60 e1       	ldi	r22, 0x10	; 16
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	78 cd       	rjmp	.-1296   	; 0x88e <sysclk_enable_module>
     d9e:	08 95       	ret
     da0:	80 3b       	cpi	r24, 0xB0	; 176
     da2:	28 e0       	ldi	r18, 0x08	; 8
     da4:	92 07       	cpc	r25, r18
     da6:	21 f4       	brne	.+8      	; 0xdb0 <usart_spi_init+0x20>
     da8:	60 e2       	ldi	r22, 0x20	; 32
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	70 cd       	rjmp	.-1312   	; 0x88e <sysclk_enable_module>
     dae:	08 95       	ret
     db0:	80 3a       	cpi	r24, 0xA0	; 160
     db2:	29 e0       	ldi	r18, 0x09	; 9
     db4:	92 07       	cpc	r25, r18
     db6:	21 f4       	brne	.+8      	; 0xdc0 <usart_spi_init+0x30>
     db8:	60 e1       	ldi	r22, 0x10	; 16
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	68 cd       	rjmp	.-1328   	; 0x88e <sysclk_enable_module>
     dbe:	08 95       	ret
     dc0:	80 3b       	cpi	r24, 0xB0	; 176
     dc2:	29 e0       	ldi	r18, 0x09	; 9
     dc4:	92 07       	cpc	r25, r18
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <usart_spi_init+0x40>
     dc8:	60 e2       	ldi	r22, 0x20	; 32
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	60 cd       	rjmp	.-1344   	; 0x88e <sysclk_enable_module>
     dce:	08 95       	ret
     dd0:	80 3a       	cpi	r24, 0xA0	; 160
     dd2:	2a e0       	ldi	r18, 0x0A	; 10
     dd4:	92 07       	cpc	r25, r18
     dd6:	21 f4       	brne	.+8      	; 0xde0 <usart_spi_init+0x50>
     dd8:	60 e1       	ldi	r22, 0x10	; 16
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	58 cd       	rjmp	.-1360   	; 0x88e <sysclk_enable_module>
     dde:	08 95       	ret
     de0:	80 3a       	cpi	r24, 0xA0	; 160
     de2:	9b 40       	sbci	r25, 0x0B	; 11
     de4:	19 f4       	brne	.+6      	; 0xdec <usart_spi_init+0x5c>
     de6:	60 e1       	ldi	r22, 0x10	; 16
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	51 cd       	rjmp	.-1374   	; 0x88e <sysclk_enable_module>
     dec:	08 95       	ret

00000dee <usart_spi_setup_device>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <usart_spi_setup_device+0xa>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <usart_spi_setup_device+0xc>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	09 83       	std	Y+1, r16	; 0x01
     e00:	1a 83       	std	Y+2, r17	; 0x02
     e02:	2b 83       	std	Y+3, r18	; 0x03
     e04:	3c 83       	std	Y+4, r19	; 0x04
     e06:	4d 83       	std	Y+5, r20	; 0x05
     e08:	1e 82       	std	Y+6, r1	; 0x06
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	02 d1       	rcall	.+516    	; 0x1016 <usart_init_spi>
     e12:	26 96       	adiw	r28, 0x06	; 6
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e22:	fb 01       	movw	r30, r22
     e24:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e26:	e8 2f       	mov	r30, r24
     e28:	e6 95       	lsr	r30
     e2a:	e6 95       	lsr	r30
     e2c:	e6 95       	lsr	r30
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	e4 9f       	mul	r30, r20
     e32:	f0 01       	movw	r30, r0
     e34:	11 24       	eor	r1, r1
     e36:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e38:	87 70       	andi	r24, 0x07	; 7
     e3a:	21 e0       	ldi	r18, 0x01	; 1
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	a9 01       	movw	r20, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <usart_spi_select_device+0x24>
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	8a 95       	dec	r24
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e4a:	46 83       	std	Z+6, r20	; 0x06
     e4c:	08 95       	ret

00000e4e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e4e:	fb 01       	movw	r30, r22
     e50:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e52:	e8 2f       	mov	r30, r24
     e54:	e6 95       	lsr	r30
     e56:	e6 95       	lsr	r30
     e58:	e6 95       	lsr	r30
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	e4 9f       	mul	r30, r20
     e5e:	f0 01       	movw	r30, r0
     e60:	11 24       	eor	r1, r1
     e62:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e64:	87 70       	andi	r24, 0x07	; 7
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <usart_spi_deselect_device+0x24>
     e6e:	44 0f       	add	r20, r20
     e70:	55 1f       	adc	r21, r21
     e72:	8a 95       	dec	r24
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e76:	45 83       	std	Z+5, r20	; 0x05
     e78:	08 95       	ret

00000e7a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e7a:	43 e0       	ldi	r20, 0x03	; 3
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	80 ee       	ldi	r24, 0xE0	; 224
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	5e df       	rcall	.-324    	; 0xd42 <ioport_configure_port_pin>
     e86:	43 e0       	ldi	r20, 0x03	; 3
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	62 e0       	ldi	r22, 0x02	; 2
     e8c:	80 ee       	ldi	r24, 0xE0	; 224
     e8e:	97 e0       	ldi	r25, 0x07	; 7
     e90:	58 df       	rcall	.-336    	; 0xd42 <ioport_configure_port_pin>
     e92:	43 e0       	ldi	r20, 0x03	; 3
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	60 e1       	ldi	r22, 0x10	; 16
     e98:	80 e6       	ldi	r24, 0x60	; 96
     e9a:	96 e0       	ldi	r25, 0x06	; 6
     e9c:	52 df       	rcall	.-348    	; 0xd42 <ioport_configure_port_pin>
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	50 e4       	ldi	r21, 0x40	; 64
     ea2:	60 e2       	ldi	r22, 0x20	; 32
     ea4:	80 e6       	ldi	r24, 0x60	; 96
     ea6:	96 e0       	ldi	r25, 0x06	; 6
     ea8:	4c df       	rcall	.-360    	; 0xd42 <ioport_configure_port_pin>
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	5b e1       	ldi	r21, 0x1B	; 27
     eae:	60 e2       	ldi	r22, 0x20	; 32
     eb0:	80 e8       	ldi	r24, 0x80	; 128
     eb2:	96 e0       	ldi	r25, 0x06	; 6
     eb4:	46 df       	rcall	.-372    	; 0xd42 <ioport_configure_port_pin>
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	5b e1       	ldi	r21, 0x1B	; 27
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	80 ea       	ldi	r24, 0xA0	; 160
     ebe:	96 e0       	ldi	r25, 0x06	; 6
     ec0:	40 df       	rcall	.-384    	; 0xd42 <ioport_configure_port_pin>
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	5b e1       	ldi	r21, 0x1B	; 27
     ec6:	64 e0       	ldi	r22, 0x04	; 4
     ec8:	80 ea       	ldi	r24, 0xA0	; 160
     eca:	96 e0       	ldi	r25, 0x06	; 6
     ecc:	3a df       	rcall	.-396    	; 0xd42 <ioport_configure_port_pin>
     ece:	43 e0       	ldi	r20, 0x03	; 3
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	62 e0       	ldi	r22, 0x02	; 2
     ed4:	80 e6       	ldi	r24, 0x60	; 96
     ed6:	96 e0       	ldi	r25, 0x06	; 6
     ed8:	34 df       	rcall	.-408    	; 0xd42 <ioport_configure_port_pin>
     eda:	43 e0       	ldi	r20, 0x03	; 3
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	68 e0       	ldi	r22, 0x08	; 8
     ee0:	80 e6       	ldi	r24, 0x60	; 96
     ee2:	96 e0       	ldi	r25, 0x06	; 6
     ee4:	2e df       	rcall	.-420    	; 0xd42 <ioport_configure_port_pin>
     ee6:	43 e0       	ldi	r20, 0x03	; 3
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	68 e0       	ldi	r22, 0x08	; 8
     eec:	80 ea       	ldi	r24, 0xA0	; 160
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	28 df       	rcall	.-432    	; 0xd42 <ioport_configure_port_pin>
     ef2:	43 e0       	ldi	r20, 0x03	; 3
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	80 e6       	ldi	r24, 0x60	; 96
     efa:	96 e0       	ldi	r25, 0x06	; 6
     efc:	22 df       	rcall	.-444    	; 0xd42 <ioport_configure_port_pin>
     efe:	43 e0       	ldi	r20, 0x03	; 3
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	68 e0       	ldi	r22, 0x08	; 8
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	1c df       	rcall	.-456    	; 0xd42 <ioport_configure_port_pin>
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 e1       	ldi	r22, 0x10	; 16
     f10:	80 e8       	ldi	r24, 0x80	; 128
     f12:	96 e0       	ldi	r25, 0x06	; 6
     f14:	16 df       	rcall	.-468    	; 0xd42 <ioport_configure_port_pin>
     f16:	43 e0       	ldi	r20, 0x03	; 3
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	80 e6       	ldi	r24, 0x60	; 96
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	10 df       	rcall	.-480    	; 0xd42 <ioport_configure_port_pin>
     f22:	43 e0       	ldi	r20, 0x03	; 3
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	68 e0       	ldi	r22, 0x08	; 8
     f28:	80 e6       	ldi	r24, 0x60	; 96
     f2a:	96 e0       	ldi	r25, 0x06	; 6
     f2c:	0a df       	rcall	.-492    	; 0xd42 <ioport_configure_port_pin>
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	64 e0       	ldi	r22, 0x04	; 4
     f34:	80 e6       	ldi	r24, 0x60	; 96
     f36:	96 e0       	ldi	r25, 0x06	; 6
     f38:	04 df       	rcall	.-504    	; 0xd42 <ioport_configure_port_pin>
     f3a:	43 e0       	ldi	r20, 0x03	; 3
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	60 e1       	ldi	r22, 0x10	; 16
     f40:	80 ea       	ldi	r24, 0xA0	; 160
     f42:	96 e0       	ldi	r25, 0x06	; 6
     f44:	fe de       	rcall	.-516    	; 0xd42 <ioport_configure_port_pin>
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	96 e0       	ldi	r25, 0x06	; 6
     f50:	f8 de       	rcall	.-528    	; 0xd42 <ioport_configure_port_pin>
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	64 e0       	ldi	r22, 0x04	; 4
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	96 e0       	ldi	r25, 0x06	; 6
     f5c:	f2 de       	rcall	.-540    	; 0xd42 <ioport_configure_port_pin>
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	62 e0       	ldi	r22, 0x02	; 2
     f64:	80 e2       	ldi	r24, 0x20	; 32
     f66:	96 e0       	ldi	r25, 0x06	; 6
     f68:	ec de       	rcall	.-552    	; 0xd42 <ioport_configure_port_pin>
     f6a:	43 e0       	ldi	r20, 0x03	; 3
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	68 e0       	ldi	r22, 0x08	; 8
     f70:	80 e4       	ldi	r24, 0x40	; 64
     f72:	96 e0       	ldi	r25, 0x06	; 6
     f74:	e6 de       	rcall	.-564    	; 0xd42 <ioport_configure_port_pin>
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	80 e4       	ldi	r24, 0x40	; 64
     f7e:	96 e0       	ldi	r25, 0x06	; 6
     f80:	e0 de       	rcall	.-576    	; 0xd42 <ioport_configure_port_pin>
     f82:	43 e0       	ldi	r20, 0x03	; 3
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	68 e0       	ldi	r22, 0x08	; 8
     f88:	80 e6       	ldi	r24, 0x60	; 96
     f8a:	96 e0       	ldi	r25, 0x06	; 6
     f8c:	da de       	rcall	.-588    	; 0xd42 <ioport_configure_port_pin>
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	64 e0       	ldi	r22, 0x04	; 4
     f94:	80 e6       	ldi	r24, 0x60	; 96
     f96:	96 e0       	ldi	r25, 0x06	; 6
     f98:	d4 de       	rcall	.-600    	; 0xd42 <ioport_configure_port_pin>
     f9a:	43 e0       	ldi	r20, 0x03	; 3
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	68 e0       	ldi	r22, 0x08	; 8
     fa0:	80 e8       	ldi	r24, 0x80	; 128
     fa2:	96 e0       	ldi	r25, 0x06	; 6
     fa4:	ce de       	rcall	.-612    	; 0xd42 <ioport_configure_port_pin>
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	64 e0       	ldi	r22, 0x04	; 4
     fac:	80 e8       	ldi	r24, 0x80	; 128
     fae:	96 e0       	ldi	r25, 0x06	; 6
     fb0:	c8 ce       	rjmp	.-624    	; 0xd42 <ioport_configure_port_pin>
     fb2:	08 95       	ret

00000fb4 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     fc6:	d9 01       	movw	r26, r18
     fc8:	c8 01       	movw	r24, r16
     fca:	b6 95       	lsr	r27
     fcc:	a7 95       	ror	r26
     fce:	97 95       	ror	r25
     fd0:	87 95       	ror	r24
     fd2:	48 17       	cp	r20, r24
     fd4:	59 07       	cpc	r21, r25
     fd6:	6a 07       	cpc	r22, r26
     fd8:	7b 07       	cpc	r23, r27
     fda:	70 f4       	brcc	.+28     	; 0xff8 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     fdc:	6a 01       	movw	r12, r20
     fde:	7b 01       	movw	r14, r22
     fe0:	cc 0c       	add	r12, r12
     fe2:	dd 1c       	adc	r13, r13
     fe4:	ee 1c       	adc	r14, r14
     fe6:	ff 1c       	adc	r15, r15
     fe8:	c9 01       	movw	r24, r18
     fea:	b8 01       	movw	r22, r16
     fec:	a7 01       	movw	r20, r14
     fee:	96 01       	movw	r18, r12
     ff0:	d7 d2       	rcall	.+1454   	; 0x15a0 <__udivmodsi4>
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	31 09       	sbc	r19, r1
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     ffc:	83 2f       	mov	r24, r19
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1002:	2e 83       	std	Y+6, r18	; 0x06
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	08 95       	ret

00001016 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	1f 92       	push	r1
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	7c 01       	movw	r14, r24
    102c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	09 f4       	brne	.+2      	; 0x1034 <usart_init_spi+0x1e>
    1032:	b2 c1       	rjmp	.+868    	; 0x1398 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1034:	80 3c       	cpi	r24, 0xC0	; 192
    1036:	91 05       	cpc	r25, r1
    1038:	21 f4       	brne	.+8      	; 0x1042 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    103a:	60 e1       	ldi	r22, 0x10	; 16
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	27 dc       	rcall	.-1970   	; 0x88e <sysclk_enable_module>
    1040:	ab c1       	rjmp	.+854    	; 0x1398 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1042:	80 e8       	ldi	r24, 0x80	; 128
    1044:	e8 16       	cp	r14, r24
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	f8 06       	cpc	r15, r24
    104a:	21 f4       	brne	.+8      	; 0x1054 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	1e dc       	rcall	.-1988   	; 0x88e <sysclk_enable_module>
    1052:	a2 c1       	rjmp	.+836    	; 0x1398 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1054:	e1 14       	cp	r14, r1
    1056:	e1 e0       	ldi	r30, 0x01	; 1
    1058:	fe 06       	cpc	r15, r30
    105a:	21 f4       	brne	.+8      	; 0x1064 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	16 dc       	rcall	.-2004   	; 0x88e <sysclk_enable_module>
    1062:	9a c1       	rjmp	.+820    	; 0x1398 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1064:	f0 e8       	ldi	r31, 0x80	; 128
    1066:	ef 16       	cp	r14, r31
    1068:	f3 e0       	ldi	r31, 0x03	; 3
    106a:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    106c:	21 f4       	brne	.+8      	; 0x1076 <usart_init_spi+0x60>
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	0d dc       	rcall	.-2022   	; 0x88e <sysclk_enable_module>
    1074:	91 c1       	rjmp	.+802    	; 0x1398 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1076:	30 e9       	ldi	r19, 0x90	; 144
    1078:	e3 16       	cp	r14, r19
    107a:	33 e0       	ldi	r19, 0x03	; 3
    107c:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    107e:	21 f4       	brne	.+8      	; 0x1088 <usart_init_spi+0x72>
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	04 dc       	rcall	.-2040   	; 0x88e <sysclk_enable_module>
    1086:	88 c1       	rjmp	.+784    	; 0x1398 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1088:	e1 14       	cp	r14, r1
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    108e:	21 f4       	brne	.+8      	; 0x1098 <usart_init_spi+0x82>
    1090:	62 e0       	ldi	r22, 0x02	; 2
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	fc db       	rcall	.-2056   	; 0x88e <sysclk_enable_module>
    1096:	80 c1       	rjmp	.+768    	; 0x1398 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1098:	e0 e4       	ldi	r30, 0x40	; 64
    109a:	ee 16       	cp	r14, r30
    109c:	e2 e0       	ldi	r30, 0x02	; 2
    109e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    10a0:	21 f4       	brne	.+8      	; 0x10aa <usart_init_spi+0x94>
    10a2:	62 e0       	ldi	r22, 0x02	; 2
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	f3 db       	rcall	.-2074   	; 0x88e <sysclk_enable_module>
    10a8:	77 c1       	rjmp	.+750    	; 0x1398 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    10aa:	f0 e2       	ldi	r31, 0x20	; 32
    10ac:	ef 16       	cp	r14, r31
    10ae:	f3 e0       	ldi	r31, 0x03	; 3
    10b0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    10b2:	21 f4       	brne	.+8      	; 0x10bc <usart_init_spi+0xa6>
    10b4:	64 e0       	ldi	r22, 0x04	; 4
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	ea db       	rcall	.-2092   	; 0x88e <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    10ba:	6e c1       	rjmp	.+732    	; 0x1398 <usart_init_spi+0x382>
    10bc:	e1 14       	cp	r14, r1
    10be:	38 e0       	ldi	r19, 0x08	; 8
    10c0:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10c2:	21 f4       	brne	.+8      	; 0x10cc <usart_init_spi+0xb6>
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	e2 db       	rcall	.-2108   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10ca:	66 c1       	rjmp	.+716    	; 0x1398 <usart_init_spi+0x382>
    10cc:	e1 14       	cp	r14, r1
    10ce:	89 e0       	ldi	r24, 0x09	; 9
    10d0:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10d2:	21 f4       	brne	.+8      	; 0x10dc <usart_init_spi+0xc6>
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	84 e0       	ldi	r24, 0x04	; 4
    10d8:	da db       	rcall	.-2124   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10da:	5e c1       	rjmp	.+700    	; 0x1398 <usart_init_spi+0x382>
    10dc:	e1 14       	cp	r14, r1
    10de:	ea e0       	ldi	r30, 0x0A	; 10
    10e0:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10e2:	21 f4       	brne	.+8      	; 0x10ec <usart_init_spi+0xd6>
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	85 e0       	ldi	r24, 0x05	; 5
    10e8:	d2 db       	rcall	.-2140   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    10ea:	56 c1       	rjmp	.+684    	; 0x1398 <usart_init_spi+0x382>
    10ec:	e1 14       	cp	r14, r1
    10ee:	fb e0       	ldi	r31, 0x0B	; 11
    10f0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    10f2:	21 f4       	brne	.+8      	; 0x10fc <usart_init_spi+0xe6>
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	ca db       	rcall	.-2156   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    10fa:	4e c1       	rjmp	.+668    	; 0x1398 <usart_init_spi+0x382>
    10fc:	30 e4       	ldi	r19, 0x40	; 64
    10fe:	e3 16       	cp	r14, r19
    1100:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1102:	f3 06       	cpc	r15, r19
    1104:	21 f4       	brne	.+8      	; 0x110e <usart_init_spi+0xf8>
    1106:	62 e0       	ldi	r22, 0x02	; 2
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	c1 db       	rcall	.-2174   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    110c:	45 c1       	rjmp	.+650    	; 0x1398 <usart_init_spi+0x382>
    110e:	80 e4       	ldi	r24, 0x40	; 64
    1110:	e8 16       	cp	r14, r24
    1112:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1114:	f8 06       	cpc	r15, r24
    1116:	21 f4       	brne	.+8      	; 0x1120 <usart_init_spi+0x10a>
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	b8 db       	rcall	.-2192   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    111e:	3c c1       	rjmp	.+632    	; 0x1398 <usart_init_spi+0x382>
    1120:	e0 e4       	ldi	r30, 0x40	; 64
    1122:	ee 16       	cp	r14, r30
    1124:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1126:	fe 06       	cpc	r15, r30
    1128:	21 f4       	brne	.+8      	; 0x1132 <usart_init_spi+0x11c>
    112a:	62 e0       	ldi	r22, 0x02	; 2
    112c:	85 e0       	ldi	r24, 0x05	; 5
    112e:	af db       	rcall	.-2210   	; 0x88e <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1130:	33 c1       	rjmp	.+614    	; 0x1398 <usart_init_spi+0x382>
    1132:	f0 e9       	ldi	r31, 0x90	; 144
    1134:	ef 16       	cp	r14, r31
    1136:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1138:	ff 06       	cpc	r15, r31
    113a:	21 f4       	brne	.+8      	; 0x1144 <usart_init_spi+0x12e>
    113c:	64 e0       	ldi	r22, 0x04	; 4
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	a6 db       	rcall	.-2228   	; 0x88e <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1142:	2a c1       	rjmp	.+596    	; 0x1398 <usart_init_spi+0x382>
    1144:	30 e9       	ldi	r19, 0x90	; 144
    1146:	e3 16       	cp	r14, r19
    1148:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    114a:	f3 06       	cpc	r15, r19
    114c:	21 f4       	brne	.+8      	; 0x1156 <usart_init_spi+0x140>
    114e:	64 e0       	ldi	r22, 0x04	; 4
    1150:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1152:	9d db       	rcall	.-2246   	; 0x88e <sysclk_enable_module>
    1154:	21 c1       	rjmp	.+578    	; 0x1398 <usart_init_spi+0x382>
    1156:	80 e9       	ldi	r24, 0x90	; 144
    1158:	e8 16       	cp	r14, r24
    115a:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    115c:	f8 06       	cpc	r15, r24
    115e:	21 f4       	brne	.+8      	; 0x1168 <usart_init_spi+0x152>
    1160:	64 e0       	ldi	r22, 0x04	; 4
    1162:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1164:	94 db       	rcall	.-2264   	; 0x88e <sysclk_enable_module>
    1166:	18 c1       	rjmp	.+560    	; 0x1398 <usart_init_spi+0x382>
    1168:	e0 e9       	ldi	r30, 0x90	; 144
    116a:	ee 16       	cp	r14, r30
    116c:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    116e:	fe 06       	cpc	r15, r30
    1170:	21 f4       	brne	.+8      	; 0x117a <usart_init_spi+0x164>
    1172:	64 e0       	ldi	r22, 0x04	; 4
    1174:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1176:	8b db       	rcall	.-2282   	; 0x88e <sysclk_enable_module>
    1178:	0f c1       	rjmp	.+542    	; 0x1398 <usart_init_spi+0x382>
    117a:	f0 ec       	ldi	r31, 0xC0	; 192
    117c:	ef 16       	cp	r14, r31
    117e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1180:	ff 06       	cpc	r15, r31
    1182:	21 f4       	brne	.+8      	; 0x118c <usart_init_spi+0x176>
    1184:	68 e0       	ldi	r22, 0x08	; 8
    1186:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1188:	82 db       	rcall	.-2300   	; 0x88e <sysclk_enable_module>
    118a:	06 c1       	rjmp	.+524    	; 0x1398 <usart_init_spi+0x382>
    118c:	30 ec       	ldi	r19, 0xC0	; 192
    118e:	e3 16       	cp	r14, r19
    1190:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1192:	f3 06       	cpc	r15, r19
    1194:	21 f4       	brne	.+8      	; 0x119e <usart_init_spi+0x188>
    1196:	68 e0       	ldi	r22, 0x08	; 8
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	79 db       	rcall	.-2318   	; 0x88e <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    119c:	fd c0       	rjmp	.+506    	; 0x1398 <usart_init_spi+0x382>
    119e:	80 ea       	ldi	r24, 0xA0	; 160
    11a0:	e8 16       	cp	r14, r24
    11a2:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    11a4:	f8 06       	cpc	r15, r24
    11a6:	61 f4       	brne	.+24     	; 0x11c0 <usart_init_spi+0x1aa>
    11a8:	60 e1       	ldi	r22, 0x10	; 16
    11aa:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    11ac:	70 db       	rcall	.-2336   	; 0x88e <sysclk_enable_module>
    11ae:	e0 ea       	ldi	r30, 0xA0	; 160
    11b0:	f8 e0       	ldi	r31, 0x08	; 8
    11b2:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    11b4:	8f 7e       	andi	r24, 0xEF	; 239
    11b6:	84 83       	std	Z+4, r24	; 0x04
    11b8:	f8 01       	movw	r30, r16
    11ba:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    11bc:	22 50       	subi	r18, 0x02	; 2
    11be:	4c c0       	rjmp	.+152    	; 0x1258 <usart_init_spi+0x242>
    11c0:	f0 ea       	ldi	r31, 0xA0	; 160
    11c2:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11c4:	f9 e0       	ldi	r31, 0x09	; 9
    11c6:	ff 06       	cpc	r15, r31
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <usart_init_spi+0x1bc>
    11ca:	60 e1       	ldi	r22, 0x10	; 16
    11cc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11ce:	5f db       	rcall	.-2370   	; 0x88e <sysclk_enable_module>
    11d0:	e3 c0       	rjmp	.+454    	; 0x1398 <usart_init_spi+0x382>
    11d2:	30 ea       	ldi	r19, 0xA0	; 160
    11d4:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11d6:	3a e0       	ldi	r19, 0x0A	; 10
    11d8:	f3 06       	cpc	r15, r19
    11da:	21 f4       	brne	.+8      	; 0x11e4 <usart_init_spi+0x1ce>
    11dc:	60 e1       	ldi	r22, 0x10	; 16
    11de:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11e0:	56 db       	rcall	.-2388   	; 0x88e <sysclk_enable_module>
    11e2:	da c0       	rjmp	.+436    	; 0x1398 <usart_init_spi+0x382>
    11e4:	80 ea       	ldi	r24, 0xA0	; 160
    11e6:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    11e8:	8b e0       	ldi	r24, 0x0B	; 11
    11ea:	f8 06       	cpc	r15, r24
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <usart_init_spi+0x1e0>
    11ee:	60 e1       	ldi	r22, 0x10	; 16
    11f0:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11f2:	4d db       	rcall	.-2406   	; 0x88e <sysclk_enable_module>
    11f4:	d1 c0       	rjmp	.+418    	; 0x1398 <usart_init_spi+0x382>
    11f6:	e0 eb       	ldi	r30, 0xB0	; 176
    11f8:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11fa:	e8 e0       	ldi	r30, 0x08	; 8
    11fc:	fe 06       	cpc	r15, r30
    11fe:	21 f4       	brne	.+8      	; 0x1208 <usart_init_spi+0x1f2>
    1200:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	44 db       	rcall	.-2424   	; 0x88e <sysclk_enable_module>
    1206:	c8 c0       	rjmp	.+400    	; 0x1398 <usart_init_spi+0x382>
    1208:	f0 eb       	ldi	r31, 0xB0	; 176
    120a:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    120c:	f9 e0       	ldi	r31, 0x09	; 9
    120e:	ff 06       	cpc	r15, r31
    1210:	21 f4       	brne	.+8      	; 0x121a <usart_init_spi+0x204>
    1212:	60 e2       	ldi	r22, 0x20	; 32
    1214:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1216:	3b db       	rcall	.-2442   	; 0x88e <sysclk_enable_module>
    1218:	bf c0       	rjmp	.+382    	; 0x1398 <usart_init_spi+0x382>
    121a:	30 e8       	ldi	r19, 0x80	; 128
    121c:	e3 16       	cp	r14, r19
    121e:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1220:	f3 06       	cpc	r15, r19
    1222:	21 f4       	brne	.+8      	; 0x122c <usart_init_spi+0x216>
    1224:	60 e4       	ldi	r22, 0x40	; 64
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	32 db       	rcall	.-2460   	; 0x88e <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    122a:	b6 c0       	rjmp	.+364    	; 0x1398 <usart_init_spi+0x382>
    122c:	80 ea       	ldi	r24, 0xA0	; 160
    122e:	e8 16       	cp	r14, r24
    1230:	84 e0       	ldi	r24, 0x04	; 4
    1232:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1234:	21 f4       	brne	.+8      	; 0x123e <usart_init_spi+0x228>
    1236:	60 e4       	ldi	r22, 0x40	; 64
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	29 db       	rcall	.-2478   	; 0x88e <sysclk_enable_module>
    123c:	ad c0       	rjmp	.+346    	; 0x1398 <usart_init_spi+0x382>
    123e:	f7 01       	movw	r30, r14
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	8f 7e       	andi	r24, 0xEF	; 239
    1244:	84 83       	std	Z+4, r24	; 0x04
    1246:	fb 01       	movw	r30, r22
    1248:	24 81       	ldd	r18, Z+4	; 0x04
    124a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    124c:	c7 01       	movw	r24, r14
    124e:	f0 ea       	ldi	r31, 0xA0	; 160
    1250:	ef 16       	cp	r14, r31
    1252:	f8 e0       	ldi	r31, 0x08	; 8
    1254:	ff 06       	cpc	r15, r31
    1256:	49 f4       	brne	.+18     	; 0x126a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1258:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    125c:	84 fd       	sbrc	r24, 4
    125e:	a5 c0       	rjmp	.+330    	; 0x13aa <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1260:	0f 2e       	mov	r0, r31
    1262:	f1 e1       	ldi	r31, 0x11	; 17
    1264:	df 2e       	mov	r13, r31
    1266:	f0 2d       	mov	r31, r0
    1268:	a4 c0       	rjmp	.+328    	; 0x13b2 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    126a:	80 3b       	cpi	r24, 0xB0	; 176
    126c:	38 e0       	ldi	r19, 0x08	; 8
    126e:	93 07       	cpc	r25, r19
    1270:	91 f0       	breq	.+36     	; 0x1296 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1272:	80 3a       	cpi	r24, 0xA0	; 160
    1274:	e9 e0       	ldi	r30, 0x09	; 9
    1276:	9e 07       	cpc	r25, r30
    1278:	49 f4       	brne	.+18     	; 0x128c <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    127a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    127e:	34 fd       	sbrc	r19, 4
    1280:	9b c0       	rjmp	.+310    	; 0x13b8 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1282:	0f 2e       	mov	r0, r31
    1284:	f9 e1       	ldi	r31, 0x19	; 25
    1286:	df 2e       	mov	r13, r31
    1288:	f0 2d       	mov	r31, r0
    128a:	16 c0       	rjmp	.+44     	; 0x12b8 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    128c:	80 3b       	cpi	r24, 0xB0	; 176
    128e:	f9 e0       	ldi	r31, 0x09	; 9
    1290:	9f 07       	cpc	r25, r31
    1292:	f1 f0       	breq	.+60     	; 0x12d0 <usart_init_spi+0x2ba>
    1294:	04 c0       	rjmp	.+8      	; 0x129e <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1296:	0f 2e       	mov	r0, r31
    1298:	f5 e1       	ldi	r31, 0x15	; 21
    129a:	df 2e       	mov	r13, r31
    129c:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    129e:	80 3a       	cpi	r24, 0xA0	; 160
    12a0:	3a e0       	ldi	r19, 0x0A	; 10
    12a2:	93 07       	cpc	r25, r19
    12a4:	49 f4       	brne	.+18     	; 0x12b8 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    12a6:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    12aa:	84 fd       	sbrc	r24, 4
    12ac:	8a c0       	rjmp	.+276    	; 0x13c2 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f1 e2       	ldi	r31, 0x21	; 33
    12b2:	df 2e       	mov	r13, r31
    12b4:	f0 2d       	mov	r31, r0
    12b6:	15 c0       	rjmp	.+42     	; 0x12e2 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    12b8:	80 3a       	cpi	r24, 0xA0	; 160
    12ba:	9b 40       	sbci	r25, 0x0B	; 11
    12bc:	91 f4       	brne	.+36     	; 0x12e2 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    12be:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    12c2:	84 fd       	sbrc	r24, 4
    12c4:	0a c0       	rjmp	.+20     	; 0x12da <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    12c6:	0f 2e       	mov	r0, r31
    12c8:	f9 e2       	ldi	r31, 0x29	; 41
    12ca:	df 2e       	mov	r13, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12d0:	0f 2e       	mov	r0, r31
    12d2:	fd e1       	ldi	r31, 0x1D	; 29
    12d4:	df 2e       	mov	r13, r31
    12d6:	f0 2d       	mov	r31, r0
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    12da:	0f 2e       	mov	r0, r31
    12dc:	fd e2       	ldi	r31, 0x2D	; 45
    12de:	df 2e       	mov	r13, r31
    12e0:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12e2:	ed 2d       	mov	r30, r13
    12e4:	e6 95       	lsr	r30
    12e6:	e6 95       	lsr	r30
    12e8:	e6 95       	lsr	r30
    12ea:	30 e2       	ldi	r19, 0x20	; 32
    12ec:	e3 9f       	mul	r30, r19
    12ee:	f0 01       	movw	r30, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	fa 5f       	subi	r31, 0xFA	; 250
    12f4:	3d 2d       	mov	r19, r13
    12f6:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	03 2e       	mov	r0, r19
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <usart_init_spi+0x2ee>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1308:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	10 f0       	brcs	.+4      	; 0x1312 <usart_init_spi+0x2fc>
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <usart_init_spi+0x2fe>
    1312:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1314:	df 01       	movw	r26, r30
    1316:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1318:	a3 0f       	add	r26, r19
    131a:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    131c:	9f b7       	in	r25, 0x3f	; 63
    131e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1320:	f8 94       	cli
	return flags;
    1322:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1324:	2c 91       	ld	r18, X
    1326:	27 70       	andi	r18, 0x07	; 7
    1328:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    132a:	9c 91       	ld	r25, X
    132c:	94 2b       	or	r25, r20
    132e:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1330:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1332:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1334:	f7 01       	movw	r30, r14
    1336:	85 81       	ldd	r24, Z+5	; 0x05
    1338:	80 6c       	ori	r24, 0xC0	; 192
    133a:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    133c:	f8 01       	movw	r30, r16
    133e:	84 81       	ldd	r24, Z+4	; 0x04
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	29 f4       	brne	.+10     	; 0x1350 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1346:	f7 01       	movw	r30, r14
    1348:	85 81       	ldd	r24, Z+5	; 0x05
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <usart_init_spi+0x342>
    1350:	f7 01       	movw	r30, r14
    1352:	85 81       	ldd	r24, Z+5	; 0x05
    1354:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    1356:	85 83       	std	Z+5, r24	; 0x05
    1358:	f8 01       	movw	r30, r16
    135a:	85 81       	ldd	r24, Z+5	; 0x05
    135c:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    135e:	29 f0       	breq	.+10     	; 0x136a <usart_init_spi+0x354>
    1360:	f7 01       	movw	r30, r14
    1362:	85 81       	ldd	r24, Z+5	; 0x05
    1364:	84 60       	ori	r24, 0x04	; 4
    1366:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <usart_init_spi+0x35c>
    136a:	f7 01       	movw	r30, r14
    136c:	85 81       	ldd	r24, Z+5	; 0x05
    136e:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1370:	85 83       	std	Z+5, r24	; 0x05
    1372:	f8 01       	movw	r30, r16
    1374:	40 81       	ld	r20, Z
    1376:	51 81       	ldd	r21, Z+1	; 0x01
    1378:	62 81       	ldd	r22, Z+2	; 0x02
    137a:	73 81       	ldd	r23, Z+3	; 0x03
    137c:	00 e8       	ldi	r16, 0x80	; 128
    137e:	14 e8       	ldi	r17, 0x84	; 132
    1380:	2e e1       	ldi	r18, 0x1E	; 30
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	c7 01       	movw	r24, r14
    1386:	16 de       	rcall	.-980    	; 0xfb4 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1388:	f7 01       	movw	r30, r14
    138a:	84 81       	ldd	r24, Z+4	; 0x04
    138c:	88 60       	ori	r24, 0x08	; 8
    138e:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1390:	84 81       	ldd	r24, Z+4	; 0x04
    1392:	80 61       	ori	r24, 0x10	; 16
    1394:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1396:	1a c0       	rjmp	.+52     	; 0x13cc <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1398:	f7 01       	movw	r30, r14
    139a:	84 81       	ldd	r24, Z+4	; 0x04
    139c:	8f 7e       	andi	r24, 0xEF	; 239
    139e:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    13a0:	f8 01       	movw	r30, r16
    13a2:	24 81       	ldd	r18, Z+4	; 0x04
    13a4:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    13a6:	c7 01       	movw	r24, r14
    13a8:	60 cf       	rjmp	.-320    	; 0x126a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    13aa:	0f 2e       	mov	r0, r31
    13ac:	f5 e1       	ldi	r31, 0x15	; 21
    13ae:	df 2e       	mov	r13, r31
    13b0:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    13b2:	80 ea       	ldi	r24, 0xA0	; 160
    13b4:	98 e0       	ldi	r25, 0x08	; 8
    13b6:	6a cf       	rjmp	.-300    	; 0x128c <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    13b8:	0f 2e       	mov	r0, r31
    13ba:	fd e1       	ldi	r31, 0x1D	; 29
    13bc:	df 2e       	mov	r13, r31
    13be:	f0 2d       	mov	r31, r0
    13c0:	7b cf       	rjmp	.-266    	; 0x12b8 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    13c2:	0f 2e       	mov	r0, r31
    13c4:	f5 e2       	ldi	r31, 0x25	; 37
    13c6:	df 2e       	mov	r13, r31
    13c8:	f0 2d       	mov	r31, r0
    13ca:	8b cf       	rjmp	.-234    	; 0x12e2 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	08 95       	ret

000013de <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    13e0:	61 50       	subi	r22, 0x01	; 1
    13e2:	71 09       	sbc	r23, r1
    13e4:	81 09       	sbc	r24, r1
    13e6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    13e8:	61 15       	cp	r22, r1
    13ea:	71 05       	cpc	r23, r1
    13ec:	81 05       	cpc	r24, r1
    13ee:	91 05       	cpc	r25, r1
    13f0:	b9 f7       	brne	.-18     	; 0x13e0 <__portable_avr_delay_cycles+0x2>
    13f2:	08 95       	ret

000013f4 <__vector_104>:
volatile bool toggle_state = false; // Status untuk kedap-kedip bergantian
static char strbuf[128];           // Buffer untuk tampilan LCD

// ISR untuk SW0 (PORTF PIN1)
ISR(PORTF_INT0_vect)
{
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
	door_open = !door_open;   // Toggle status pintu
    1402:	90 91 c6 22 	lds	r25, 0x22C6	; 0x8022c6 <door_open>
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 27       	eor	r24, r25
    140a:	80 93 c6 22 	sts	0x22C6, r24	; 0x8022c6 <door_open>
	alarm_active = door_open; // Set status alarm berdasarkan status pintu
    140e:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <door_open>
    1412:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <alarm_active>
	counter = 0;              // Reset counter setiap kali status berubah
    1416:	10 92 c5 22 	sts	0x22C5, r1	; 0x8022c5 <counter>
}
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <init_interrupts>:

// Inisialisasi interrupt eksternal untuk SW0
void init_interrupts(void)
{
	PORTF.DIRCLR = PIN1_bm;  // Set PIN1 sebagai input (SW0)
    1428:	e0 ea       	ldi	r30, 0xA0	; 160
    142a:	f6 e0       	ldi	r31, 0x06	; 6
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN1CTRL |= PORT_OPC_PULLUP_gc | PORT_ISC_BOTHEDGES_gc;  // Detect both edges
    1430:	81 89       	ldd	r24, Z+17	; 0x11
    1432:	88 61       	ori	r24, 0x18	; 24
    1434:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.INT0MASK = PIN1_bm;  // Enable interrupt untuk PIN1
    1436:	92 87       	std	Z+10, r25	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;  // Set level interrupt ke low
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	81 87       	std	Z+9, r24	; 0x09
	PMIC.CTRL |= PMIC_LOLVLEN_bm;  // Enable low-level interrupts
    143c:	e0 ea       	ldi	r30, 0xA0	; 160
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	81 60       	ori	r24, 0x01	; 1
    1444:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();  // Enable global interrupts
    1446:	78 94       	sei
    1448:	08 95       	ret

0000144a <setup_led>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    144a:	e0 e6       	ldi	r30, 0x60	; 96
    144c:	f6 e0       	ldi	r31, 0x06	; 6
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	81 83       	std	Z+1, r24	; 0x01
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1456:	e0 ee       	ldi	r30, 0xE0	; 224
    1458:	f7 e0       	ldi	r31, 0x07	; 7
    145a:	95 83       	std	Z+5, r25	; 0x05
    145c:	85 83       	std	Z+5, r24	; 0x05
    145e:	08 95       	ret

00001460 <setup_pwm_buzzer>:

// Setup PWM untuk buzzer
void setup_pwm_buzzer(void)
{
	/* Set output */
	PORTC.DIR |= PIN0_bm;
    1460:	e0 e4       	ldi	r30, 0x40	; 64
    1462:	f6 e0       	ldi	r31, 0x06	; 6
    1464:	80 81       	ld	r24, Z
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm; //(PIN2_bm) | (PIN0_bm);
    146a:	e0 e0       	ldi	r30, 0x00	; 0
    146c:	f8 e0       	ldi	r31, 0x08	; 8
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    1472:	86 e1       	ldi	r24, 0x16	; 22
    1474:	81 83       	std	Z+1, r24	; 0x01
	
	/* Set Period */
	TCC0.PER = 1000;
    1476:	88 ee       	ldi	r24, 0xE8	; 232
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	86 a3       	std	Z+38, r24	; 0x26
    147c:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value*/
	TCC0.CCA = 0;
    147e:	10 a6       	std	Z+40, r1	; 0x28
    1480:	11 a6       	std	Z+41, r1	; 0x29
    1482:	08 95       	ret

00001484 <setup_lcd>:
}

// Inisialisasi LCD
void setup_lcd(void)
{
	gfx_mono_init();
    1484:	c1 da       	rcall	.-2686   	; 0xa08 <gfx_mono_st7565r_init>
    1486:	80 e1       	ldi	r24, 0x10	; 16
    1488:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);  // Aktifkan backlight
	gfx_mono_draw_string("Alarm Pintu", 0, 0, &sysfont);  // Pesan awal
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e2       	ldi	r19, 0x20	; 32
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	87 e0       	ldi	r24, 0x07	; 7
    1496:	90 e2       	ldi	r25, 0x20	; 32
    1498:	2b cc       	rjmp	.-1962   	; 0xcf0 <gfx_mono_draw_string>
    149a:	08 95       	ret

0000149c <main>:

// Fungsi utama
int main(void)
{
	// Inisialisasi board dan sistem
	board_init();
    149c:	ee dc       	rcall	.-1572   	; 0xe7a <board_init>
	sysclk_init();
    149e:	e7 d9       	rcall	.-3122   	; 0x86e <sysclk_init>
	setup_lcd();
    14a0:	f1 df       	rcall	.-30     	; 0x1484 <setup_lcd>
	setup_led();  // Inisialisasi LED
    14a2:	d3 df       	rcall	.-90     	; 0x144a <setup_led>
    14a4:	dd df       	rcall	.-70     	; 0x1460 <setup_pwm_buzzer>
	setup_pwm_buzzer();
    14a6:	c0 df       	rcall	.-128    	; 0x1428 <init_interrupts>
    14a8:	c1 2c       	mov	r12, r1
	init_interrupts();
    14aa:	68 94       	set
    14ac:	dd 24       	eor	r13, r13
			// Tambah counter setiap detik
			delay_ms(500);  // Tunggu 1 detik
			counter++;
			} else {  // Jika alarm tidak aktif (pintu tertutup)
			// Reset semua
			TCC0.CCA = 200;  // Matikan buzzer
    14ae:	d3 f8       	bld	r13, 3
    14b0:	0f 2e       	mov	r0, r31
    14b2:	f8 ec       	ldi	r31, 0xC8	; 200
    14b4:	af 2e       	mov	r10, r31
    14b6:	b1 2c       	mov	r11, r1
    14b8:	f0 2d       	mov	r31, r0
    14ba:	c0 ee       	ldi	r28, 0xE0	; 224
    14bc:	d7 e0       	ldi	r29, 0x07	; 7
    14be:	44 24       	eor	r4, r4
    14c0:	43 94       	inc	r4
    14c2:	68 94       	set
    14c4:	55 24       	eor	r5, r5
    14c6:	51 f8       	bld	r5, 1
    14c8:	0f 2e       	mov	r0, r31
    14ca:	f1 e2       	ldi	r31, 0x21	; 33
    14cc:	ef 2e       	mov	r14, r31
	// Loop utama
	while (1) {
		if (alarm_active) {  // Jika alarm aktif (pintu terbuka)
			// Tampilkan status pintu dan counter di LCD
			gfx_mono_draw_string("Pintu Terbuka", 0, 0, &sysfont);
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
    14ce:	f0 e2       	ldi	r31, 0x20	; 32
    14d0:	ff 2e       	mov	r15, r31
    14d2:	f0 2d       	mov	r31, r0
    14d4:	68 94       	set
    14d6:	33 24       	eor	r3, r3
    14d8:	37 f8       	bld	r3, 7
    14da:	04 e4       	ldi	r16, 0x44	; 68
    14dc:	12 e2       	ldi	r17, 0x22	; 34
    14de:	0f 2e       	mov	r0, r31
    14e0:	f8 ee       	ldi	r31, 0xE8	; 232
    14e2:	8f 2e       	mov	r8, r31
				delay_ms(100);  // Tunda untuk simulasi
				} else {
				// Sebelum 10 detik, nyalakan LED0 dan LED1 secara bersamaan
				LED_On(LED0);
				LED_On(LED1);
				TCC0.CCA = 1000;  // Intensitas normal buzzer
    14e4:	f3 e0       	ldi	r31, 0x03	; 3
    14e6:	9f 2e       	mov	r9, r31
    14e8:	f0 2d       	mov	r31, r0
    14ea:	66 24       	eor	r6, r6
    14ec:	6a 94       	dec	r6
    14ee:	71 2c       	mov	r7, r1
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
			gfx_mono_draw_string(strbuf, 0, 16, &sysfont);

			// Kedip LED0 dan LED1 jika lebih dari 10 detik
			if (counter >= 5) {
				TCC0.CCA = 255;  // Intensitas maksimal buzzer
    14f0:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <alarm_active>
    14f4:	88 23       	and	r24, r24


	
	// Loop utama
	while (1) {
		if (alarm_active) {  // Jika alarm aktif (pintu terbuka)
    14f6:	09 f4       	brne	.+2      	; 0x14fa <main+0x5e>
    14f8:	44 c0       	rjmp	.+136    	; 0x1582 <main+0xe6>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e2       	ldi	r19, 0x20	; 32
    14fe:	40 e0       	ldi	r20, 0x00	; 0
			// Tampilkan status pintu dan counter di LCD
			gfx_mono_draw_string("Pintu Terbuka", 0, 0, &sysfont);
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	83 e1       	ldi	r24, 0x13	; 19
    1504:	90 e2       	ldi	r25, 0x20	; 32
    1506:	f4 db       	rcall	.-2072   	; 0xcf0 <gfx_mono_draw_string>
    1508:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <counter>
    150c:	1f 92       	push	r1
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d detik", counter);
    150e:	8f 93       	push	r24
    1510:	ff 92       	push	r15
    1512:	ef 92       	push	r14
    1514:	1f 92       	push	r1
    1516:	3f 92       	push	r3
    1518:	1f 93       	push	r17
    151a:	0f 93       	push	r16
    151c:	63 d0       	rcall	.+198    	; 0x15e4 <snprintf>
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e2       	ldi	r19, 0x20	; 32
			gfx_mono_draw_string(strbuf, 0, 16, &sysfont);
    1522:	40 e1       	ldi	r20, 0x10	; 16
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	c8 01       	movw	r24, r16
    1528:	e3 db       	rcall	.-2106   	; 0xcf0 <gfx_mono_draw_string>
    152a:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <counter>
    152e:	2d b7       	in	r18, 0x3d	; 61

			// Kedip LED0 dan LED1 jika lebih dari 10 detik
			if (counter >= 5) {
    1530:	3e b7       	in	r19, 0x3e	; 62
    1532:	28 5f       	subi	r18, 0xF8	; 248
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	2d bf       	out	0x3d, r18	; 61
    1538:	3e bf       	out	0x3e, r19	; 62
    153a:	85 30       	cpi	r24, 0x05	; 5
    153c:	90 f0       	brcs	.+36     	; 0x1562 <main+0xc6>
    153e:	f6 01       	movw	r30, r12
    1540:	60 a6       	std	Z+40, r6	; 0x28
    1542:	71 a6       	std	Z+41, r7	; 0x29
				TCC0.CCA = 255;  // Intensitas maksimal buzzer
    1544:	4e 82       	std	Y+6, r4	; 0x06
    1546:	5d 82       	std	Y+5, r5	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1548:	66 e3       	ldi	r22, 0x36	; 54
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    154a:	72 e8       	ldi	r23, 0x82	; 130

				LED_On(LED0);  // Nyalakan LED0, Matikan LED1
				LED_Off(LED1);
				delay_ms(100);  // Tunda untuk simulasi
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	46 df       	rcall	.-372    	; 0x13de <__portable_avr_delay_cycles>
    1552:	4d 82       	std	Y+5, r4	; 0x05
    1554:	5e 82       	std	Y+6, r5	; 0x06
    1556:	66 e3       	ldi	r22, 0x36	; 54
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1558:	72 e8       	ldi	r23, 0x82	; 130
				LED_Off(LED0);  // Nyalakan LED1, Matikan LED0
				LED_On(LED1);
				delay_ms(100);  // Tunda untuk simulasi
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	3f df       	rcall	.-386    	; 0x13de <__portable_avr_delay_cycles>
    1560:	05 c0       	rjmp	.+10     	; 0x156c <main+0xd0>
    1562:	4e 82       	std	Y+6, r4	; 0x06
    1564:	5e 82       	std	Y+6, r5	; 0x06
    1566:	f6 01       	movw	r30, r12
    1568:	80 a6       	std	Z+40, r8	; 0x28
				} else {
				// Sebelum 10 detik, nyalakan LED0 dan LED1 secara bersamaan
				LED_On(LED0);
				LED_On(LED1);
				TCC0.CCA = 1000;  // Intensitas normal buzzer
    156a:	91 a6       	std	Z+41, r9	; 0x29
    156c:	6b e0       	ldi	r22, 0x0B	; 11
    156e:	7b e8       	ldi	r23, 0x8B	; 139
			}
			// Tambah counter setiap detik
			delay_ms(500);  // Tunggu 1 detik
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	34 df       	rcall	.-408    	; 0x13de <__portable_avr_delay_cycles>
    1576:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <counter>
    157a:	8f 5f       	subi	r24, 0xFF	; 255
			counter++;
    157c:	80 93 c5 22 	sts	0x22C5, r24	; 0x8022c5 <counter>
    1580:	b7 cf       	rjmp	.-146    	; 0x14f0 <main+0x54>
    1582:	f6 01       	movw	r30, r12
    1584:	a0 a6       	std	Z+40, r10	; 0x28
			} else {  // Jika alarm tidak aktif (pintu tertutup)
			// Reset semua
			TCC0.CCA = 200;  // Matikan buzzer
    1586:	b1 a6       	std	Z+41, r11	; 0x29
    1588:	4d 82       	std	Y+5, r4	; 0x05
    158a:	5d 82       	std	Y+5, r5	; 0x05
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e2       	ldi	r19, 0x20	; 32
			LED_Off(LED0);  // Nyalakan LED1, Matikan LED0
			LED_Off(LED1);
			gfx_mono_draw_string("Pintu Tertutup", 0, 0, &sysfont);  // Update status di LCD
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	83 e3       	ldi	r24, 0x33	; 51
    1596:	90 e2       	ldi	r25, 0x20	; 32
    1598:	ab db       	rcall	.-2218   	; 0xcf0 <gfx_mono_draw_string>
    159a:	10 92 c5 22 	sts	0x22C5, r1	; 0x8022c5 <counter>
    159e:	a8 cf       	rjmp	.-176    	; 0x14f0 <main+0x54>

000015a0 <__udivmodsi4>:
			counter = 0;  // Reset counter
    15a0:	a1 e2       	ldi	r26, 0x21	; 33
    15a2:	1a 2e       	mov	r1, r26
    15a4:	aa 1b       	sub	r26, r26
    15a6:	bb 1b       	sub	r27, r27
    15a8:	fd 01       	movw	r30, r26
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <__udivmodsi4_ep>

000015ac <__udivmodsi4_loop>:
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	ee 1f       	adc	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	a2 17       	cp	r26, r18
    15b6:	b3 07       	cpc	r27, r19
    15b8:	e4 07       	cpc	r30, r20
    15ba:	f5 07       	cpc	r31, r21
    15bc:	20 f0       	brcs	.+8      	; 0x15c6 <__udivmodsi4_ep>
    15be:	a2 1b       	sub	r26, r18
    15c0:	b3 0b       	sbc	r27, r19
    15c2:	e4 0b       	sbc	r30, r20
    15c4:	f5 0b       	sbc	r31, r21

000015c6 <__udivmodsi4_ep>:
    15c6:	66 1f       	adc	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	1a 94       	dec	r1
    15d0:	69 f7       	brne	.-38     	; 0x15ac <__udivmodsi4_loop>
    15d2:	60 95       	com	r22
    15d4:	70 95       	com	r23
    15d6:	80 95       	com	r24
    15d8:	90 95       	com	r25
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	bd 01       	movw	r22, r26
    15e0:	cf 01       	movw	r24, r30
    15e2:	08 95       	ret

000015e4 <snprintf>:
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	2e 97       	sbiw	r28, 0x0e	; 14
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0e 89       	ldd	r16, Y+22	; 0x16
    15f8:	1f 89       	ldd	r17, Y+23	; 0x17
    15fa:	88 8d       	ldd	r24, Y+24	; 0x18
    15fc:	99 8d       	ldd	r25, Y+25	; 0x19
    15fe:	26 e0       	ldi	r18, 0x06	; 6
    1600:	2c 83       	std	Y+4, r18	; 0x04
    1602:	09 83       	std	Y+1, r16	; 0x01
    1604:	1a 83       	std	Y+2, r17	; 0x02
    1606:	97 ff       	sbrs	r25, 7
    1608:	02 c0       	rjmp	.+4      	; 0x160e <snprintf+0x2a>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e8       	ldi	r25, 0x80	; 128
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	ae 01       	movw	r20, r28
    1616:	44 5e       	subi	r20, 0xE4	; 228
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
    161a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    161c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	16 d0       	rcall	.+44     	; 0x1650 <vfprintf>
    1624:	4d 81       	ldd	r20, Y+5	; 0x05
    1626:	5e 81       	ldd	r21, Y+6	; 0x06
    1628:	57 fd       	sbrc	r21, 7
    162a:	0a c0       	rjmp	.+20     	; 0x1640 <snprintf+0x5c>
    162c:	2f 81       	ldd	r18, Y+7	; 0x07
    162e:	38 85       	ldd	r19, Y+8	; 0x08
    1630:	42 17       	cp	r20, r18
    1632:	53 07       	cpc	r21, r19
    1634:	0c f4       	brge	.+2      	; 0x1638 <snprintf+0x54>
    1636:	9a 01       	movw	r18, r20
    1638:	f8 01       	movw	r30, r16
    163a:	e2 0f       	add	r30, r18
    163c:	f3 1f       	adc	r31, r19
    163e:	10 82       	st	Z, r1
    1640:	2e 96       	adiw	r28, 0x0e	; 14
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	08 95       	ret

00001650 <vfprintf>:
    1650:	2f 92       	push	r2
    1652:	3f 92       	push	r3
    1654:	4f 92       	push	r4
    1656:	5f 92       	push	r5
    1658:	6f 92       	push	r6
    165a:	7f 92       	push	r7
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	2b 97       	sbiw	r28, 0x0b	; 11
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	6c 01       	movw	r12, r24
    1680:	7b 01       	movw	r14, r22
    1682:	8a 01       	movw	r16, r20
    1684:	fc 01       	movw	r30, r24
    1686:	16 82       	std	Z+6, r1	; 0x06
    1688:	17 82       	std	Z+7, r1	; 0x07
    168a:	83 81       	ldd	r24, Z+3	; 0x03
    168c:	81 ff       	sbrs	r24, 1
    168e:	bf c1       	rjmp	.+894    	; 0x1a0e <vfprintf+0x3be>
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	3c 01       	movw	r6, r24
    1696:	f6 01       	movw	r30, r12
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	f7 01       	movw	r30, r14
    169c:	93 fd       	sbrc	r25, 3
    169e:	85 91       	lpm	r24, Z+
    16a0:	93 ff       	sbrs	r25, 3
    16a2:	81 91       	ld	r24, Z+
    16a4:	7f 01       	movw	r14, r30
    16a6:	88 23       	and	r24, r24
    16a8:	09 f4       	brne	.+2      	; 0x16ac <vfprintf+0x5c>
    16aa:	ad c1       	rjmp	.+858    	; 0x1a06 <vfprintf+0x3b6>
    16ac:	85 32       	cpi	r24, 0x25	; 37
    16ae:	39 f4       	brne	.+14     	; 0x16be <vfprintf+0x6e>
    16b0:	93 fd       	sbrc	r25, 3
    16b2:	85 91       	lpm	r24, Z+
    16b4:	93 ff       	sbrs	r25, 3
    16b6:	81 91       	ld	r24, Z+
    16b8:	7f 01       	movw	r14, r30
    16ba:	85 32       	cpi	r24, 0x25	; 37
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <vfprintf+0x76>
    16be:	b6 01       	movw	r22, r12
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	d3 d1       	rcall	.+934    	; 0x1a6a <fputc>
    16c4:	e8 cf       	rjmp	.-48     	; 0x1696 <vfprintf+0x46>
    16c6:	91 2c       	mov	r9, r1
    16c8:	21 2c       	mov	r2, r1
    16ca:	31 2c       	mov	r3, r1
    16cc:	ff e1       	ldi	r31, 0x1F	; 31
    16ce:	f3 15       	cp	r31, r3
    16d0:	d8 f0       	brcs	.+54     	; 0x1708 <vfprintf+0xb8>
    16d2:	8b 32       	cpi	r24, 0x2B	; 43
    16d4:	79 f0       	breq	.+30     	; 0x16f4 <vfprintf+0xa4>
    16d6:	38 f4       	brcc	.+14     	; 0x16e6 <vfprintf+0x96>
    16d8:	80 32       	cpi	r24, 0x20	; 32
    16da:	79 f0       	breq	.+30     	; 0x16fa <vfprintf+0xaa>
    16dc:	83 32       	cpi	r24, 0x23	; 35
    16de:	a1 f4       	brne	.+40     	; 0x1708 <vfprintf+0xb8>
    16e0:	23 2d       	mov	r18, r3
    16e2:	20 61       	ori	r18, 0x10	; 16
    16e4:	1d c0       	rjmp	.+58     	; 0x1720 <vfprintf+0xd0>
    16e6:	8d 32       	cpi	r24, 0x2D	; 45
    16e8:	61 f0       	breq	.+24     	; 0x1702 <vfprintf+0xb2>
    16ea:	80 33       	cpi	r24, 0x30	; 48
    16ec:	69 f4       	brne	.+26     	; 0x1708 <vfprintf+0xb8>
    16ee:	23 2d       	mov	r18, r3
    16f0:	21 60       	ori	r18, 0x01	; 1
    16f2:	16 c0       	rjmp	.+44     	; 0x1720 <vfprintf+0xd0>
    16f4:	83 2d       	mov	r24, r3
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	38 2e       	mov	r3, r24
    16fa:	e3 2d       	mov	r30, r3
    16fc:	e4 60       	ori	r30, 0x04	; 4
    16fe:	3e 2e       	mov	r3, r30
    1700:	2a c0       	rjmp	.+84     	; 0x1756 <vfprintf+0x106>
    1702:	f3 2d       	mov	r31, r3
    1704:	f8 60       	ori	r31, 0x08	; 8
    1706:	1d c0       	rjmp	.+58     	; 0x1742 <vfprintf+0xf2>
    1708:	37 fc       	sbrc	r3, 7
    170a:	2d c0       	rjmp	.+90     	; 0x1766 <vfprintf+0x116>
    170c:	20 ed       	ldi	r18, 0xD0	; 208
    170e:	28 0f       	add	r18, r24
    1710:	2a 30       	cpi	r18, 0x0A	; 10
    1712:	40 f0       	brcs	.+16     	; 0x1724 <vfprintf+0xd4>
    1714:	8e 32       	cpi	r24, 0x2E	; 46
    1716:	b9 f4       	brne	.+46     	; 0x1746 <vfprintf+0xf6>
    1718:	36 fc       	sbrc	r3, 6
    171a:	75 c1       	rjmp	.+746    	; 0x1a06 <vfprintf+0x3b6>
    171c:	23 2d       	mov	r18, r3
    171e:	20 64       	ori	r18, 0x40	; 64
    1720:	32 2e       	mov	r3, r18
    1722:	19 c0       	rjmp	.+50     	; 0x1756 <vfprintf+0x106>
    1724:	36 fe       	sbrs	r3, 6
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <vfprintf+0xe4>
    1728:	8a e0       	ldi	r24, 0x0A	; 10
    172a:	98 9e       	mul	r9, r24
    172c:	20 0d       	add	r18, r0
    172e:	11 24       	eor	r1, r1
    1730:	92 2e       	mov	r9, r18
    1732:	11 c0       	rjmp	.+34     	; 0x1756 <vfprintf+0x106>
    1734:	ea e0       	ldi	r30, 0x0A	; 10
    1736:	2e 9e       	mul	r2, r30
    1738:	20 0d       	add	r18, r0
    173a:	11 24       	eor	r1, r1
    173c:	22 2e       	mov	r2, r18
    173e:	f3 2d       	mov	r31, r3
    1740:	f0 62       	ori	r31, 0x20	; 32
    1742:	3f 2e       	mov	r3, r31
    1744:	08 c0       	rjmp	.+16     	; 0x1756 <vfprintf+0x106>
    1746:	8c 36       	cpi	r24, 0x6C	; 108
    1748:	21 f4       	brne	.+8      	; 0x1752 <vfprintf+0x102>
    174a:	83 2d       	mov	r24, r3
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	38 2e       	mov	r3, r24
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <vfprintf+0x106>
    1752:	88 36       	cpi	r24, 0x68	; 104
    1754:	41 f4       	brne	.+16     	; 0x1766 <vfprintf+0x116>
    1756:	f7 01       	movw	r30, r14
    1758:	93 fd       	sbrc	r25, 3
    175a:	85 91       	lpm	r24, Z+
    175c:	93 ff       	sbrs	r25, 3
    175e:	81 91       	ld	r24, Z+
    1760:	7f 01       	movw	r14, r30
    1762:	81 11       	cpse	r24, r1
    1764:	b3 cf       	rjmp	.-154    	; 0x16cc <vfprintf+0x7c>
    1766:	98 2f       	mov	r25, r24
    1768:	9f 7d       	andi	r25, 0xDF	; 223
    176a:	95 54       	subi	r25, 0x45	; 69
    176c:	93 30       	cpi	r25, 0x03	; 3
    176e:	28 f4       	brcc	.+10     	; 0x177a <vfprintf+0x12a>
    1770:	0c 5f       	subi	r16, 0xFC	; 252
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	9f e3       	ldi	r25, 0x3F	; 63
    1776:	99 83       	std	Y+1, r25	; 0x01
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <vfprintf+0x144>
    177a:	83 36       	cpi	r24, 0x63	; 99
    177c:	31 f0       	breq	.+12     	; 0x178a <vfprintf+0x13a>
    177e:	83 37       	cpi	r24, 0x73	; 115
    1780:	71 f0       	breq	.+28     	; 0x179e <vfprintf+0x14e>
    1782:	83 35       	cpi	r24, 0x53	; 83
    1784:	09 f0       	breq	.+2      	; 0x1788 <vfprintf+0x138>
    1786:	55 c0       	rjmp	.+170    	; 0x1832 <vfprintf+0x1e2>
    1788:	20 c0       	rjmp	.+64     	; 0x17ca <vfprintf+0x17a>
    178a:	f8 01       	movw	r30, r16
    178c:	80 81       	ld	r24, Z
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	0e 5f       	subi	r16, 0xFE	; 254
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	88 24       	eor	r8, r8
    1796:	83 94       	inc	r8
    1798:	91 2c       	mov	r9, r1
    179a:	53 01       	movw	r10, r6
    179c:	12 c0       	rjmp	.+36     	; 0x17c2 <vfprintf+0x172>
    179e:	28 01       	movw	r4, r16
    17a0:	f2 e0       	ldi	r31, 0x02	; 2
    17a2:	4f 0e       	add	r4, r31
    17a4:	51 1c       	adc	r5, r1
    17a6:	f8 01       	movw	r30, r16
    17a8:	a0 80       	ld	r10, Z
    17aa:	b1 80       	ldd	r11, Z+1	; 0x01
    17ac:	36 fe       	sbrs	r3, 6
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <vfprintf+0x166>
    17b0:	69 2d       	mov	r22, r9
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <vfprintf+0x16a>
    17b6:	6f ef       	ldi	r22, 0xFF	; 255
    17b8:	7f ef       	ldi	r23, 0xFF	; 255
    17ba:	c5 01       	movw	r24, r10
    17bc:	4b d1       	rcall	.+662    	; 0x1a54 <strnlen>
    17be:	4c 01       	movw	r8, r24
    17c0:	82 01       	movw	r16, r4
    17c2:	f3 2d       	mov	r31, r3
    17c4:	ff 77       	andi	r31, 0x7F	; 127
    17c6:	3f 2e       	mov	r3, r31
    17c8:	15 c0       	rjmp	.+42     	; 0x17f4 <vfprintf+0x1a4>
    17ca:	28 01       	movw	r4, r16
    17cc:	22 e0       	ldi	r18, 0x02	; 2
    17ce:	42 0e       	add	r4, r18
    17d0:	51 1c       	adc	r5, r1
    17d2:	f8 01       	movw	r30, r16
    17d4:	a0 80       	ld	r10, Z
    17d6:	b1 80       	ldd	r11, Z+1	; 0x01
    17d8:	36 fe       	sbrs	r3, 6
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <vfprintf+0x192>
    17dc:	69 2d       	mov	r22, r9
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0x196>
    17e2:	6f ef       	ldi	r22, 0xFF	; 255
    17e4:	7f ef       	ldi	r23, 0xFF	; 255
    17e6:	c5 01       	movw	r24, r10
    17e8:	2a d1       	rcall	.+596    	; 0x1a3e <strnlen_P>
    17ea:	4c 01       	movw	r8, r24
    17ec:	f3 2d       	mov	r31, r3
    17ee:	f0 68       	ori	r31, 0x80	; 128
    17f0:	3f 2e       	mov	r3, r31
    17f2:	82 01       	movw	r16, r4
    17f4:	33 fc       	sbrc	r3, 3
    17f6:	19 c0       	rjmp	.+50     	; 0x182a <vfprintf+0x1da>
    17f8:	82 2d       	mov	r24, r2
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	88 16       	cp	r8, r24
    17fe:	99 06       	cpc	r9, r25
    1800:	a0 f4       	brcc	.+40     	; 0x182a <vfprintf+0x1da>
    1802:	b6 01       	movw	r22, r12
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	30 d1       	rcall	.+608    	; 0x1a6a <fputc>
    180a:	2a 94       	dec	r2
    180c:	f5 cf       	rjmp	.-22     	; 0x17f8 <vfprintf+0x1a8>
    180e:	f5 01       	movw	r30, r10
    1810:	37 fc       	sbrc	r3, 7
    1812:	85 91       	lpm	r24, Z+
    1814:	37 fe       	sbrs	r3, 7
    1816:	81 91       	ld	r24, Z+
    1818:	5f 01       	movw	r10, r30
    181a:	b6 01       	movw	r22, r12
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	25 d1       	rcall	.+586    	; 0x1a6a <fputc>
    1820:	21 10       	cpse	r2, r1
    1822:	2a 94       	dec	r2
    1824:	21 e0       	ldi	r18, 0x01	; 1
    1826:	82 1a       	sub	r8, r18
    1828:	91 08       	sbc	r9, r1
    182a:	81 14       	cp	r8, r1
    182c:	91 04       	cpc	r9, r1
    182e:	79 f7       	brne	.-34     	; 0x180e <vfprintf+0x1be>
    1830:	e1 c0       	rjmp	.+450    	; 0x19f4 <vfprintf+0x3a4>
    1832:	84 36       	cpi	r24, 0x64	; 100
    1834:	11 f0       	breq	.+4      	; 0x183a <vfprintf+0x1ea>
    1836:	89 36       	cpi	r24, 0x69	; 105
    1838:	39 f5       	brne	.+78     	; 0x1888 <vfprintf+0x238>
    183a:	f8 01       	movw	r30, r16
    183c:	37 fe       	sbrs	r3, 7
    183e:	07 c0       	rjmp	.+14     	; 0x184e <vfprintf+0x1fe>
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	0c 5f       	subi	r16, 0xFC	; 252
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	08 c0       	rjmp	.+16     	; 0x185e <vfprintf+0x20e>
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	07 2e       	mov	r0, r23
    1854:	00 0c       	add	r0, r0
    1856:	88 0b       	sbc	r24, r24
    1858:	99 0b       	sbc	r25, r25
    185a:	0e 5f       	subi	r16, 0xFE	; 254
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	f3 2d       	mov	r31, r3
    1860:	ff 76       	andi	r31, 0x6F	; 111
    1862:	3f 2e       	mov	r3, r31
    1864:	97 ff       	sbrs	r25, 7
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x22a>
    1868:	90 95       	com	r25
    186a:	80 95       	com	r24
    186c:	70 95       	com	r23
    186e:	61 95       	neg	r22
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	8f 4f       	sbci	r24, 0xFF	; 255
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	f0 68       	ori	r31, 0x80	; 128
    1878:	3f 2e       	mov	r3, r31
    187a:	2a e0       	ldi	r18, 0x0A	; 10
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	a3 01       	movw	r20, r6
    1880:	30 d1       	rcall	.+608    	; 0x1ae2 <__ultoa_invert>
    1882:	88 2e       	mov	r8, r24
    1884:	86 18       	sub	r8, r6
    1886:	44 c0       	rjmp	.+136    	; 0x1910 <vfprintf+0x2c0>
    1888:	85 37       	cpi	r24, 0x75	; 117
    188a:	31 f4       	brne	.+12     	; 0x1898 <vfprintf+0x248>
    188c:	23 2d       	mov	r18, r3
    188e:	2f 7e       	andi	r18, 0xEF	; 239
    1890:	b2 2e       	mov	r11, r18
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	25 c0       	rjmp	.+74     	; 0x18e2 <vfprintf+0x292>
    1898:	93 2d       	mov	r25, r3
    189a:	99 7f       	andi	r25, 0xF9	; 249
    189c:	b9 2e       	mov	r11, r25
    189e:	8f 36       	cpi	r24, 0x6F	; 111
    18a0:	c1 f0       	breq	.+48     	; 0x18d2 <vfprintf+0x282>
    18a2:	18 f4       	brcc	.+6      	; 0x18aa <vfprintf+0x25a>
    18a4:	88 35       	cpi	r24, 0x58	; 88
    18a6:	79 f0       	breq	.+30     	; 0x18c6 <vfprintf+0x276>
    18a8:	ae c0       	rjmp	.+348    	; 0x1a06 <vfprintf+0x3b6>
    18aa:	80 37       	cpi	r24, 0x70	; 112
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <vfprintf+0x264>
    18ae:	88 37       	cpi	r24, 0x78	; 120
    18b0:	21 f0       	breq	.+8      	; 0x18ba <vfprintf+0x26a>
    18b2:	a9 c0       	rjmp	.+338    	; 0x1a06 <vfprintf+0x3b6>
    18b4:	e9 2f       	mov	r30, r25
    18b6:	e0 61       	ori	r30, 0x10	; 16
    18b8:	be 2e       	mov	r11, r30
    18ba:	b4 fe       	sbrs	r11, 4
    18bc:	0d c0       	rjmp	.+26     	; 0x18d8 <vfprintf+0x288>
    18be:	fb 2d       	mov	r31, r11
    18c0:	f4 60       	ori	r31, 0x04	; 4
    18c2:	bf 2e       	mov	r11, r31
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <vfprintf+0x288>
    18c6:	34 fe       	sbrs	r3, 4
    18c8:	0a c0       	rjmp	.+20     	; 0x18de <vfprintf+0x28e>
    18ca:	29 2f       	mov	r18, r25
    18cc:	26 60       	ori	r18, 0x06	; 6
    18ce:	b2 2e       	mov	r11, r18
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x28e>
    18d2:	28 e0       	ldi	r18, 0x08	; 8
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <vfprintf+0x292>
    18d8:	20 e1       	ldi	r18, 0x10	; 16
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <vfprintf+0x292>
    18de:	20 e1       	ldi	r18, 0x10	; 16
    18e0:	32 e0       	ldi	r19, 0x02	; 2
    18e2:	f8 01       	movw	r30, r16
    18e4:	b7 fe       	sbrs	r11, 7
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <vfprintf+0x2a6>
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	0c 5f       	subi	r16, 0xFC	; 252
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x2b2>
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 5f       	subi	r16, 0xFE	; 254
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
    1902:	a3 01       	movw	r20, r6
    1904:	ee d0       	rcall	.+476    	; 0x1ae2 <__ultoa_invert>
    1906:	88 2e       	mov	r8, r24
    1908:	86 18       	sub	r8, r6
    190a:	fb 2d       	mov	r31, r11
    190c:	ff 77       	andi	r31, 0x7F	; 127
    190e:	3f 2e       	mov	r3, r31
    1910:	36 fe       	sbrs	r3, 6
    1912:	0d c0       	rjmp	.+26     	; 0x192e <vfprintf+0x2de>
    1914:	23 2d       	mov	r18, r3
    1916:	2e 7f       	andi	r18, 0xFE	; 254
    1918:	a2 2e       	mov	r10, r18
    191a:	89 14       	cp	r8, r9
    191c:	58 f4       	brcc	.+22     	; 0x1934 <vfprintf+0x2e4>
    191e:	34 fe       	sbrs	r3, 4
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <vfprintf+0x2e8>
    1922:	32 fc       	sbrc	r3, 2
    1924:	09 c0       	rjmp	.+18     	; 0x1938 <vfprintf+0x2e8>
    1926:	83 2d       	mov	r24, r3
    1928:	8e 7e       	andi	r24, 0xEE	; 238
    192a:	a8 2e       	mov	r10, r24
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <vfprintf+0x2e8>
    192e:	b8 2c       	mov	r11, r8
    1930:	a3 2c       	mov	r10, r3
    1932:	03 c0       	rjmp	.+6      	; 0x193a <vfprintf+0x2ea>
    1934:	b8 2c       	mov	r11, r8
    1936:	01 c0       	rjmp	.+2      	; 0x193a <vfprintf+0x2ea>
    1938:	b9 2c       	mov	r11, r9
    193a:	a4 fe       	sbrs	r10, 4
    193c:	0f c0       	rjmp	.+30     	; 0x195c <vfprintf+0x30c>
    193e:	fe 01       	movw	r30, r28
    1940:	e8 0d       	add	r30, r8
    1942:	f1 1d       	adc	r31, r1
    1944:	80 81       	ld	r24, Z
    1946:	80 33       	cpi	r24, 0x30	; 48
    1948:	21 f4       	brne	.+8      	; 0x1952 <vfprintf+0x302>
    194a:	9a 2d       	mov	r25, r10
    194c:	99 7e       	andi	r25, 0xE9	; 233
    194e:	a9 2e       	mov	r10, r25
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <vfprintf+0x314>
    1952:	a2 fe       	sbrs	r10, 2
    1954:	06 c0       	rjmp	.+12     	; 0x1962 <vfprintf+0x312>
    1956:	b3 94       	inc	r11
    1958:	b3 94       	inc	r11
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <vfprintf+0x314>
    195c:	8a 2d       	mov	r24, r10
    195e:	86 78       	andi	r24, 0x86	; 134
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x314>
    1962:	b3 94       	inc	r11
    1964:	a3 fc       	sbrc	r10, 3
    1966:	10 c0       	rjmp	.+32     	; 0x1988 <vfprintf+0x338>
    1968:	a0 fe       	sbrs	r10, 0
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <vfprintf+0x328>
    196c:	b2 14       	cp	r11, r2
    196e:	80 f4       	brcc	.+32     	; 0x1990 <vfprintf+0x340>
    1970:	28 0c       	add	r2, r8
    1972:	92 2c       	mov	r9, r2
    1974:	9b 18       	sub	r9, r11
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <vfprintf+0x342>
    1978:	b2 14       	cp	r11, r2
    197a:	58 f4       	brcc	.+22     	; 0x1992 <vfprintf+0x342>
    197c:	b6 01       	movw	r22, r12
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	73 d0       	rcall	.+230    	; 0x1a6a <fputc>
    1984:	b3 94       	inc	r11
    1986:	f8 cf       	rjmp	.-16     	; 0x1978 <vfprintf+0x328>
    1988:	b2 14       	cp	r11, r2
    198a:	18 f4       	brcc	.+6      	; 0x1992 <vfprintf+0x342>
    198c:	2b 18       	sub	r2, r11
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <vfprintf+0x344>
    1990:	98 2c       	mov	r9, r8
    1992:	21 2c       	mov	r2, r1
    1994:	a4 fe       	sbrs	r10, 4
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <vfprintf+0x366>
    1998:	b6 01       	movw	r22, r12
    199a:	80 e3       	ldi	r24, 0x30	; 48
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	65 d0       	rcall	.+202    	; 0x1a6a <fputc>
    19a0:	a2 fe       	sbrs	r10, 2
    19a2:	16 c0       	rjmp	.+44     	; 0x19d0 <vfprintf+0x380>
    19a4:	a1 fc       	sbrc	r10, 1
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <vfprintf+0x35e>
    19a8:	88 e7       	ldi	r24, 0x78	; 120
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <vfprintf+0x362>
    19ae:	88 e5       	ldi	r24, 0x58	; 88
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	b6 01       	movw	r22, r12
    19b4:	0c c0       	rjmp	.+24     	; 0x19ce <vfprintf+0x37e>
    19b6:	8a 2d       	mov	r24, r10
    19b8:	86 78       	andi	r24, 0x86	; 134
    19ba:	51 f0       	breq	.+20     	; 0x19d0 <vfprintf+0x380>
    19bc:	a1 fe       	sbrs	r10, 1
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <vfprintf+0x374>
    19c0:	8b e2       	ldi	r24, 0x2B	; 43
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <vfprintf+0x376>
    19c4:	80 e2       	ldi	r24, 0x20	; 32
    19c6:	a7 fc       	sbrc	r10, 7
    19c8:	8d e2       	ldi	r24, 0x2D	; 45
    19ca:	b6 01       	movw	r22, r12
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	4d d0       	rcall	.+154    	; 0x1a6a <fputc>
    19d0:	89 14       	cp	r8, r9
    19d2:	30 f4       	brcc	.+12     	; 0x19e0 <vfprintf+0x390>
    19d4:	b6 01       	movw	r22, r12
    19d6:	80 e3       	ldi	r24, 0x30	; 48
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	47 d0       	rcall	.+142    	; 0x1a6a <fputc>
    19dc:	9a 94       	dec	r9
    19de:	f8 cf       	rjmp	.-16     	; 0x19d0 <vfprintf+0x380>
    19e0:	8a 94       	dec	r8
    19e2:	f3 01       	movw	r30, r6
    19e4:	e8 0d       	add	r30, r8
    19e6:	f1 1d       	adc	r31, r1
    19e8:	80 81       	ld	r24, Z
    19ea:	b6 01       	movw	r22, r12
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	3d d0       	rcall	.+122    	; 0x1a6a <fputc>
    19f0:	81 10       	cpse	r8, r1
    19f2:	f6 cf       	rjmp	.-20     	; 0x19e0 <vfprintf+0x390>
    19f4:	22 20       	and	r2, r2
    19f6:	09 f4       	brne	.+2      	; 0x19fa <vfprintf+0x3aa>
    19f8:	4e ce       	rjmp	.-868    	; 0x1696 <vfprintf+0x46>
    19fa:	b6 01       	movw	r22, r12
    19fc:	80 e2       	ldi	r24, 0x20	; 32
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	34 d0       	rcall	.+104    	; 0x1a6a <fputc>
    1a02:	2a 94       	dec	r2
    1a04:	f7 cf       	rjmp	.-18     	; 0x19f4 <vfprintf+0x3a4>
    1a06:	f6 01       	movw	r30, r12
    1a08:	86 81       	ldd	r24, Z+6	; 0x06
    1a0a:	97 81       	ldd	r25, Z+7	; 0x07
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <vfprintf+0x3c2>
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	9f ef       	ldi	r25, 0xFF	; 255
    1a12:	2b 96       	adiw	r28, 0x0b	; 11
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	bf 90       	pop	r11
    1a2a:	af 90       	pop	r10
    1a2c:	9f 90       	pop	r9
    1a2e:	8f 90       	pop	r8
    1a30:	7f 90       	pop	r7
    1a32:	6f 90       	pop	r6
    1a34:	5f 90       	pop	r5
    1a36:	4f 90       	pop	r4
    1a38:	3f 90       	pop	r3
    1a3a:	2f 90       	pop	r2
    1a3c:	08 95       	ret

00001a3e <strnlen_P>:
    1a3e:	fc 01       	movw	r30, r24
    1a40:	05 90       	lpm	r0, Z+
    1a42:	61 50       	subi	r22, 0x01	; 1
    1a44:	70 40       	sbci	r23, 0x00	; 0
    1a46:	01 10       	cpse	r0, r1
    1a48:	d8 f7       	brcc	.-10     	; 0x1a40 <strnlen_P+0x2>
    1a4a:	80 95       	com	r24
    1a4c:	90 95       	com	r25
    1a4e:	8e 0f       	add	r24, r30
    1a50:	9f 1f       	adc	r25, r31
    1a52:	08 95       	ret

00001a54 <strnlen>:
    1a54:	fc 01       	movw	r30, r24
    1a56:	61 50       	subi	r22, 0x01	; 1
    1a58:	70 40       	sbci	r23, 0x00	; 0
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	01 10       	cpse	r0, r1
    1a5e:	d8 f7       	brcc	.-10     	; 0x1a56 <strnlen+0x2>
    1a60:	80 95       	com	r24
    1a62:	90 95       	com	r25
    1a64:	8e 0f       	add	r24, r30
    1a66:	9f 1f       	adc	r25, r31
    1a68:	08 95       	ret

00001a6a <fputc>:
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	fb 01       	movw	r30, r22
    1a74:	23 81       	ldd	r18, Z+3	; 0x03
    1a76:	21 fd       	sbrc	r18, 1
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <fputc+0x16>
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	2c c0       	rjmp	.+88     	; 0x1ad8 <fputc+0x6e>
    1a80:	22 ff       	sbrs	r18, 2
    1a82:	16 c0       	rjmp	.+44     	; 0x1ab0 <fputc+0x46>
    1a84:	46 81       	ldd	r20, Z+6	; 0x06
    1a86:	57 81       	ldd	r21, Z+7	; 0x07
    1a88:	24 81       	ldd	r18, Z+4	; 0x04
    1a8a:	35 81       	ldd	r19, Z+5	; 0x05
    1a8c:	42 17       	cp	r20, r18
    1a8e:	53 07       	cpc	r21, r19
    1a90:	44 f4       	brge	.+16     	; 0x1aa2 <fputc+0x38>
    1a92:	a0 81       	ld	r26, Z
    1a94:	b1 81       	ldd	r27, Z+1	; 0x01
    1a96:	9d 01       	movw	r18, r26
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	20 83       	st	Z, r18
    1a9e:	31 83       	std	Z+1, r19	; 0x01
    1aa0:	8c 93       	st	X, r24
    1aa2:	26 81       	ldd	r18, Z+6	; 0x06
    1aa4:	37 81       	ldd	r19, Z+7	; 0x07
    1aa6:	2f 5f       	subi	r18, 0xFF	; 255
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	26 83       	std	Z+6, r18	; 0x06
    1aac:	37 83       	std	Z+7, r19	; 0x07
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <fputc+0x6e>
    1ab0:	8b 01       	movw	r16, r22
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	fb 01       	movw	r30, r22
    1ab6:	00 84       	ldd	r0, Z+8	; 0x08
    1ab8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aba:	e0 2d       	mov	r30, r0
    1abc:	19 95       	eicall
    1abe:	89 2b       	or	r24, r25
    1ac0:	e1 f6       	brne	.-72     	; 0x1a7a <fputc+0x10>
    1ac2:	d8 01       	movw	r26, r16
    1ac4:	16 96       	adiw	r26, 0x06	; 6
    1ac6:	8d 91       	ld	r24, X+
    1ac8:	9c 91       	ld	r25, X
    1aca:	17 97       	sbiw	r26, 0x07	; 7
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	16 96       	adiw	r26, 0x06	; 6
    1ad0:	8d 93       	st	X+, r24
    1ad2:	9c 93       	st	X, r25
    1ad4:	17 97       	sbiw	r26, 0x07	; 7
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <__ultoa_invert>:
    1ae2:	fa 01       	movw	r30, r20
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	28 30       	cpi	r18, 0x08	; 8
    1ae8:	51 f1       	breq	.+84     	; 0x1b3e <__ultoa_invert+0x5c>
    1aea:	20 31       	cpi	r18, 0x10	; 16
    1aec:	81 f1       	breq	.+96     	; 0x1b4e <__ultoa_invert+0x6c>
    1aee:	e8 94       	clt
    1af0:	6f 93       	push	r22
    1af2:	6e 7f       	andi	r22, 0xFE	; 254
    1af4:	6e 5f       	subi	r22, 0xFE	; 254
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	af 4f       	sbci	r26, 0xFF	; 255
    1afe:	b1 e0       	ldi	r27, 0x01	; 1
    1b00:	3e d0       	rcall	.+124    	; 0x1b7e <__ultoa_invert+0x9c>
    1b02:	b4 e0       	ldi	r27, 0x04	; 4
    1b04:	3c d0       	rcall	.+120    	; 0x1b7e <__ultoa_invert+0x9c>
    1b06:	67 0f       	add	r22, r23
    1b08:	78 1f       	adc	r23, r24
    1b0a:	89 1f       	adc	r24, r25
    1b0c:	9a 1f       	adc	r25, r26
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	68 0f       	add	r22, r24
    1b12:	79 1f       	adc	r23, r25
    1b14:	8a 1f       	adc	r24, r26
    1b16:	91 1d       	adc	r25, r1
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	6a 0f       	add	r22, r26
    1b1c:	71 1d       	adc	r23, r1
    1b1e:	81 1d       	adc	r24, r1
    1b20:	91 1d       	adc	r25, r1
    1b22:	a1 1d       	adc	r26, r1
    1b24:	20 d0       	rcall	.+64     	; 0x1b66 <__ultoa_invert+0x84>
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <__ultoa_invert+0x48>
    1b28:	68 94       	set
    1b2a:	3f 91       	pop	r19
    1b2c:	2a e0       	ldi	r18, 0x0A	; 10
    1b2e:	26 9f       	mul	r18, r22
    1b30:	11 24       	eor	r1, r1
    1b32:	30 19       	sub	r19, r0
    1b34:	30 5d       	subi	r19, 0xD0	; 208
    1b36:	31 93       	st	Z+, r19
    1b38:	de f6       	brtc	.-74     	; 0x1af0 <__ultoa_invert+0xe>
    1b3a:	cf 01       	movw	r24, r30
    1b3c:	08 95       	ret
    1b3e:	46 2f       	mov	r20, r22
    1b40:	47 70       	andi	r20, 0x07	; 7
    1b42:	40 5d       	subi	r20, 0xD0	; 208
    1b44:	41 93       	st	Z+, r20
    1b46:	b3 e0       	ldi	r27, 0x03	; 3
    1b48:	0f d0       	rcall	.+30     	; 0x1b68 <__ultoa_invert+0x86>
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__ultoa_invert+0x5c>
    1b4c:	f6 cf       	rjmp	.-20     	; 0x1b3a <__ultoa_invert+0x58>
    1b4e:	46 2f       	mov	r20, r22
    1b50:	4f 70       	andi	r20, 0x0F	; 15
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	4a 33       	cpi	r20, 0x3A	; 58
    1b56:	18 f0       	brcs	.+6      	; 0x1b5e <__ultoa_invert+0x7c>
    1b58:	49 5d       	subi	r20, 0xD9	; 217
    1b5a:	31 fd       	sbrc	r19, 1
    1b5c:	40 52       	subi	r20, 0x20	; 32
    1b5e:	41 93       	st	Z+, r20
    1b60:	02 d0       	rcall	.+4      	; 0x1b66 <__ultoa_invert+0x84>
    1b62:	a9 f7       	brne	.-22     	; 0x1b4e <__ultoa_invert+0x6c>
    1b64:	ea cf       	rjmp	.-44     	; 0x1b3a <__ultoa_invert+0x58>
    1b66:	b4 e0       	ldi	r27, 0x04	; 4
    1b68:	a6 95       	lsr	r26
    1b6a:	97 95       	ror	r25
    1b6c:	87 95       	ror	r24
    1b6e:	77 95       	ror	r23
    1b70:	67 95       	ror	r22
    1b72:	ba 95       	dec	r27
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <__ultoa_invert+0x86>
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	61 05       	cpc	r22, r1
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	08 95       	ret
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ac 01       	movw	r20, r24
    1b82:	0a 2e       	mov	r0, r26
    1b84:	06 94       	lsr	r0
    1b86:	57 95       	ror	r21
    1b88:	47 95       	ror	r20
    1b8a:	37 95       	ror	r19
    1b8c:	27 95       	ror	r18
    1b8e:	ba 95       	dec	r27
    1b90:	c9 f7       	brne	.-14     	; 0x1b84 <__ultoa_invert+0xa2>
    1b92:	62 0f       	add	r22, r18
    1b94:	73 1f       	adc	r23, r19
    1b96:	84 1f       	adc	r24, r20
    1b98:	95 1f       	adc	r25, r21
    1b9a:	a0 1d       	adc	r26, r0
    1b9c:	08 95       	ret

00001b9e <_exit>:
    1b9e:	f8 94       	cli

00001ba0 <__stop_program>:
    1ba0:	ff cf       	rjmp	.-2      	; 0x1ba0 <__stop_program>
