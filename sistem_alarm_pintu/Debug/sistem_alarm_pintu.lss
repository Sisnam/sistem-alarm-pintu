
sistem_alarm_pintu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000381c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  0000381c  000038b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000301  00802122  00802122  000039d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d8  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012714  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005714  00000000  00000000  00016760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a12c  00000000  00000000  0001be74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012d8  00000000  00000000  00025fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003969f  00000000  00000000  00027278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009683  00000000  00000000  00060917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  00069f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8ec  00000000  00000000  0006a702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c2       	rjmp	.+1202   	; 0x4e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_14>
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c2       	rjmp	.+1146   	; 0x4e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c2       	rjmp	.+1106   	; 0x4e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c2       	rjmp	.+1102   	; 0x4e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	23 c2       	rjmp	.+1094   	; 0x4e4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c2       	rjmp	.+1046   	; 0x4e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c2       	rjmp	.+1042   	; 0x4e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c2       	rjmp	.+1034   	; 0x4e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c2       	rjmp	.+1030   	; 0x4e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff c1       	rjmp	.+1022   	; 0x4e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fd c1       	rjmp	.+1018   	; 0x4e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fb c1       	rjmp	.+1014   	; 0x4e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f9 c1       	rjmp	.+1010   	; 0x4e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f7 c1       	rjmp	.+1006   	; 0x4e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f5 c1       	rjmp	.+1002   	; 0x4e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f3 c1       	rjmp	.+998    	; 0x4e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f1 c1       	rjmp	.+994    	; 0x4e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	ef c1       	rjmp	.+990    	; 0x4e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	ed c1       	rjmp	.+986    	; 0x4e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	eb c1       	rjmp	.+982    	; 0x4e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e9 c1       	rjmp	.+978    	; 0x4e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	e7 c1       	rjmp	.+974    	; 0x4e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	e5 c1       	rjmp	.+970    	; 0x4e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e3 c1       	rjmp	.+966    	; 0x4e4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e1 c1       	rjmp	.+962    	; 0x4e4 <__bad_interrupt>
     122:	00 00       	nop
     124:	df c1       	rjmp	.+958    	; 0x4e4 <__bad_interrupt>
     126:	00 00       	nop
     128:	dd c1       	rjmp	.+954    	; 0x4e4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	db c1       	rjmp	.+950    	; 0x4e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d9 c1       	rjmp	.+946    	; 0x4e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d7 c1       	rjmp	.+942    	; 0x4e4 <__bad_interrupt>
     136:	00 00       	nop
     138:	d5 c1       	rjmp	.+938    	; 0x4e4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d3 c1       	rjmp	.+934    	; 0x4e4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d1 c1       	rjmp	.+930    	; 0x4e4 <__bad_interrupt>
     142:	00 00       	nop
     144:	cf c1       	rjmp	.+926    	; 0x4e4 <__bad_interrupt>
     146:	00 00       	nop
     148:	cd c1       	rjmp	.+922    	; 0x4e4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	cb c1       	rjmp	.+918    	; 0x4e4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c9 c1       	rjmp	.+914    	; 0x4e4 <__bad_interrupt>
     152:	00 00       	nop
     154:	c7 c1       	rjmp	.+910    	; 0x4e4 <__bad_interrupt>
     156:	00 00       	nop
     158:	c5 c1       	rjmp	.+906    	; 0x4e4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c3 c1       	rjmp	.+902    	; 0x4e4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c1 c1       	rjmp	.+898    	; 0x4e4 <__bad_interrupt>
     162:	00 00       	nop
     164:	bf c1       	rjmp	.+894    	; 0x4e4 <__bad_interrupt>
     166:	00 00       	nop
     168:	bd c1       	rjmp	.+890    	; 0x4e4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	bb c1       	rjmp	.+886    	; 0x4e4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b9 c1       	rjmp	.+882    	; 0x4e4 <__bad_interrupt>
     172:	00 00       	nop
     174:	b7 c1       	rjmp	.+878    	; 0x4e4 <__bad_interrupt>
     176:	00 00       	nop
     178:	b5 c1       	rjmp	.+874    	; 0x4e4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b3 c1       	rjmp	.+870    	; 0x4e4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b1 c1       	rjmp	.+866    	; 0x4e4 <__bad_interrupt>
     182:	00 00       	nop
     184:	af c1       	rjmp	.+862    	; 0x4e4 <__bad_interrupt>
     186:	00 00       	nop
     188:	ad c1       	rjmp	.+858    	; 0x4e4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ab c1       	rjmp	.+854    	; 0x4e4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a9 c1       	rjmp	.+850    	; 0x4e4 <__bad_interrupt>
     192:	00 00       	nop
     194:	a7 c1       	rjmp	.+846    	; 0x4e4 <__bad_interrupt>
     196:	00 00       	nop
     198:	a5 c1       	rjmp	.+842    	; 0x4e4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a3 c1       	rjmp	.+838    	; 0x4e4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9f c1       	rjmp	.+830    	; 0x4e4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9d c1       	rjmp	.+826    	; 0x4e4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9b c1       	rjmp	.+822    	; 0x4e4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c1       	rjmp	.+818    	; 0x4e4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	97 c1       	rjmp	.+814    	; 0x4e4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	95 c1       	rjmp	.+810    	; 0x4e4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	93 c1       	rjmp	.+806    	; 0x4e4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	91 c1       	rjmp	.+802    	; 0x4e4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8f c1       	rjmp	.+798    	; 0x4e4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8d c1       	rjmp	.+794    	; 0x4e4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8b c1       	rjmp	.+790    	; 0x4e4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	89 c1       	rjmp	.+786    	; 0x4e4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	87 c1       	rjmp	.+782    	; 0x4e4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	85 c1       	rjmp	.+778    	; 0x4e4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	83 c1       	rjmp	.+774    	; 0x4e4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	81 c1       	rjmp	.+770    	; 0x4e4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7f c1       	rjmp	.+766    	; 0x4e4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7d c1       	rjmp	.+762    	; 0x4e4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7b c1       	rjmp	.+758    	; 0x4e4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	79 c1       	rjmp	.+754    	; 0x4e4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	77 c1       	rjmp	.+750    	; 0x4e4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	75 c1       	rjmp	.+746    	; 0x4e4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	6c 15       	cp	r22, r12
     1fe:	6c 15       	cp	r22, r12
     200:	6c 15       	cp	r22, r12
     202:	a2 15       	cp	r26, r2
     204:	92 15       	cp	r25, r2
     206:	9f 15       	cp	r25, r15
     208:	6c 15       	cp	r22, r12
     20a:	6c 15       	cp	r22, r12
     20c:	a2 15       	cp	r26, r2
     20e:	92 15       	cp	r25, r2

00000210 <__trampolines_end>:
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 00       	nop
     216:	00 20       	and	r0, r0
     218:	20 20       	and	r2, r0
     21a:	20 20       	and	r2, r0
     21c:	00 20       	and	r0, r0
     21e:	50 50       	subi	r21, 0x00	; 0
     220:	50 00       	.word	0x0050	; ????
     222:	00 00       	nop
     224:	00 50       	subi	r16, 0x00	; 0
     226:	50 f8       	bld	r5, 0
     228:	50 f8       	bld	r5, 0
     22a:	50 50       	subi	r21, 0x00	; 0
     22c:	20 78       	andi	r18, 0x80	; 128
     22e:	a0 70       	andi	r26, 0x00	; 0
     230:	28 f0       	brcs	.+10     	; 0x23c <__trampolines_end+0x2c>
     232:	20 c0       	rjmp	.+64     	; 0x274 <__trampolines_end+0x64>
     234:	c8 10       	cpse	r12, r8
     236:	20 40       	sbci	r18, 0x00	; 0
     238:	98 18       	sub	r9, r8
     23a:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1c7d>
     23e:	a8 90       	.word	0x90a8	; ????
     240:	68 60       	ori	r22, 0x08	; 8
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	00 00       	nop
     246:	00 00       	nop
     248:	10 20       	and	r1, r0
     24a:	40 40       	sbci	r20, 0x00	; 0
     24c:	40 20       	and	r4, r0
     24e:	10 40       	sbci	r17, 0x00	; 0
     250:	20 10       	cpse	r2, r0
     252:	10 10       	cpse	r1, r0
     254:	20 40       	sbci	r18, 0x00	; 0
     256:	00 50       	subi	r16, 0x00	; 0
     258:	20 f8       	bld	r2, 0
     25a:	20 50       	subi	r18, 0x00	; 0
     25c:	00 00       	nop
     25e:	20 20       	and	r2, r0
     260:	f8 20       	and	r15, r8
     262:	20 00       	.word	0x0020	; ????
     264:	00 00       	nop
     266:	00 00       	nop
     268:	60 20       	and	r6, r0
     26a:	40 00       	.word	0x0040	; ????
     26c:	00 00       	nop
     26e:	f8 00       	.word	0x00f8	; ????
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 60       	ori	r16, 0x00	; 0
     278:	60 00       	.word	0x0060	; ????
     27a:	08 10       	cpse	r0, r8
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 00       	.word	0x0080	; ????
     280:	70 88       	ldd	r7, Z+16	; 0x10
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	c8 88       	ldd	r12, Y+16	; 0x10
     286:	70 20       	and	r7, r0
     288:	60 20       	and	r6, r0
     28a:	20 20       	and	r2, r0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	70 88       	ldd	r7, Z+16	; 0x10
     290:	08 10       	cpse	r0, r8
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	f8 f8       	.word	0xf8f8	; ????
     296:	10 20       	and	r1, r0
     298:	10 08       	sbc	r1, r0
     29a:	88 70       	andi	r24, 0x08	; 8
     29c:	10 30       	cpi	r17, 0x00	; 0
     29e:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     2a2:	10 f8       	bld	r1, 0
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <__trampolines_end+0xb6>
     2a6:	08 08       	sbc	r0, r8
     2a8:	88 70       	andi	r24, 0x08	; 8
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	80 f0       	brcs	.+32     	; 0x2ce <__trampolines_end+0xbe>
     2ae:	88 88       	ldd	r8, Y+16	; 0x10
     2b0:	70 f8       	bld	r7, 0
     2b2:	08 10       	cpse	r0, r8
     2b4:	20 40       	sbci	r18, 0x00	; 0
     2b6:	40 40       	sbci	r20, 0x00	; 0
     2b8:	70 88       	ldd	r7, Z+16	; 0x10
     2ba:	88 70       	andi	r24, 0x08	; 8
     2bc:	88 88       	ldd	r8, Y+16	; 0x10
     2be:	70 70       	andi	r23, 0x00	; 0
     2c0:	88 88       	ldd	r8, Y+16	; 0x10
     2c2:	78 08       	sbc	r7, r8
     2c4:	10 60       	ori	r17, 0x00	; 0
     2c6:	00 60       	ori	r16, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	00 00       	nop
     2ce:	60 60       	ori	r22, 0x00	; 0
     2d0:	00 60       	ori	r16, 0x00	; 0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	08 10       	cpse	r0, r8
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	20 10       	cpse	r2, r0
     2da:	08 00       	.word	0x0008	; ????
     2dc:	00 f8       	bld	r0, 0
     2de:	00 f8       	bld	r0, 0
     2e0:	00 00       	nop
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	20 10       	cpse	r2, r0
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 70       	andi	r24, 0x00	; 0
     2ea:	88 08       	sbc	r8, r8
     2ec:	10 20       	and	r1, r0
     2ee:	00 20       	and	r0, r0
     2f0:	70 88       	ldd	r7, Z+16	; 0x10
     2f2:	08 68       	ori	r16, 0x88	; 136
     2f4:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f6:	70 70       	andi	r23, 0x00	; 0
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	88 f8       	.word	0xf888	; ????
     2fc:	88 88       	ldd	r8, Y+16	; 0x10
     2fe:	f0 88       	ldd	r15, Z+16	; 0x10
     300:	88 f0       	brcs	.+34     	; 0x324 <__trampolines_end+0x114>
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	f0 70       	andi	r31, 0x00	; 0
     306:	88 80       	ld	r8, Y
     308:	80 80       	ld	r8, Z
     30a:	88 70       	andi	r24, 0x08	; 8
     30c:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6465>
     310:	88 90       	.word	0x9088	; ????
     312:	e0 f8       	bld	r14, 0
     314:	80 80       	ld	r8, Z
     316:	f0 80       	ld	r15, Z
     318:	80 f8       	bld	r8, 0
     31a:	f8 80       	ld	r15, Y
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	80 80       	ld	r8, Z
     320:	80 70       	andi	r24, 0x00	; 0
     322:	88 80       	ld	r8, Y
     324:	80 98       	cbi	0x10, 0	; 16
     326:	88 70       	andi	r24, 0x08	; 8
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 f8       	.word	0xf888	; ????
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	88 70       	andi	r24, 0x08	; 8
     330:	20 20       	and	r2, r0
     332:	20 20       	and	r2, r0
     334:	20 70       	andi	r18, 0x00	; 0
     336:	38 10       	cpse	r3, r8
     338:	10 10       	cpse	r1, r0
     33a:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x643d>
     33e:	90 a0       	ldd	r9, Z+32	; 0x20
     340:	c0 a0       	ldd	r12, Z+32	; 0x20
     342:	90 88       	ldd	r9, Z+16	; 0x10
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	80 80       	ld	r8, Z
     34a:	f8 88       	ldd	r15, Y+16	; 0x10
     34c:	d8 a8       	ldd	r13, Y+48	; 0x30
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	88 88       	ldd	r8, Y+16	; 0x10
     354:	c8 a8       	ldd	r12, Y+48	; 0x30
     356:	98 88       	ldd	r9, Y+16	; 0x10
     358:	88 70       	andi	r24, 0x08	; 8
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 88       	ldd	r8, Y+16	; 0x10
     35e:	88 70       	andi	r24, 0x08	; 8
     360:	f0 88       	ldd	r15, Z+16	; 0x10
     362:	88 f0       	brcs	.+34     	; 0x386 <__trampolines_end+0x176>
     364:	80 80       	ld	r8, Z
     366:	80 70       	andi	r24, 0x00	; 0
     368:	88 88       	ldd	r8, Y+16	; 0x10
     36a:	88 a8       	ldd	r8, Y+48	; 0x30
     36c:	90 68       	ori	r25, 0x80	; 128
     36e:	f0 88       	ldd	r15, Z+16	; 0x10
     370:	88 f0       	brcs	.+34     	; 0x394 <__trampolines_end+0x184>
     372:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5465>
     376:	80 80       	ld	r8, Z
     378:	70 08       	sbc	r7, r0
     37a:	08 f0       	brcs	.+2      	; 0x37e <__trampolines_end+0x16e>
     37c:	f8 20       	and	r15, r8
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 88       	ldd	r2, Z+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 88       	ldd	r8, Y+16	; 0x10
     388:	88 70       	andi	r24, 0x08	; 8
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 88       	ldd	r8, Y+16	; 0x10
     38e:	88 50       	subi	r24, 0x08	; 8
     390:	20 88       	ldd	r2, Z+16	; 0x10
     392:	88 88       	ldd	r8, Y+16	; 0x10
     394:	a8 a8       	ldd	r10, Y+48	; 0x30
     396:	d8 88       	ldd	r13, Y+16	; 0x10
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	50 20       	and	r5, r0
     39c:	50 88       	ldd	r5, Z+16	; 0x10
     39e:	88 88       	ldd	r8, Y+16	; 0x10
     3a0:	88 50       	subi	r24, 0x08	; 8
     3a2:	20 20       	and	r2, r0
     3a4:	20 20       	and	r2, r0
     3a6:	f8 08       	sbc	r15, r8
     3a8:	10 20       	and	r1, r0
     3aa:	40 80       	ld	r4, Z
     3ac:	f8 38       	cpi	r31, 0x88	; 136
     3ae:	20 20       	and	r2, r0
     3b0:	20 20       	and	r2, r0
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	00 80       	ld	r0, Z
     3b6:	40 20       	and	r4, r0
     3b8:	10 08       	sbc	r1, r0
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	20 20       	and	r2, r0
     3be:	20 20       	and	r2, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	20 50       	subi	r18, 0x00	; 0
     3c4:	88 00       	.word	0x0088	; ????
	...
     3ce:	00 f8       	bld	r0, 0
     3d0:	40 20       	and	r4, r0
     3d2:	10 00       	.word	0x0010	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	00 70       	andi	r16, 0x00	; 0
     3da:	08 78       	andi	r16, 0x88	; 136
     3dc:	88 78       	andi	r24, 0x88	; 136
     3de:	80 80       	ld	r8, Z
     3e0:	b0 c8       	rjmp	.-3744   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	f0 00       	.word	0x00f0	; ????
     3e6:	00 70       	andi	r16, 0x00	; 0
     3e8:	80 80       	ld	r8, Z
     3ea:	88 70       	andi	r24, 0x08	; 8
     3ec:	08 08       	sbc	r0, r8
     3ee:	68 98       	cbi	0x0d, 0	; 13
     3f0:	88 88       	ldd	r8, Y+16	; 0x10
     3f2:	78 00       	.word	0x0078	; ????
     3f4:	00 70       	andi	r16, 0x00	; 0
     3f6:	88 f8       	.word	0xf888	; ????
     3f8:	80 70       	andi	r24, 0x00	; 0
     3fa:	30 48       	sbci	r19, 0x80	; 128
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	40 00       	.word	0x0040	; ????
     402:	00 78       	andi	r16, 0x80	; 128
     404:	88 78       	andi	r24, 0x88	; 136
     406:	08 30       	cpi	r16, 0x08	; 8
     408:	80 80       	ld	r8, Z
     40a:	b0 c8       	rjmp	.-3744   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     40c:	88 88       	ldd	r8, Y+16	; 0x10
     40e:	88 20       	and	r8, r8
     410:	00 60       	ori	r16, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 70       	andi	r18, 0x00	; 0
     416:	10 00       	.word	0x0010	; ????
     418:	30 10       	cpse	r3, r0
     41a:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1c3d>
     41e:	40 48       	sbci	r20, 0x80	; 128
     420:	50 60       	ori	r21, 0x00	; 0
     422:	50 48       	sbci	r21, 0x80	; 128
     424:	60 20       	and	r6, r0
     426:	20 20       	and	r2, r0
     428:	20 20       	and	r2, r0
     42a:	70 00       	.word	0x0070	; ????
     42c:	00 d0       	rcall	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	a8 a8       	ldd	r10, Y+48	; 0x30
     430:	88 88       	ldd	r8, Y+16	; 0x10
     432:	00 00       	nop
     434:	b0 c8       	rjmp	.-3744   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     436:	88 88       	ldd	r8, Y+16	; 0x10
     438:	88 00       	.word	0x0088	; ????
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	88 88       	ldd	r8, Y+16	; 0x10
     43e:	88 70       	andi	r24, 0x08	; 8
     440:	00 00       	nop
     442:	f0 88       	ldd	r15, Z+16	; 0x10
     444:	f0 80       	ld	r15, Z
     446:	80 00       	.word	0x0080	; ????
     448:	00 68       	ori	r16, 0x80	; 128
     44a:	98 78       	andi	r25, 0x88	; 136
     44c:	08 08       	sbc	r0, r8
     44e:	00 00       	nop
     450:	b0 c8       	rjmp	.-3744   	; 0xfffff5b2 <__eeprom_end+0xff7ef5b2>
     452:	80 80       	ld	r8, Z
     454:	80 00       	.word	0x0080	; ????
     456:	00 70       	andi	r16, 0x00	; 0
     458:	80 70       	andi	r24, 0x00	; 0
     45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e0 40       	sbci	r30, 0x00	; 0
     460:	40 48       	sbci	r20, 0x80	; 128
     462:	30 00       	.word	0x0030	; ????
     464:	00 88       	ldd	r0, Z+16	; 0x10
     466:	88 88       	ldd	r8, Y+16	; 0x10
     468:	98 68       	ori	r25, 0x88	; 136
     46a:	00 00       	nop
     46c:	88 88       	ldd	r8, Y+16	; 0x10
     46e:	88 50       	subi	r24, 0x08	; 8
     470:	20 00       	.word	0x0020	; ????
     472:	00 88       	ldd	r0, Z+16	; 0x10
     474:	88 a8       	ldd	r8, Y+48	; 0x30
     476:	a8 50       	subi	r26, 0x08	; 8
     478:	00 00       	nop
     47a:	88 50       	subi	r24, 0x08	; 8
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	88 00       	.word	0x0088	; ????
     480:	00 88       	ldd	r0, Z+16	; 0x10
     482:	88 78       	andi	r24, 0x88	; 136
     484:	08 70       	andi	r16, 0x08	; 8
     486:	00 00       	nop
     488:	f8 10       	cpse	r15, r8
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	f8 10       	cpse	r15, r8
     48e:	20 20       	and	r2, r0
     490:	40 20       	and	r4, r0
     492:	20 10       	cpse	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 20       	and	r2, r0
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	10 20       	and	r1, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df e5       	ldi	r29, 0x5F	; 95
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	11 e2       	ldi	r17, 0x21	; 33
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
     4b8:	ec e1       	ldi	r30, 0x1C	; 28
     4ba:	f8 e3       	ldi	r31, 0x38	; 56
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a2 32       	cpi	r26, 0x22	; 34
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	24 e2       	ldi	r18, 0x24	; 36
     4ce:	a2 e2       	ldi	r26, 0x22	; 34
     4d0:	b1 e2       	ldi	r27, 0x21	; 33
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a3 32       	cpi	r26, 0x23	; 35
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <main>
     4e0:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e8:	61 50       	subi	r22, 0x01	; 1
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 09       	sbc	r24, r1
     4ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	81 05       	cpc	r24, r1
     4f6:	91 05       	cpc	r25, r1
     4f8:	b9 f7       	brne	.-18     	; 0x4e8 <__portable_avr_delay_cycles+0x2>
     4fa:	08 95       	ret

000004fc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	16 e0       	ldi	r17, 0x06	; 6
     518:	68 94       	set
     51a:	ff 24       	eor	r15, r15
     51c:	f3 f8       	bld	r15, 3
     51e:	f8 01       	movw	r30, r16
     520:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	dd df       	rcall	.-70     	; 0x4e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52c:	f8 01       	movw	r30, r16
     52e:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	d6 df       	rcall	.-84     	; 0x4e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     53a:	0f 2e       	mov	r0, r31
     53c:	fb e2       	ldi	r31, 0x2B	; 43
     53e:	bf 2e       	mov	r11, r31
     540:	f0 2d       	mov	r31, r0
     542:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	2e d4       	rcall	.+2140   	; 0xda6 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
     550:	00 e4       	ldi	r16, 0x40	; 64
     552:	12 e4       	ldi	r17, 0x42	; 66
     554:	2f e0       	ldi	r18, 0x0F	; 15
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	43 e0       	ldi	r20, 0x03	; 3
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	80 ea       	ldi	r24, 0xA0	; 160
     562:	99 e0       	ldi	r25, 0x09	; 9
     564:	4f d4       	rcall	.+2206   	; 0xe04 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     566:	00 e6       	ldi	r16, 0x60	; 96
     568:	16 e0       	ldi	r17, 0x06	; 6
     56a:	ff 24       	eor	r15, r15
     56c:	f3 94       	inc	r15
     56e:	f8 01       	movw	r30, r16
     570:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     572:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	99 e0       	ldi	r25, 0x09	; 9
     57e:	5c d4       	rcall	.+2232   	; 0xe38 <usart_spi_select_device>
     580:	f8 01       	movw	r30, r16
     582:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     584:	e0 ea       	ldi	r30, 0xA0	; 160
     586:	f9 e0       	ldi	r31, 0x09	; 9
     588:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     58a:	85 ff       	sbrs	r24, 5
     58c:	fd cf       	rjmp	.-6      	; 0x588 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     594:	e0 ea       	ldi	r30, 0xA0	; 160
     596:	f9 e0       	ldi	r31, 0x09	; 9
     598:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     59a:	86 ff       	sbrs	r24, 6
     59c:	fd cf       	rjmp	.-6      	; 0x598 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     59e:	e0 ea       	ldi	r30, 0xA0	; 160
     5a0:	f9 e0       	ldi	r31, 0x09	; 9
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5a6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	80 ea       	ldi	r24, 0xA0	; 160
     5b0:	99 e0       	ldi	r25, 0x09	; 9
     5b2:	58 d4       	rcall	.+2224   	; 0xe64 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5b4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	80 ea       	ldi	r24, 0xA0	; 160
     5c0:	99 e0       	ldi	r25, 0x09	; 9
     5c2:	3a d4       	rcall	.+2164   	; 0xe38 <usart_spi_select_device>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5ca:	e0 ea       	ldi	r30, 0xA0	; 160
     5cc:	f9 e0       	ldi	r31, 0x09	; 9
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5d0:	85 ff       	sbrs	r24, 5
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5d4:	86 ea       	ldi	r24, 0xA6	; 166
     5d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5e0:	86 ff       	sbrs	r24, 6
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ea:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ec:	80 81       	ld	r24, Z
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f8:	35 d4       	rcall	.+2154   	; 0xe64 <usart_spi_deselect_device>
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 ea       	ldi	r24, 0xA0	; 160
     606:	99 e0       	ldi	r25, 0x09	; 9
     608:	17 d4       	rcall	.+2094   	; 0xe38 <usart_spi_select_device>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     610:	e0 ea       	ldi	r30, 0xA0	; 160
     612:	f9 e0       	ldi	r31, 0x09	; 9
     614:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     616:	85 ff       	sbrs	r24, 5
     618:	fd cf       	rjmp	.-6      	; 0x614 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     61a:	88 ec       	ldi	r24, 0xC8	; 200
     61c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     620:	e0 ea       	ldi	r30, 0xA0	; 160
     622:	f9 e0       	ldi	r31, 0x09	; 9
     624:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     626:	86 ff       	sbrs	r24, 6
     628:	fd cf       	rjmp	.-6      	; 0x624 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     62a:	e0 ea       	ldi	r30, 0xA0	; 160
     62c:	f9 e0       	ldi	r31, 0x09	; 9
     62e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     630:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     632:	80 81       	ld	r24, Z
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	80 ea       	ldi	r24, 0xA0	; 160
     63c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63e:	12 d4       	rcall	.+2084   	; 0xe64 <usart_spi_deselect_device>
     640:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	be 01       	movw	r22, r28
     646:	6f 5f       	subi	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	80 ea       	ldi	r24, 0xA0	; 160
     64c:	99 e0       	ldi	r25, 0x09	; 9
     64e:	f4 d3       	rcall	.+2024   	; 0xe38 <usart_spi_select_device>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     656:	e0 ea       	ldi	r30, 0xA0	; 160
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65c:	85 ff       	sbrs	r24, 5
     65e:	fd cf       	rjmp	.-6      	; 0x65a <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     660:	82 ea       	ldi	r24, 0xA2	; 162
     662:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     666:	e0 ea       	ldi	r30, 0xA0	; 160
     668:	f9 e0       	ldi	r31, 0x09	; 9
     66a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	fd cf       	rjmp	.-6      	; 0x66a <st7565r_init+0x16e>
     670:	e0 ea       	ldi	r30, 0xA0	; 160
     672:	f9 e0       	ldi	r31, 0x09	; 9
     674:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	80 81       	ld	r24, Z
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	80 ea       	ldi	r24, 0xA0	; 160
     682:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     684:	ef d3       	rcall	.+2014   	; 0xe64 <usart_spi_deselect_device>
     686:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	d1 d3       	rcall	.+1954   	; 0xe38 <usart_spi_select_device>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a2:	85 ff       	sbrs	r24, 5
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a6:	8f e2       	ldi	r24, 0x2F	; 47
     6a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ac:	e0 ea       	ldi	r30, 0xA0	; 160
     6ae:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <st7565r_init+0x1b4>
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f9 e0       	ldi	r31, 0x09	; 9
     6ba:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6bc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6be:	80 81       	ld	r24, Z
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	80 ea       	ldi	r24, 0xA0	; 160
     6c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ca:	cc d3       	rcall	.+1944   	; 0xe64 <usart_spi_deselect_device>
     6cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	99 e0       	ldi	r25, 0x09	; 9
     6da:	ae d3       	rcall	.+1884   	; 0xe38 <usart_spi_select_device>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e2:	e0 ea       	ldi	r30, 0xA0	; 160
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e8:	85 ff       	sbrs	r24, 5
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ec:	88 ef       	ldi	r24, 0xF8	; 248
     6ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f2:	e0 ea       	ldi	r30, 0xA0	; 160
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <st7565r_init+0x1fa>
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     700:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     702:	81 83       	std	Z+1, r24	; 0x01
     704:	80 81       	ld	r24, Z
     706:	be 01       	movw	r22, r28
     708:	6f 5f       	subi	r22, 0xFF	; 255
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	80 ea       	ldi	r24, 0xA0	; 160
     70e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     710:	a9 d3       	rcall	.+1874   	; 0xe64 <usart_spi_deselect_device>
     712:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	80 ea       	ldi	r24, 0xA0	; 160
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	8b d3       	rcall	.+1814   	; 0xe38 <usart_spi_select_device>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     728:	e0 ea       	ldi	r30, 0xA0	; 160
     72a:	f9 e0       	ldi	r31, 0x09	; 9
     72c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     72e:	85 ff       	sbrs	r24, 5
     730:	fd cf       	rjmp	.-6      	; 0x72c <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     732:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     736:	e0 ea       	ldi	r30, 0xA0	; 160
     738:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     73a:	81 81       	ldd	r24, Z+1	; 0x01
     73c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     73e:	fd cf       	rjmp	.-6      	; 0x73a <st7565r_init+0x23e>
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     744:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     746:	81 83       	std	Z+1, r24	; 0x01
     748:	80 81       	ld	r24, Z
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     754:	87 d3       	rcall	.+1806   	; 0xe64 <usart_spi_deselect_device>
     756:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	80 ea       	ldi	r24, 0xA0	; 160
     762:	99 e0       	ldi	r25, 0x09	; 9
     764:	69 d3       	rcall	.+1746   	; 0xe38 <usart_spi_select_device>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     76c:	e0 ea       	ldi	r30, 0xA0	; 160
     76e:	f9 e0       	ldi	r31, 0x09	; 9
     770:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     772:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     774:	fd cf       	rjmp	.-6      	; 0x770 <st7565r_init+0x274>
     776:	81 e2       	ldi	r24, 0x21	; 33
     778:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     780:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     782:	86 ff       	sbrs	r24, 6
     784:	fd cf       	rjmp	.-6      	; 0x780 <st7565r_init+0x284>
     786:	e0 ea       	ldi	r30, 0xA0	; 160
     788:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     78a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	80 81       	ld	r24, Z
     790:	be 01       	movw	r22, r28
     792:	6f 5f       	subi	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     79a:	64 d3       	rcall	.+1736   	; 0xe64 <usart_spi_deselect_device>
     79c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	80 ea       	ldi	r24, 0xA0	; 160
     7a8:	99 e0       	ldi	r25, 0x09	; 9
     7aa:	46 d3       	rcall	.+1676   	; 0xe38 <usart_spi_select_device>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7b2:	e0 ea       	ldi	r30, 0xA0	; 160
     7b4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <st7565r_init+0x2ba>
     7bc:	81 e8       	ldi	r24, 0x81	; 129
     7be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c8:	86 ff       	sbrs	r24, 6
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <st7565r_init+0x2ca>
     7cc:	e0 ea       	ldi	r30, 0xA0	; 160
     7ce:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7d0:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7d2:	81 83       	std	Z+1, r24	; 0x01
     7d4:	80 81       	ld	r24, Z
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7e0:	41 d3       	rcall	.+1666   	; 0xe64 <usart_spi_deselect_device>
     7e2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	be 01       	movw	r22, r28
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	99 e0       	ldi	r25, 0x09	; 9
     7f0:	23 d3       	rcall	.+1606   	; 0xe38 <usart_spi_select_device>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f8:	e0 ea       	ldi	r30, 0xA0	; 160
     7fa:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7fc:	81 81       	ldd	r24, Z+1	; 0x01
     7fe:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     800:	fd cf       	rjmp	.-6      	; 0x7fc <st7565r_init+0x300>
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     808:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     80e:	86 ff       	sbrs	r24, 6
     810:	fd cf       	rjmp	.-6      	; 0x80c <st7565r_init+0x310>
     812:	e0 ea       	ldi	r30, 0xA0	; 160
     814:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     816:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     818:	81 83       	std	Z+1, r24	; 0x01
     81a:	80 81       	ld	r24, Z
     81c:	be 01       	movw	r22, r28
     81e:	6f 5f       	subi	r22, 0xFF	; 255
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	80 ea       	ldi	r24, 0xA0	; 160
     824:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     826:	1e d3       	rcall	.+1596   	; 0xe64 <usart_spi_deselect_device>
     828:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	99 e0       	ldi	r25, 0x09	; 9
     836:	00 d3       	rcall	.+1536   	; 0xe38 <usart_spi_select_device>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     83e:	e0 ea       	ldi	r30, 0xA0	; 160
     840:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     842:	81 81       	ldd	r24, Z+1	; 0x01
     844:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     846:	fd cf       	rjmp	.-6      	; 0x842 <st7565r_init+0x346>
     848:	8f ea       	ldi	r24, 0xAF	; 175
     84a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     852:	81 81       	ldd	r24, Z+1	; 0x01
     854:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     856:	fd cf       	rjmp	.-6      	; 0x852 <st7565r_init+0x356>
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     85e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     860:	80 81       	ld	r24, Z
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	80 ea       	ldi	r24, 0xA0	; 160
     86a:	99 e0       	ldi	r25, 0x09	; 9
     86c:	fb d2       	rcall	.+1526   	; 0xe64 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	08 95       	ret

00000884 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     88a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     88e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     892:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     896:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     89a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     89e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     8a2:	08 95       	ret

000008a4 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	1f 92       	push	r1
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8ae:	9f b7       	in	r25, 0x3f	; 63
     8b0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8b2:	f8 94       	cli
	return flags;
     8b4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8b6:	e8 2f       	mov	r30, r24
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e0 59       	subi	r30, 0x90	; 144
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	60 95       	com	r22
     8c0:	80 81       	ld	r24, Z
     8c2:	68 23       	and	r22, r24
     8c4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8c6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	1f 92       	push	r1
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	08 2f       	mov	r16, r24
     8e2:	f6 2e       	mov	r15, r22
     8e4:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8e6:	1a d1       	rcall	.+564    	; 0xb1c <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8e8:	0f 70       	andi	r16, 0x0F	; 15
     8ea:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ec:	8b e2       	ldi	r24, 0x2B	; 43
     8ee:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	80 ea       	ldi	r24, 0xA0	; 160
     8f8:	99 e0       	ldi	r25, 0x09	; 9
     8fa:	9e d2       	rcall	.+1340   	; 0xe38 <usart_spi_select_device>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     902:	e0 ea       	ldi	r30, 0xA0	; 160
     904:	f9 e0       	ldi	r31, 0x09	; 9
     906:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     908:	95 ff       	sbrs	r25, 5
     90a:	fd cf       	rjmp	.-6      	; 0x906 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     90c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     910:	e0 ea       	ldi	r30, 0xA0	; 160
     912:	f9 e0       	ldi	r31, 0x09	; 9
     914:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     916:	86 ff       	sbrs	r24, 6
     918:	fd cf       	rjmp	.-6      	; 0x914 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     91a:	e0 ea       	ldi	r30, 0xA0	; 160
     91c:	f9 e0       	ldi	r31, 0x09	; 9
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     922:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     924:	be 01       	movw	r22, r28
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	99 e0       	ldi	r25, 0x09	; 9
     92e:	9a d2       	rcall	.+1332   	; 0xe64 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     930:	0f 2d       	mov	r16, r15
     932:	0f 77       	andi	r16, 0x7F	; 127
     934:	02 95       	swap	r16
     936:	0f 70       	andi	r16, 0x0F	; 15
     938:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     93a:	8b e2       	ldi	r24, 0x2B	; 43
     93c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 ea       	ldi	r24, 0xA0	; 160
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	77 d2       	rcall	.+1262   	; 0xe38 <usart_spi_select_device>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     950:	e0 ea       	ldi	r30, 0xA0	; 160
     952:	f9 e0       	ldi	r31, 0x09	; 9
     954:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     956:	85 ff       	sbrs	r24, 5
     958:	fd cf       	rjmp	.-6      	; 0x954 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     95a:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     95e:	e0 ea       	ldi	r30, 0xA0	; 160
     960:	f9 e0       	ldi	r31, 0x09	; 9
     962:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     964:	86 ff       	sbrs	r24, 6
     966:	fd cf       	rjmp	.-6      	; 0x962 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     968:	e0 ea       	ldi	r30, 0xA0	; 160
     96a:	f9 e0       	ldi	r31, 0x09	; 9
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     970:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 ea       	ldi	r24, 0xA0	; 160
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	73 d2       	rcall	.+1254   	; 0xe64 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     97e:	0f 2d       	mov	r16, r15
     980:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     982:	8b e2       	ldi	r24, 0x2B	; 43
     984:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	80 ea       	ldi	r24, 0xA0	; 160
     98e:	99 e0       	ldi	r25, 0x09	; 9
     990:	53 d2       	rcall	.+1190   	; 0xe38 <usart_spi_select_device>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     998:	e0 ea       	ldi	r30, 0xA0	; 160
     99a:	f9 e0       	ldi	r31, 0x09	; 9
     99c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     99e:	85 ff       	sbrs	r24, 5
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9a2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9a6:	e0 ea       	ldi	r30, 0xA0	; 160
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9ac:	86 ff       	sbrs	r24, 6
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9b0:	e0 ea       	ldi	r30, 0xA0	; 160
     9b2:	f9 e0       	ldi	r31, 0x09	; 9
     9b4:	80 e4       	ldi	r24, 0x40	; 64
     9b6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9b8:	80 81       	ld	r24, Z
     9ba:	be 01       	movw	r22, r28
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	80 ea       	ldi	r24, 0xA0	; 160
     9c2:	99 e0       	ldi	r25, 0x09	; 9
     9c4:	4f d2       	rcall	.+1182   	; 0xe64 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9c6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	be 01       	movw	r22, r28
     9cc:	6f 5f       	subi	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	80 ea       	ldi	r24, 0xA0	; 160
     9d2:	99 e0       	ldi	r25, 0x09	; 9
     9d4:	31 d2       	rcall	.+1122   	; 0xe38 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9dc:	e0 ea       	ldi	r30, 0xA0	; 160
     9de:	f9 e0       	ldi	r31, 0x09	; 9
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9e2:	85 ff       	sbrs	r24, 5
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9e6:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9f0:	86 ff       	sbrs	r24, 6
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9f4:	e0 ea       	ldi	r30, 0xA0	; 160
     9f6:	f9 e0       	ldi	r31, 0x09	; 9
     9f8:	80 e4       	ldi	r24, 0x40	; 64
     9fa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9fc:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	99 e0       	ldi	r25, 0x09	; 9
     a0e:	2a d2       	rcall	.+1108   	; 0xe64 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a10:	0f 90       	pop	r0
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	08 95       	ret

00000a1e <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	1f 92       	push	r1
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a2c:	82 e2       	ldi	r24, 0x22	; 34
     a2e:	91 e2       	ldi	r25, 0x21	; 33
     a30:	70 d0       	rcall	.+224    	; 0xb12 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a32:	64 dd       	rcall	.-1336   	; 0x4fc <st7565r_init>
     a34:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	99 e0       	ldi	r25, 0x09	; 9
     a42:	fa d1       	rcall	.+1012   	; 0xe38 <usart_spi_select_device>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a4a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a4c:	f9 e0       	ldi	r31, 0x09	; 9
     a4e:	81 81       	ldd	r24, Z+1	; 0x01
     a50:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a52:	fd cf       	rjmp	.-6      	; 0xa4e <gfx_mono_st7565r_init+0x30>
     a54:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a56:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a5a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a5c:	f9 e0       	ldi	r31, 0x09	; 9
     a5e:	81 81       	ldd	r24, Z+1	; 0x01
     a60:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <gfx_mono_st7565r_init+0x40>
     a64:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a66:	f9 e0       	ldi	r31, 0x09	; 9
     a68:	80 e4       	ldi	r24, 0x40	; 64
     a6a:	81 83       	std	Z+1, r24	; 0x01
     a6c:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a6e:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	80 ea       	ldi	r24, 0xA0	; 160
     a76:	99 e0       	ldi	r25, 0x09	; 9
     a78:	f5 d1       	rcall	.+1002   	; 0xe64 <usart_spi_deselect_device>
     a7a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a7c:	0a c0       	rjmp	.+20     	; 0xa92 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	61 2f       	mov	r22, r17
     a82:	80 2f       	mov	r24, r16
     a84:	25 df       	rcall	.-438    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     a86:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a88:	10 38       	cpi	r17, 0x80	; 128
     a8a:	c9 f7       	brne	.-14     	; 0xa7e <gfx_mono_st7565r_init+0x60>
     a8c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a8e:	04 30       	cpi	r16, 0x04	; 4
     a90:	11 f0       	breq	.+4      	; 0xa96 <gfx_mono_st7565r_init+0x78>
     a92:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a94:	f4 cf       	rjmp	.-24     	; 0xa7e <gfx_mono_st7565r_init+0x60>
     a96:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <gfx_mono_st7565r_draw_pixel>:
     aa2:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     aac:	88 23       	and	r24, r24
     aae:	4c f1       	brlt	.+82     	; 0xb02 <gfx_mono_st7565r_draw_pixel+0x60>
     ab0:	60 32       	cpi	r22, 0x20	; 32
     ab2:	38 f5       	brcc	.+78     	; 0xb02 <gfx_mono_st7565r_draw_pixel+0x60>
     ab4:	d4 2f       	mov	r29, r20
     ab6:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ab8:	f6 2e       	mov	r15, r22
     aba:	f6 94       	lsr	r15
     abc:	f6 94       	lsr	r15
     abe:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	f8 9e       	mul	r15, r24
     ac6:	60 19       	sub	r22, r0
     ac8:	71 09       	sbc	r23, r1
     aca:	11 24       	eor	r1, r1
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	8c 01       	movw	r16, r24
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x36>
     ad4:	00 0f       	add	r16, r16
     ad6:	11 1f       	adc	r17, r17
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     adc:	6c 2f       	mov	r22, r28
     ade:	8f 2d       	mov	r24, r15
     ae0:	2b d0       	rcall	.+86     	; 0xb38 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ae2:	d1 30       	cpi	r29, 0x01	; 1
     ae4:	21 f0       	breq	.+8      	; 0xaee <gfx_mono_st7565r_draw_pixel+0x4c>
     ae6:	28 f0       	brcs	.+10     	; 0xaf2 <gfx_mono_st7565r_draw_pixel+0x50>
     ae8:	d2 30       	cpi	r29, 0x02	; 2
     aea:	31 f0       	breq	.+12     	; 0xaf8 <gfx_mono_st7565r_draw_pixel+0x56>
     aec:	06 c0       	rjmp	.+12     	; 0xafa <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aee:	80 2b       	or	r24, r16
		break;
     af0:	04 c0       	rjmp	.+8      	; 0xafa <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     af2:	00 95       	com	r16
     af4:	80 23       	and	r24, r16
		break;
     af6:	01 c0       	rjmp	.+2      	; 0xafa <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     af8:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     afa:	48 2f       	mov	r20, r24
     afc:	6c 2f       	mov	r22, r28
     afe:	8f 2d       	mov	r24, r15
     b00:	e7 de       	rcall	.-562    	; 0x8d0 <gfx_mono_st7565r_put_byte>
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	08 95       	ret

00000b0e <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b0e:	14 c0       	rjmp	.+40     	; 0xb38 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b10:	08 95       	ret

00000b12 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     b12:	80 93 22 23 	sts	0x2322, r24	; 0x802322 <fbpointer>
     b16:	90 93 23 23 	sts	0x2323, r25	; 0x802323 <fbpointer+0x1>
     b1a:	08 95       	ret

00000b1c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b1c:	20 91 22 23 	lds	r18, 0x2322	; 0x802322 <fbpointer>
     b20:	30 91 23 23 	lds	r19, 0x2323	; 0x802323 <fbpointer+0x1>
     b24:	90 e8       	ldi	r25, 0x80	; 128
     b26:	89 9f       	mul	r24, r25
     b28:	20 0d       	add	r18, r0
     b2a:	31 1d       	adc	r19, r1
     b2c:	11 24       	eor	r1, r1
     b2e:	f9 01       	movw	r30, r18
     b30:	e6 0f       	add	r30, r22
     b32:	f1 1d       	adc	r31, r1
     b34:	40 83       	st	Z, r20
     b36:	08 95       	ret

00000b38 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b38:	20 91 22 23 	lds	r18, 0x2322	; 0x802322 <fbpointer>
     b3c:	30 91 23 23 	lds	r19, 0x2323	; 0x802323 <fbpointer+0x1>
     b40:	90 e8       	ldi	r25, 0x80	; 128
     b42:	89 9f       	mul	r24, r25
     b44:	20 0d       	add	r18, r0
     b46:	31 1d       	adc	r19, r1
     b48:	11 24       	eor	r1, r1
     b4a:	f9 01       	movw	r30, r18
     b4c:	e6 0f       	add	r30, r22
     b4e:	f1 1d       	adc	r31, r1
}
     b50:	80 81       	ld	r24, Z
     b52:	08 95       	ret

00000b54 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	e4 2f       	mov	r30, r20
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	e8 0f       	add	r30, r24
     b64:	f1 1d       	adc	r31, r1
     b66:	e1 38       	cpi	r30, 0x81	; 129
     b68:	f1 05       	cpc	r31, r1
     b6a:	1c f0       	brlt	.+6      	; 0xb72 <gfx_mono_generic_draw_horizontal_line+0x1e>
     b6c:	c0 e8       	ldi	r28, 0x80	; 128
     b6e:	4c 2f       	mov	r20, r28
     b70:	48 1b       	sub	r20, r24
     b72:	44 23       	and	r20, r20
     b74:	09 f4       	brne	.+2      	; 0xb78 <gfx_mono_generic_draw_horizontal_line+0x24>
     b76:	4a c0       	rjmp	.+148    	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     b78:	d6 2f       	mov	r29, r22
     b7a:	d6 95       	lsr	r29
     b7c:	d6 95       	lsr	r29
     b7e:	d6 95       	lsr	r29
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	98 e0       	ldi	r25, 0x08	; 8
     b84:	d9 9f       	mul	r29, r25
     b86:	60 19       	sub	r22, r0
     b88:	71 09       	sbc	r23, r1
     b8a:	11 24       	eor	r1, r1
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	df 01       	movw	r26, r30
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <gfx_mono_generic_draw_horizontal_line+0x44>
     b94:	aa 0f       	add	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	6a 95       	dec	r22
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <gfx_mono_generic_draw_horizontal_line+0x40>
     b9c:	fa 2e       	mov	r15, r26
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	21 f0       	breq	.+8      	; 0xbaa <gfx_mono_generic_draw_horizontal_line+0x56>
     ba2:	98 f0       	brcs	.+38     	; 0xbca <gfx_mono_generic_draw_horizontal_line+0x76>
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	19 f1       	breq	.+70     	; 0xbee <gfx_mono_generic_draw_horizontal_line+0x9a>
     ba8:	31 c0       	rjmp	.+98     	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     baa:	c4 2f       	mov	r28, r20
     bac:	1f ef       	ldi	r17, 0xFF	; 255
     bae:	18 0f       	add	r17, r24
     bb0:	01 2f       	mov	r16, r17
     bb2:	0c 0f       	add	r16, r28
     bb4:	60 2f       	mov	r22, r16
     bb6:	8d 2f       	mov	r24, r29
     bb8:	aa df       	rcall	.-172    	; 0xb0e <gfx_mono_st7565r_get_byte>
     bba:	4f 2d       	mov	r20, r15
     bbc:	48 2b       	or	r20, r24
     bbe:	60 2f       	mov	r22, r16
     bc0:	8d 2f       	mov	r24, r29
     bc2:	86 de       	rcall	.-756    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     bc4:	c1 50       	subi	r28, 0x01	; 1
     bc6:	a1 f7       	brne	.-24     	; 0xbb0 <gfx_mono_generic_draw_horizontal_line+0x5c>
     bc8:	21 c0       	rjmp	.+66     	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     bca:	c4 2f       	mov	r28, r20
     bcc:	1f ef       	ldi	r17, 0xFF	; 255
     bce:	18 0f       	add	r17, r24
     bd0:	fa 2e       	mov	r15, r26
     bd2:	f0 94       	com	r15
     bd4:	01 2f       	mov	r16, r17
     bd6:	0c 0f       	add	r16, r28
     bd8:	60 2f       	mov	r22, r16
     bda:	8d 2f       	mov	r24, r29
     bdc:	98 df       	rcall	.-208    	; 0xb0e <gfx_mono_st7565r_get_byte>
     bde:	4f 2d       	mov	r20, r15
     be0:	48 23       	and	r20, r24
     be2:	60 2f       	mov	r22, r16
     be4:	8d 2f       	mov	r24, r29
     be6:	74 de       	rcall	.-792    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     be8:	c1 50       	subi	r28, 0x01	; 1
     bea:	a1 f7       	brne	.-24     	; 0xbd4 <gfx_mono_generic_draw_horizontal_line+0x80>
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <gfx_mono_generic_draw_horizontal_line+0xb8>
     bee:	c4 2f       	mov	r28, r20
     bf0:	1f ef       	ldi	r17, 0xFF	; 255
     bf2:	18 0f       	add	r17, r24
     bf4:	01 2f       	mov	r16, r17
     bf6:	0c 0f       	add	r16, r28
     bf8:	60 2f       	mov	r22, r16
     bfa:	8d 2f       	mov	r24, r29
     bfc:	88 df       	rcall	.-240    	; 0xb0e <gfx_mono_st7565r_get_byte>
     bfe:	4f 2d       	mov	r20, r15
     c00:	48 27       	eor	r20, r24
     c02:	60 2f       	mov	r22, r16
     c04:	8d 2f       	mov	r24, r29
     c06:	64 de       	rcall	.-824    	; 0x8d0 <gfx_mono_st7565r_put_byte>
     c08:	c1 50       	subi	r28, 0x01	; 1
     c0a:	a1 f7       	brne	.-24     	; 0xbf4 <gfx_mono_generic_draw_horizontal_line+0xa0>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	08 95       	ret

00000c18 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	if (height == 0) {
     c22:	22 23       	and	r18, r18
     c24:	69 f0       	breq	.+26     	; 0xc40 <gfx_mono_generic_draw_filled_rect+0x28>
     c26:	f4 2e       	mov	r15, r20
     c28:	18 2f       	mov	r17, r24
     c2a:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c2c:	df ef       	ldi	r29, 0xFF	; 255
     c2e:	d6 0f       	add	r29, r22
     c30:	6d 2f       	mov	r22, r29
     c32:	6c 0f       	add	r22, r28
     c34:	20 2f       	mov	r18, r16
     c36:	4f 2d       	mov	r20, r15
     c38:	81 2f       	mov	r24, r17
     c3a:	8c df       	rcall	.-232    	; 0xb54 <gfx_mono_generic_draw_horizontal_line>
     c3c:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c3e:	c1 f7       	brne	.-16     	; 0xc30 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	08 95       	ret

00000c4c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	c8 2f       	mov	r28, r24
     c62:	e6 2e       	mov	r14, r22
     c64:	b4 2e       	mov	r11, r20
     c66:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c68:	00 e0       	ldi	r16, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	24 81       	ldd	r18, Z+4	; 0x04
     c6e:	43 81       	ldd	r20, Z+3	; 0x03
     c70:	6b 2d       	mov	r22, r11
     c72:	8e 2d       	mov	r24, r14
     c74:	d1 df       	rcall	.-94     	; 0xc18 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c76:	f6 01       	movw	r30, r12
     c78:	80 81       	ld	r24, Z
     c7a:	81 11       	cpse	r24, r1
     c7c:	39 c0       	rjmp	.+114    	; 0xcf0 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c7e:	83 81       	ldd	r24, Z+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	26 95       	lsr	r18
     c84:	26 95       	lsr	r18
     c86:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c88:	87 70       	andi	r24, 0x07	; 7
     c8a:	09 f0       	breq	.+2      	; 0xc8e <gfx_mono_draw_char+0x42>
		char_row_size++;
     c8c:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c8e:	f6 01       	movw	r30, r12
     c90:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c92:	8c 2f       	mov	r24, r28
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	35 81       	ldd	r19, Z+5	; 0x05
     c98:	83 1b       	sub	r24, r19
     c9a:	91 09       	sbc	r25, r1
     c9c:	2a 9d       	mul	r18, r10
     c9e:	90 01       	movw	r18, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	82 9f       	mul	r24, r18
     ca4:	a0 01       	movw	r20, r0
     ca6:	83 9f       	mul	r24, r19
     ca8:	50 0d       	add	r21, r0
     caa:	92 9f       	mul	r25, r18
     cac:	50 0d       	add	r21, r0
     cae:	11 24       	eor	r1, r1
     cb0:	01 81       	ldd	r16, Z+1	; 0x01
     cb2:	12 81       	ldd	r17, Z+2	; 0x02
     cb4:	04 0f       	add	r16, r20
     cb6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     cb8:	f6 01       	movw	r30, r12
     cba:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     cbc:	ff 20       	and	r15, r15
     cbe:	a1 f0       	breq	.+40     	; 0xce8 <gfx_mono_draw_char+0x9c>
     cc0:	d0 e0       	ldi	r29, 0x00	; 0
     cc2:	c0 e0       	ldi	r28, 0x00	; 0
     cc4:	8e 2d       	mov	r24, r14
     cc6:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cc8:	9c 2f       	mov	r25, r28
     cca:	97 70       	andi	r25, 0x07	; 7
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     cce:	f8 01       	movw	r30, r16
     cd0:	d4 91       	lpm	r29, Z
				glyph_data++;
     cd2:	0f 5f       	subi	r16, 0xFF	; 255
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     cd6:	dd 23       	and	r29, r29
     cd8:	1c f4       	brge	.+6      	; 0xce0 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	6b 2d       	mov	r22, r11
     cde:	e1 de       	rcall	.-574    	; 0xaa2 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     ce0:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     ce2:	cf 5f       	subi	r28, 0xFF	; 255
     ce4:	fc 12       	cpse	r15, r28
     ce6:	ee cf       	rjmp	.-36     	; 0xcc4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     ce8:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     cea:	aa 94       	dec	r10
	} while (rows_left > 0);
     cec:	a1 10       	cpse	r10, r1
     cee:	e4 cf       	rjmp	.-56     	; 0xcb8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	08 95       	ret

00000d06 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	d6 2e       	mov	r13, r22
     d16:	04 2f       	mov	r16, r20
     d18:	79 01       	movw	r14, r18
     d1a:	ec 01       	movw	r28, r24
     d1c:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d1e:	89 91       	ld	r24, Y+
     d20:	8a 30       	cpi	r24, 0x0A	; 10
     d22:	31 f4       	brne	.+12     	; 0xd30 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d24:	f7 01       	movw	r30, r14
     d26:	84 81       	ldd	r24, Z+4	; 0x04
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d2c:	1d 2d       	mov	r17, r13
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d30:	8d 30       	cpi	r24, 0x0D	; 13
     d32:	39 f0       	breq	.+14     	; 0xd42 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d34:	97 01       	movw	r18, r14
     d36:	40 2f       	mov	r20, r16
     d38:	61 2f       	mov	r22, r17
     d3a:	88 df       	rcall	.-240    	; 0xc4c <gfx_mono_draw_char>
			x += font->width;
     d3c:	f7 01       	movw	r30, r14
     d3e:	83 81       	ldd	r24, Z+3	; 0x03
     d40:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d42:	88 81       	ld	r24, Y
     d44:	81 11       	cpse	r24, r1
     d46:	eb cf       	rjmp	.-42     	; 0xd1e <gfx_mono_draw_string+0x18>
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	08 95       	ret

00000d58 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d62:	c6 2f       	mov	r28, r22
     d64:	d0 e0       	ldi	r29, 0x00	; 0
     d66:	de 01       	movw	r26, r28
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <ioport_configure_port_pin+0x18>
     d6c:	b5 95       	asr	r27
     d6e:	a7 95       	ror	r26
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <ioport_configure_port_pin+0x14>
     d74:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d76:	50 8b       	std	Z+16, r21	; 0x10
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d7e:	28 30       	cpi	r18, 0x08	; 8
     d80:	31 05       	cpc	r19, r1
     d82:	89 f7       	brne	.-30     	; 0xd66 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d84:	40 ff       	sbrs	r20, 0
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d88:	41 ff       	sbrs	r20, 1
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d8c:	fc 01       	movw	r30, r24
     d8e:	65 83       	std	Z+5, r22	; 0x05
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d92:	fc 01       	movw	r30, r24
     d94:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d96:	fc 01       	movw	r30, r24
     d98:	61 83       	std	Z+1, r22	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d9c:	fc 01       	movw	r30, r24
     d9e:	62 83       	std	Z+2, r22	; 0x02
	}
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     da6:	80 3a       	cpi	r24, 0xA0	; 160
     da8:	28 e0       	ldi	r18, 0x08	; 8
     daa:	92 07       	cpc	r25, r18
     dac:	21 f4       	brne	.+8      	; 0xdb6 <usart_spi_init+0x10>
     dae:	60 e1       	ldi	r22, 0x10	; 16
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	78 cd       	rjmp	.-1296   	; 0x8a4 <sysclk_enable_module>
     db4:	08 95       	ret
     db6:	80 3b       	cpi	r24, 0xB0	; 176
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	92 07       	cpc	r25, r18
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <usart_spi_init+0x20>
     dbe:	60 e2       	ldi	r22, 0x20	; 32
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	70 cd       	rjmp	.-1312   	; 0x8a4 <sysclk_enable_module>
     dc4:	08 95       	ret
     dc6:	80 3a       	cpi	r24, 0xA0	; 160
     dc8:	29 e0       	ldi	r18, 0x09	; 9
     dca:	92 07       	cpc	r25, r18
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <usart_spi_init+0x30>
     dce:	60 e1       	ldi	r22, 0x10	; 16
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	68 cd       	rjmp	.-1328   	; 0x8a4 <sysclk_enable_module>
     dd4:	08 95       	ret
     dd6:	80 3b       	cpi	r24, 0xB0	; 176
     dd8:	29 e0       	ldi	r18, 0x09	; 9
     dda:	92 07       	cpc	r25, r18
     ddc:	21 f4       	brne	.+8      	; 0xde6 <usart_spi_init+0x40>
     dde:	60 e2       	ldi	r22, 0x20	; 32
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	60 cd       	rjmp	.-1344   	; 0x8a4 <sysclk_enable_module>
     de4:	08 95       	ret
     de6:	80 3a       	cpi	r24, 0xA0	; 160
     de8:	2a e0       	ldi	r18, 0x0A	; 10
     dea:	92 07       	cpc	r25, r18
     dec:	21 f4       	brne	.+8      	; 0xdf6 <usart_spi_init+0x50>
     dee:	60 e1       	ldi	r22, 0x10	; 16
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	58 cd       	rjmp	.-1360   	; 0x8a4 <sysclk_enable_module>
     df4:	08 95       	ret
     df6:	80 3a       	cpi	r24, 0xA0	; 160
     df8:	9b 40       	sbci	r25, 0x0B	; 11
     dfa:	19 f4       	brne	.+6      	; 0xe02 <usart_spi_init+0x5c>
     dfc:	60 e1       	ldi	r22, 0x10	; 16
     dfe:	86 e0       	ldi	r24, 0x06	; 6
     e00:	51 cd       	rjmp	.-1374   	; 0x8a4 <sysclk_enable_module>
     e02:	08 95       	ret

00000e04 <usart_spi_setup_device>:
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <usart_spi_setup_device+0xa>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <usart_spi_setup_device+0xc>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	09 83       	std	Y+1, r16	; 0x01
     e16:	1a 83       	std	Y+2, r17	; 0x02
     e18:	2b 83       	std	Y+3, r18	; 0x03
     e1a:	3c 83       	std	Y+4, r19	; 0x04
     e1c:	4d 83       	std	Y+5, r20	; 0x05
     e1e:	1e 82       	std	Y+6, r1	; 0x06
     e20:	be 01       	movw	r22, r28
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	03 d1       	rcall	.+518    	; 0x102e <usart_init_spi>
     e28:	26 96       	adiw	r28, 0x06	; 6
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e38:	fb 01       	movw	r30, r22
     e3a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e3c:	e8 2f       	mov	r30, r24
     e3e:	e6 95       	lsr	r30
     e40:	e6 95       	lsr	r30
     e42:	e6 95       	lsr	r30
     e44:	40 e2       	ldi	r20, 0x20	; 32
     e46:	e4 9f       	mul	r30, r20
     e48:	f0 01       	movw	r30, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e4e:	87 70       	andi	r24, 0x07	; 7
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	a9 01       	movw	r20, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <usart_spi_select_device+0x24>
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	8a 95       	dec	r24
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e60:	46 83       	std	Z+6, r20	; 0x06
     e62:	08 95       	ret

00000e64 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e64:	fb 01       	movw	r30, r22
     e66:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e68:	e8 2f       	mov	r30, r24
     e6a:	e6 95       	lsr	r30
     e6c:	e6 95       	lsr	r30
     e6e:	e6 95       	lsr	r30
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	e4 9f       	mul	r30, r20
     e74:	f0 01       	movw	r30, r0
     e76:	11 24       	eor	r1, r1
     e78:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e7a:	87 70       	andi	r24, 0x07	; 7
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <usart_spi_deselect_device+0x24>
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	8a 95       	dec	r24
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e8c:	45 83       	std	Z+5, r20	; 0x05
     e8e:	08 95       	ret

00000e90 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e90:	43 e0       	ldi	r20, 0x03	; 3
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	80 ee       	ldi	r24, 0xE0	; 224
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	5e df       	rcall	.-324    	; 0xd58 <ioport_configure_port_pin>
     e9c:	43 e0       	ldi	r20, 0x03	; 3
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	80 ee       	ldi	r24, 0xE0	; 224
     ea4:	97 e0       	ldi	r25, 0x07	; 7
     ea6:	58 df       	rcall	.-336    	; 0xd58 <ioport_configure_port_pin>
     ea8:	43 e0       	ldi	r20, 0x03	; 3
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	60 e1       	ldi	r22, 0x10	; 16
     eae:	80 e6       	ldi	r24, 0x60	; 96
     eb0:	96 e0       	ldi	r25, 0x06	; 6
     eb2:	52 df       	rcall	.-348    	; 0xd58 <ioport_configure_port_pin>
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	50 e4       	ldi	r21, 0x40	; 64
     eb8:	60 e2       	ldi	r22, 0x20	; 32
     eba:	80 e6       	ldi	r24, 0x60	; 96
     ebc:	96 e0       	ldi	r25, 0x06	; 6
     ebe:	4c df       	rcall	.-360    	; 0xd58 <ioport_configure_port_pin>
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	5b e1       	ldi	r21, 0x1B	; 27
     ec4:	60 e2       	ldi	r22, 0x20	; 32
     ec6:	80 e8       	ldi	r24, 0x80	; 128
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	46 df       	rcall	.-372    	; 0xd58 <ioport_configure_port_pin>
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	5b e1       	ldi	r21, 0x1B	; 27
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	80 ea       	ldi	r24, 0xA0	; 160
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	40 df       	rcall	.-384    	; 0xd58 <ioport_configure_port_pin>
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	5b e1       	ldi	r21, 0x1B	; 27
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	80 ea       	ldi	r24, 0xA0	; 160
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	3a df       	rcall	.-396    	; 0xd58 <ioport_configure_port_pin>
     ee4:	43 e0       	ldi	r20, 0x03	; 3
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	62 e0       	ldi	r22, 0x02	; 2
     eea:	80 e6       	ldi	r24, 0x60	; 96
     eec:	96 e0       	ldi	r25, 0x06	; 6
     eee:	34 df       	rcall	.-408    	; 0xd58 <ioport_configure_port_pin>
     ef0:	43 e0       	ldi	r20, 0x03	; 3
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	68 e0       	ldi	r22, 0x08	; 8
     ef6:	80 e6       	ldi	r24, 0x60	; 96
     ef8:	96 e0       	ldi	r25, 0x06	; 6
     efa:	2e df       	rcall	.-420    	; 0xd58 <ioport_configure_port_pin>
     efc:	43 e0       	ldi	r20, 0x03	; 3
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	68 e0       	ldi	r22, 0x08	; 8
     f02:	80 ea       	ldi	r24, 0xA0	; 160
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	28 df       	rcall	.-432    	; 0xd58 <ioport_configure_port_pin>
     f08:	43 e0       	ldi	r20, 0x03	; 3
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	96 e0       	ldi	r25, 0x06	; 6
     f12:	22 df       	rcall	.-444    	; 0xd58 <ioport_configure_port_pin>
     f14:	43 e0       	ldi	r20, 0x03	; 3
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	68 e0       	ldi	r22, 0x08	; 8
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	96 e0       	ldi	r25, 0x06	; 6
     f1e:	1c df       	rcall	.-456    	; 0xd58 <ioport_configure_port_pin>
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	60 e1       	ldi	r22, 0x10	; 16
     f26:	80 e8       	ldi	r24, 0x80	; 128
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	16 df       	rcall	.-468    	; 0xd58 <ioport_configure_port_pin>
     f2c:	43 e0       	ldi	r20, 0x03	; 3
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	62 e0       	ldi	r22, 0x02	; 2
     f32:	80 e6       	ldi	r24, 0x60	; 96
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	10 df       	rcall	.-480    	; 0xd58 <ioport_configure_port_pin>
     f38:	43 e0       	ldi	r20, 0x03	; 3
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	68 e0       	ldi	r22, 0x08	; 8
     f3e:	80 e6       	ldi	r24, 0x60	; 96
     f40:	96 e0       	ldi	r25, 0x06	; 6
     f42:	0a df       	rcall	.-492    	; 0xd58 <ioport_configure_port_pin>
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	64 e0       	ldi	r22, 0x04	; 4
     f4a:	80 e6       	ldi	r24, 0x60	; 96
     f4c:	96 e0       	ldi	r25, 0x06	; 6
     f4e:	04 df       	rcall	.-504    	; 0xd58 <ioport_configure_port_pin>
     f50:	43 e0       	ldi	r20, 0x03	; 3
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	60 e1       	ldi	r22, 0x10	; 16
     f56:	80 ea       	ldi	r24, 0xA0	; 160
     f58:	96 e0       	ldi	r25, 0x06	; 6
     f5a:	fe de       	rcall	.-516    	; 0xd58 <ioport_configure_port_pin>
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	f8 de       	rcall	.-528    	; 0xd58 <ioport_configure_port_pin>
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	64 e0       	ldi	r22, 0x04	; 4
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	96 e0       	ldi	r25, 0x06	; 6
     f72:	f2 de       	rcall	.-540    	; 0xd58 <ioport_configure_port_pin>
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	96 e0       	ldi	r25, 0x06	; 6
     f7e:	ec de       	rcall	.-552    	; 0xd58 <ioport_configure_port_pin>
     f80:	43 e0       	ldi	r20, 0x03	; 3
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	68 e0       	ldi	r22, 0x08	; 8
     f86:	80 e4       	ldi	r24, 0x40	; 64
     f88:	96 e0       	ldi	r25, 0x06	; 6
     f8a:	e6 de       	rcall	.-564    	; 0xd58 <ioport_configure_port_pin>
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	64 e0       	ldi	r22, 0x04	; 4
     f92:	80 e4       	ldi	r24, 0x40	; 64
     f94:	96 e0       	ldi	r25, 0x06	; 6
     f96:	e0 de       	rcall	.-576    	; 0xd58 <ioport_configure_port_pin>
     f98:	43 e0       	ldi	r20, 0x03	; 3
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	68 e0       	ldi	r22, 0x08	; 8
     f9e:	80 e6       	ldi	r24, 0x60	; 96
     fa0:	96 e0       	ldi	r25, 0x06	; 6
     fa2:	da de       	rcall	.-588    	; 0xd58 <ioport_configure_port_pin>
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	64 e0       	ldi	r22, 0x04	; 4
     faa:	80 e6       	ldi	r24, 0x60	; 96
     fac:	96 e0       	ldi	r25, 0x06	; 6
     fae:	d4 de       	rcall	.-600    	; 0xd58 <ioport_configure_port_pin>
     fb0:	43 e0       	ldi	r20, 0x03	; 3
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	68 e0       	ldi	r22, 0x08	; 8
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	96 e0       	ldi	r25, 0x06	; 6
     fba:	ce de       	rcall	.-612    	; 0xd58 <ioport_configure_port_pin>
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	80 e8       	ldi	r24, 0x80	; 128
     fc4:	96 e0       	ldi	r25, 0x06	; 6
     fc6:	c8 ce       	rjmp	.-624    	; 0xd58 <ioport_configure_port_pin>
     fc8:	08 95       	ret

00000fca <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     fdc:	d9 01       	movw	r26, r18
     fde:	c8 01       	movw	r24, r16
     fe0:	b6 95       	lsr	r27
     fe2:	a7 95       	ror	r26
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	48 17       	cp	r20, r24
     fea:	59 07       	cpc	r21, r25
     fec:	6a 07       	cpc	r22, r26
     fee:	7b 07       	cpc	r23, r27
     ff0:	78 f4       	brcc	.+30     	; 0x1010 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     ff2:	6a 01       	movw	r12, r20
     ff4:	7b 01       	movw	r14, r22
     ff6:	cc 0c       	add	r12, r12
     ff8:	dd 1c       	adc	r13, r13
     ffa:	ee 1c       	adc	r14, r14
     ffc:	ff 1c       	adc	r15, r15
     ffe:	c9 01       	movw	r24, r18
    1000:	b8 01       	movw	r22, r16
    1002:	a7 01       	movw	r20, r14
    1004:	96 01       	movw	r18, r12
    1006:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <__udivmodsi4>
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	31 09       	sbc	r19, r1
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1014:	83 2f       	mov	r24, r19
    1016:	8f 70       	andi	r24, 0x0F	; 15
    1018:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    101a:	2e 83       	std	Y+6, r18	; 0x06
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	08 95       	ret

0000102e <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	1f 92       	push	r1
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	7c 01       	movw	r14, r24
    1044:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	09 f4       	brne	.+2      	; 0x104c <usart_init_spi+0x1e>
    104a:	b2 c1       	rjmp	.+868    	; 0x13b0 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    104c:	80 3c       	cpi	r24, 0xC0	; 192
    104e:	91 05       	cpc	r25, r1
    1050:	21 f4       	brne	.+8      	; 0x105a <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1052:	60 e1       	ldi	r22, 0x10	; 16
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	26 dc       	rcall	.-1972   	; 0x8a4 <sysclk_enable_module>
    1058:	ab c1       	rjmp	.+854    	; 0x13b0 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    105a:	80 e8       	ldi	r24, 0x80	; 128
    105c:	e8 16       	cp	r14, r24
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	f8 06       	cpc	r15, r24
    1062:	21 f4       	brne	.+8      	; 0x106c <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	1d dc       	rcall	.-1990   	; 0x8a4 <sysclk_enable_module>
    106a:	a2 c1       	rjmp	.+836    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    106c:	e1 14       	cp	r14, r1
    106e:	e1 e0       	ldi	r30, 0x01	; 1
    1070:	fe 06       	cpc	r15, r30
    1072:	21 f4       	brne	.+8      	; 0x107c <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	15 dc       	rcall	.-2006   	; 0x8a4 <sysclk_enable_module>
    107a:	9a c1       	rjmp	.+820    	; 0x13b0 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    107c:	f0 e8       	ldi	r31, 0x80	; 128
    107e:	ef 16       	cp	r14, r31
    1080:	f3 e0       	ldi	r31, 0x03	; 3
    1082:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1084:	21 f4       	brne	.+8      	; 0x108e <usart_init_spi+0x60>
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0c dc       	rcall	.-2024   	; 0x8a4 <sysclk_enable_module>
    108c:	91 c1       	rjmp	.+802    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    108e:	30 e9       	ldi	r19, 0x90	; 144
    1090:	e3 16       	cp	r14, r19
    1092:	33 e0       	ldi	r19, 0x03	; 3
    1094:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1096:	21 f4       	brne	.+8      	; 0x10a0 <usart_init_spi+0x72>
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	03 dc       	rcall	.-2042   	; 0x8a4 <sysclk_enable_module>
    109e:	88 c1       	rjmp	.+784    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    10a0:	e1 14       	cp	r14, r1
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <usart_init_spi+0x82>
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	fb db       	rcall	.-2058   	; 0x8a4 <sysclk_enable_module>
    10ae:	80 c1       	rjmp	.+768    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    10b0:	e0 e4       	ldi	r30, 0x40	; 64
    10b2:	ee 16       	cp	r14, r30
    10b4:	e2 e0       	ldi	r30, 0x02	; 2
    10b6:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <usart_init_spi+0x94>
    10ba:	62 e0       	ldi	r22, 0x02	; 2
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	f2 db       	rcall	.-2076   	; 0x8a4 <sysclk_enable_module>
    10c0:	77 c1       	rjmp	.+750    	; 0x13b0 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    10c2:	f0 e2       	ldi	r31, 0x20	; 32
    10c4:	ef 16       	cp	r14, r31
    10c6:	f3 e0       	ldi	r31, 0x03	; 3
    10c8:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <usart_init_spi+0xa6>
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	e9 db       	rcall	.-2094   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    10d2:	6e c1       	rjmp	.+732    	; 0x13b0 <usart_init_spi+0x382>
    10d4:	e1 14       	cp	r14, r1
    10d6:	38 e0       	ldi	r19, 0x08	; 8
    10d8:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10da:	21 f4       	brne	.+8      	; 0x10e4 <usart_init_spi+0xb6>
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	e1 db       	rcall	.-2110   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10e2:	66 c1       	rjmp	.+716    	; 0x13b0 <usart_init_spi+0x382>
    10e4:	e1 14       	cp	r14, r1
    10e6:	89 e0       	ldi	r24, 0x09	; 9
    10e8:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10ea:	21 f4       	brne	.+8      	; 0x10f4 <usart_init_spi+0xc6>
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	d9 db       	rcall	.-2126   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10f2:	5e c1       	rjmp	.+700    	; 0x13b0 <usart_init_spi+0x382>
    10f4:	e1 14       	cp	r14, r1
    10f6:	ea e0       	ldi	r30, 0x0A	; 10
    10f8:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10fa:	21 f4       	brne	.+8      	; 0x1104 <usart_init_spi+0xd6>
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	85 e0       	ldi	r24, 0x05	; 5
    1100:	d1 db       	rcall	.-2142   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1102:	56 c1       	rjmp	.+684    	; 0x13b0 <usart_init_spi+0x382>
    1104:	e1 14       	cp	r14, r1
    1106:	fb e0       	ldi	r31, 0x0B	; 11
    1108:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    110a:	21 f4       	brne	.+8      	; 0x1114 <usart_init_spi+0xe6>
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	86 e0       	ldi	r24, 0x06	; 6
    1110:	c9 db       	rcall	.-2158   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1112:	4e c1       	rjmp	.+668    	; 0x13b0 <usart_init_spi+0x382>
    1114:	30 e4       	ldi	r19, 0x40	; 64
    1116:	e3 16       	cp	r14, r19
    1118:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    111a:	f3 06       	cpc	r15, r19
    111c:	21 f4       	brne	.+8      	; 0x1126 <usart_init_spi+0xf8>
    111e:	62 e0       	ldi	r22, 0x02	; 2
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	c0 db       	rcall	.-2176   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1124:	45 c1       	rjmp	.+650    	; 0x13b0 <usart_init_spi+0x382>
    1126:	80 e4       	ldi	r24, 0x40	; 64
    1128:	e8 16       	cp	r14, r24
    112a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    112c:	f8 06       	cpc	r15, r24
    112e:	21 f4       	brne	.+8      	; 0x1138 <usart_init_spi+0x10a>
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	b7 db       	rcall	.-2194   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1136:	3c c1       	rjmp	.+632    	; 0x13b0 <usart_init_spi+0x382>
    1138:	e0 e4       	ldi	r30, 0x40	; 64
    113a:	ee 16       	cp	r14, r30
    113c:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    113e:	fe 06       	cpc	r15, r30
    1140:	21 f4       	brne	.+8      	; 0x114a <usart_init_spi+0x11c>
    1142:	62 e0       	ldi	r22, 0x02	; 2
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	ae db       	rcall	.-2212   	; 0x8a4 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1148:	33 c1       	rjmp	.+614    	; 0x13b0 <usart_init_spi+0x382>
    114a:	f0 e9       	ldi	r31, 0x90	; 144
    114c:	ef 16       	cp	r14, r31
    114e:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1150:	ff 06       	cpc	r15, r31
    1152:	21 f4       	brne	.+8      	; 0x115c <usart_init_spi+0x12e>
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	a5 db       	rcall	.-2230   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    115a:	2a c1       	rjmp	.+596    	; 0x13b0 <usart_init_spi+0x382>
    115c:	30 e9       	ldi	r19, 0x90	; 144
    115e:	e3 16       	cp	r14, r19
    1160:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1162:	f3 06       	cpc	r15, r19
    1164:	21 f4       	brne	.+8      	; 0x116e <usart_init_spi+0x140>
    1166:	64 e0       	ldi	r22, 0x04	; 4
    1168:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    116a:	9c db       	rcall	.-2248   	; 0x8a4 <sysclk_enable_module>
    116c:	21 c1       	rjmp	.+578    	; 0x13b0 <usart_init_spi+0x382>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	e8 16       	cp	r14, r24
    1172:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1174:	f8 06       	cpc	r15, r24
    1176:	21 f4       	brne	.+8      	; 0x1180 <usart_init_spi+0x152>
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    117c:	93 db       	rcall	.-2266   	; 0x8a4 <sysclk_enable_module>
    117e:	18 c1       	rjmp	.+560    	; 0x13b0 <usart_init_spi+0x382>
    1180:	e0 e9       	ldi	r30, 0x90	; 144
    1182:	ee 16       	cp	r14, r30
    1184:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1186:	fe 06       	cpc	r15, r30
    1188:	21 f4       	brne	.+8      	; 0x1192 <usart_init_spi+0x164>
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    118e:	8a db       	rcall	.-2284   	; 0x8a4 <sysclk_enable_module>
    1190:	0f c1       	rjmp	.+542    	; 0x13b0 <usart_init_spi+0x382>
    1192:	f0 ec       	ldi	r31, 0xC0	; 192
    1194:	ef 16       	cp	r14, r31
    1196:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1198:	ff 06       	cpc	r15, r31
    119a:	21 f4       	brne	.+8      	; 0x11a4 <usart_init_spi+0x176>
    119c:	68 e0       	ldi	r22, 0x08	; 8
    119e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    11a0:	81 db       	rcall	.-2302   	; 0x8a4 <sysclk_enable_module>
    11a2:	06 c1       	rjmp	.+524    	; 0x13b0 <usart_init_spi+0x382>
    11a4:	30 ec       	ldi	r19, 0xC0	; 192
    11a6:	e3 16       	cp	r14, r19
    11a8:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    11aa:	f3 06       	cpc	r15, r19
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <usart_init_spi+0x188>
    11ae:	68 e0       	ldi	r22, 0x08	; 8
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	78 db       	rcall	.-2320   	; 0x8a4 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    11b4:	fd c0       	rjmp	.+506    	; 0x13b0 <usart_init_spi+0x382>
    11b6:	80 ea       	ldi	r24, 0xA0	; 160
    11b8:	e8 16       	cp	r14, r24
    11ba:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    11bc:	f8 06       	cpc	r15, r24
    11be:	61 f4       	brne	.+24     	; 0x11d8 <usart_init_spi+0x1aa>
    11c0:	60 e1       	ldi	r22, 0x10	; 16
    11c2:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    11c4:	6f db       	rcall	.-2338   	; 0x8a4 <sysclk_enable_module>
    11c6:	e0 ea       	ldi	r30, 0xA0	; 160
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    11cc:	8f 7e       	andi	r24, 0xEF	; 239
    11ce:	84 83       	std	Z+4, r24	; 0x04
    11d0:	f8 01       	movw	r30, r16
    11d2:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    11d4:	22 50       	subi	r18, 0x02	; 2
    11d6:	4c c0       	rjmp	.+152    	; 0x1270 <usart_init_spi+0x242>
    11d8:	f0 ea       	ldi	r31, 0xA0	; 160
    11da:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11dc:	f9 e0       	ldi	r31, 0x09	; 9
    11de:	ff 06       	cpc	r15, r31
    11e0:	21 f4       	brne	.+8      	; 0x11ea <usart_init_spi+0x1bc>
    11e2:	60 e1       	ldi	r22, 0x10	; 16
    11e4:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11e6:	5e db       	rcall	.-2372   	; 0x8a4 <sysclk_enable_module>
    11e8:	e3 c0       	rjmp	.+454    	; 0x13b0 <usart_init_spi+0x382>
    11ea:	30 ea       	ldi	r19, 0xA0	; 160
    11ec:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11ee:	3a e0       	ldi	r19, 0x0A	; 10
    11f0:	f3 06       	cpc	r15, r19
    11f2:	21 f4       	brne	.+8      	; 0x11fc <usart_init_spi+0x1ce>
    11f4:	60 e1       	ldi	r22, 0x10	; 16
    11f6:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11f8:	55 db       	rcall	.-2390   	; 0x8a4 <sysclk_enable_module>
    11fa:	da c0       	rjmp	.+436    	; 0x13b0 <usart_init_spi+0x382>
    11fc:	80 ea       	ldi	r24, 0xA0	; 160
    11fe:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1200:	8b e0       	ldi	r24, 0x0B	; 11
    1202:	f8 06       	cpc	r15, r24
    1204:	21 f4       	brne	.+8      	; 0x120e <usart_init_spi+0x1e0>
    1206:	60 e1       	ldi	r22, 0x10	; 16
    1208:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    120a:	4c db       	rcall	.-2408   	; 0x8a4 <sysclk_enable_module>
    120c:	d1 c0       	rjmp	.+418    	; 0x13b0 <usart_init_spi+0x382>
    120e:	e0 eb       	ldi	r30, 0xB0	; 176
    1210:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1212:	e8 e0       	ldi	r30, 0x08	; 8
    1214:	fe 06       	cpc	r15, r30
    1216:	21 f4       	brne	.+8      	; 0x1220 <usart_init_spi+0x1f2>
    1218:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	43 db       	rcall	.-2426   	; 0x8a4 <sysclk_enable_module>
    121e:	c8 c0       	rjmp	.+400    	; 0x13b0 <usart_init_spi+0x382>
    1220:	f0 eb       	ldi	r31, 0xB0	; 176
    1222:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1224:	f9 e0       	ldi	r31, 0x09	; 9
    1226:	ff 06       	cpc	r15, r31
    1228:	21 f4       	brne	.+8      	; 0x1232 <usart_init_spi+0x204>
    122a:	60 e2       	ldi	r22, 0x20	; 32
    122c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    122e:	3a db       	rcall	.-2444   	; 0x8a4 <sysclk_enable_module>
    1230:	bf c0       	rjmp	.+382    	; 0x13b0 <usart_init_spi+0x382>
    1232:	30 e8       	ldi	r19, 0x80	; 128
    1234:	e3 16       	cp	r14, r19
    1236:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1238:	f3 06       	cpc	r15, r19
    123a:	21 f4       	brne	.+8      	; 0x1244 <usart_init_spi+0x216>
    123c:	60 e4       	ldi	r22, 0x40	; 64
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	31 db       	rcall	.-2462   	; 0x8a4 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1242:	b6 c0       	rjmp	.+364    	; 0x13b0 <usart_init_spi+0x382>
    1244:	80 ea       	ldi	r24, 0xA0	; 160
    1246:	e8 16       	cp	r14, r24
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    124c:	21 f4       	brne	.+8      	; 0x1256 <usart_init_spi+0x228>
    124e:	60 e4       	ldi	r22, 0x40	; 64
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	28 db       	rcall	.-2480   	; 0x8a4 <sysclk_enable_module>
    1254:	ad c0       	rjmp	.+346    	; 0x13b0 <usart_init_spi+0x382>
    1256:	f7 01       	movw	r30, r14
    1258:	84 81       	ldd	r24, Z+4	; 0x04
    125a:	8f 7e       	andi	r24, 0xEF	; 239
    125c:	84 83       	std	Z+4, r24	; 0x04
    125e:	fb 01       	movw	r30, r22
    1260:	24 81       	ldd	r18, Z+4	; 0x04
    1262:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1264:	c7 01       	movw	r24, r14
    1266:	f0 ea       	ldi	r31, 0xA0	; 160
    1268:	ef 16       	cp	r14, r31
    126a:	f8 e0       	ldi	r31, 0x08	; 8
    126c:	ff 06       	cpc	r15, r31
    126e:	49 f4       	brne	.+18     	; 0x1282 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1270:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1274:	84 fd       	sbrc	r24, 4
    1276:	a5 c0       	rjmp	.+330    	; 0x13c2 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1278:	0f 2e       	mov	r0, r31
    127a:	f1 e1       	ldi	r31, 0x11	; 17
    127c:	df 2e       	mov	r13, r31
    127e:	f0 2d       	mov	r31, r0
    1280:	a4 c0       	rjmp	.+328    	; 0x13ca <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1282:	80 3b       	cpi	r24, 0xB0	; 176
    1284:	38 e0       	ldi	r19, 0x08	; 8
    1286:	93 07       	cpc	r25, r19
    1288:	91 f0       	breq	.+36     	; 0x12ae <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    128a:	80 3a       	cpi	r24, 0xA0	; 160
    128c:	e9 e0       	ldi	r30, 0x09	; 9
    128e:	9e 07       	cpc	r25, r30
    1290:	49 f4       	brne	.+18     	; 0x12a4 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1292:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1296:	34 fd       	sbrc	r19, 4
    1298:	9b c0       	rjmp	.+310    	; 0x13d0 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    129a:	0f 2e       	mov	r0, r31
    129c:	f9 e1       	ldi	r31, 0x19	; 25
    129e:	df 2e       	mov	r13, r31
    12a0:	f0 2d       	mov	r31, r0
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    12a4:	80 3b       	cpi	r24, 0xB0	; 176
    12a6:	f9 e0       	ldi	r31, 0x09	; 9
    12a8:	9f 07       	cpc	r25, r31
    12aa:	f1 f0       	breq	.+60     	; 0x12e8 <usart_init_spi+0x2ba>
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f5 e1       	ldi	r31, 0x15	; 21
    12b2:	df 2e       	mov	r13, r31
    12b4:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    12b6:	80 3a       	cpi	r24, 0xA0	; 160
    12b8:	3a e0       	ldi	r19, 0x0A	; 10
    12ba:	93 07       	cpc	r25, r19
    12bc:	49 f4       	brne	.+18     	; 0x12d0 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    12be:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    12c2:	84 fd       	sbrc	r24, 4
    12c4:	8a c0       	rjmp	.+276    	; 0x13da <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    12c6:	0f 2e       	mov	r0, r31
    12c8:	f1 e2       	ldi	r31, 0x21	; 33
    12ca:	df 2e       	mov	r13, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	15 c0       	rjmp	.+42     	; 0x12fa <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    12d0:	80 3a       	cpi	r24, 0xA0	; 160
    12d2:	9b 40       	sbci	r25, 0x0B	; 11
    12d4:	91 f4       	brne	.+36     	; 0x12fa <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    12d6:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    12da:	84 fd       	sbrc	r24, 4
    12dc:	0a c0       	rjmp	.+20     	; 0x12f2 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    12de:	0f 2e       	mov	r0, r31
    12e0:	f9 e2       	ldi	r31, 0x29	; 41
    12e2:	df 2e       	mov	r13, r31
    12e4:	f0 2d       	mov	r31, r0
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12e8:	0f 2e       	mov	r0, r31
    12ea:	fd e1       	ldi	r31, 0x1D	; 29
    12ec:	df 2e       	mov	r13, r31
    12ee:	f0 2d       	mov	r31, r0
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    12f2:	0f 2e       	mov	r0, r31
    12f4:	fd e2       	ldi	r31, 0x2D	; 45
    12f6:	df 2e       	mov	r13, r31
    12f8:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12fa:	ed 2d       	mov	r30, r13
    12fc:	e6 95       	lsr	r30
    12fe:	e6 95       	lsr	r30
    1300:	e6 95       	lsr	r30
    1302:	30 e2       	ldi	r19, 0x20	; 32
    1304:	e3 9f       	mul	r30, r19
    1306:	f0 01       	movw	r30, r0
    1308:	11 24       	eor	r1, r1
    130a:	fa 5f       	subi	r31, 0xFA	; 250
    130c:	3d 2d       	mov	r19, r13
    130e:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	03 2e       	mov	r0, r19
    1316:	02 c0       	rjmp	.+4      	; 0x131c <usart_init_spi+0x2ee>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1320:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	10 f0       	brcs	.+4      	; 0x132a <usart_init_spi+0x2fc>
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	01 c0       	rjmp	.+2      	; 0x132c <usart_init_spi+0x2fe>
    132a:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    132c:	df 01       	movw	r26, r30
    132e:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1330:	a3 0f       	add	r26, r19
    1332:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1334:	9f b7       	in	r25, 0x3f	; 63
    1336:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1338:	f8 94       	cli
	return flags;
    133a:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    133c:	2c 91       	ld	r18, X
    133e:	27 70       	andi	r18, 0x07	; 7
    1340:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1342:	9c 91       	ld	r25, X
    1344:	94 2b       	or	r25, r20
    1346:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1348:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    134a:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    134c:	f7 01       	movw	r30, r14
    134e:	85 81       	ldd	r24, Z+5	; 0x05
    1350:	80 6c       	ori	r24, 0xC0	; 192
    1352:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1354:	f8 01       	movw	r30, r16
    1356:	84 81       	ldd	r24, Z+4	; 0x04
    1358:	8d 7f       	andi	r24, 0xFD	; 253
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	29 f4       	brne	.+10     	; 0x1368 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    135e:	f7 01       	movw	r30, r14
    1360:	85 81       	ldd	r24, Z+5	; 0x05
    1362:	82 60       	ori	r24, 0x02	; 2
    1364:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <usart_init_spi+0x342>
    1368:	f7 01       	movw	r30, r14
    136a:	85 81       	ldd	r24, Z+5	; 0x05
    136c:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    136e:	85 83       	std	Z+5, r24	; 0x05
    1370:	f8 01       	movw	r30, r16
    1372:	85 81       	ldd	r24, Z+5	; 0x05
    1374:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1376:	29 f0       	breq	.+10     	; 0x1382 <usart_init_spi+0x354>
    1378:	f7 01       	movw	r30, r14
    137a:	85 81       	ldd	r24, Z+5	; 0x05
    137c:	84 60       	ori	r24, 0x04	; 4
    137e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1380:	04 c0       	rjmp	.+8      	; 0x138a <usart_init_spi+0x35c>
    1382:	f7 01       	movw	r30, r14
    1384:	85 81       	ldd	r24, Z+5	; 0x05
    1386:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1388:	85 83       	std	Z+5, r24	; 0x05
    138a:	f8 01       	movw	r30, r16
    138c:	40 81       	ld	r20, Z
    138e:	51 81       	ldd	r21, Z+1	; 0x01
    1390:	62 81       	ldd	r22, Z+2	; 0x02
    1392:	73 81       	ldd	r23, Z+3	; 0x03
    1394:	00 e8       	ldi	r16, 0x80	; 128
    1396:	14 e8       	ldi	r17, 0x84	; 132
    1398:	2e e1       	ldi	r18, 0x1E	; 30
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	c7 01       	movw	r24, r14
    139e:	15 de       	rcall	.-982    	; 0xfca <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    13a0:	f7 01       	movw	r30, r14
    13a2:	84 81       	ldd	r24, Z+4	; 0x04
    13a4:	88 60       	ori	r24, 0x08	; 8
    13a6:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13ae:	1a c0       	rjmp	.+52     	; 0x13e4 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    13b0:	f7 01       	movw	r30, r14
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	8f 7e       	andi	r24, 0xEF	; 239
    13b6:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    13b8:	f8 01       	movw	r30, r16
    13ba:	24 81       	ldd	r18, Z+4	; 0x04
    13bc:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    13be:	c7 01       	movw	r24, r14
    13c0:	60 cf       	rjmp	.-320    	; 0x1282 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    13c2:	0f 2e       	mov	r0, r31
    13c4:	f5 e1       	ldi	r31, 0x15	; 21
    13c6:	df 2e       	mov	r13, r31
    13c8:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    13ca:	80 ea       	ldi	r24, 0xA0	; 160
    13cc:	98 e0       	ldi	r25, 0x08	; 8
    13ce:	6a cf       	rjmp	.-300    	; 0x12a4 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    13d0:	0f 2e       	mov	r0, r31
    13d2:	fd e1       	ldi	r31, 0x1D	; 29
    13d4:	df 2e       	mov	r13, r31
    13d6:	f0 2d       	mov	r31, r0
    13d8:	7b cf       	rjmp	.-266    	; 0x12d0 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    13da:	0f 2e       	mov	r0, r31
    13dc:	f5 e2       	ldi	r31, 0x25	; 37
    13de:	df 2e       	mov	r13, r31
    13e0:	f0 2d       	mov	r31, r0
    13e2:	8b cf       	rjmp	.-234    	; 0x12fa <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13e4:	0f 90       	pop	r0
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	08 95       	ret

000013f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    13f6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13f8:	03 96       	adiw	r24, 0x03	; 3
    13fa:	81 83       	std	Z+1, r24	; 0x01
    13fc:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	23 83       	std	Z+3, r18	; 0x03
    1404:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1406:	85 83       	std	Z+5, r24	; 0x05
    1408:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    140a:	87 83       	std	Z+7, r24	; 0x07
    140c:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    140e:	10 82       	st	Z, r1
    1410:	08 95       	ret

00001412 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1412:	fc 01       	movw	r30, r24
    1414:	10 86       	std	Z+8, r1	; 0x08
    1416:	11 86       	std	Z+9, r1	; 0x09
    1418:	08 95       	ret

0000141a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	9c 01       	movw	r18, r24
    1420:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1422:	dc 01       	movw	r26, r24
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	cd 91       	ld	r28, X+
    1428:	dc 91       	ld	r29, X
    142a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    142c:	c2 83       	std	Z+2, r28	; 0x02
    142e:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	84 83       	std	Z+4, r24	; 0x04
    1436:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	dc 01       	movw	r26, r24
    143e:	12 96       	adiw	r26, 0x02	; 2
    1440:	6d 93       	st	X+, r22
    1442:	7c 93       	st	X, r23
    1444:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    1446:	6c 83       	std	Y+4, r22	; 0x04
    1448:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    144a:	20 87       	std	Z+8, r18	; 0x08
    144c:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    144e:	f9 01       	movw	r30, r18
    1450:	80 81       	ld	r24, Z
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 83       	st	Z, r24
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1462:	48 81       	ld	r20, Y
    1464:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1466:	4f 3f       	cpi	r20, 0xFF	; 255
    1468:	2f ef       	ldi	r18, 0xFF	; 255
    146a:	52 07       	cpc	r21, r18
    146c:	21 f4       	brne	.+8      	; 0x1476 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    146e:	fc 01       	movw	r30, r24
    1470:	a7 81       	ldd	r26, Z+7	; 0x07
    1472:	b0 85       	ldd	r27, Z+8	; 0x08
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1476:	dc 01       	movw	r26, r24
    1478:	13 96       	adiw	r26, 0x03	; 3
    147a:	01 c0       	rjmp	.+2      	; 0x147e <vListInsert+0x22>
    147c:	df 01       	movw	r26, r30
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	13 97       	sbiw	r26, 0x03	; 3
    1486:	20 81       	ld	r18, Z
    1488:	31 81       	ldd	r19, Z+1	; 0x01
    148a:	42 17       	cp	r20, r18
    148c:	53 07       	cpc	r21, r19
    148e:	b0 f7       	brcc	.-20     	; 0x147c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1490:	12 96       	adiw	r26, 0x02	; 2
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	13 97       	sbiw	r26, 0x03	; 3
    1498:	ea 83       	std	Y+2, r30	; 0x02
    149a:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    149c:	c4 83       	std	Z+4, r28	; 0x04
    149e:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    14a0:	ac 83       	std	Y+4, r26	; 0x04
    14a2:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    14a4:	12 96       	adiw	r26, 0x02	; 2
    14a6:	cd 93       	st	X+, r28
    14a8:	dc 93       	st	X, r29
    14aa:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14ac:	88 87       	std	Y+8, r24	; 0x08
    14ae:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 81       	ld	r18, Z
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	20 83       	st	Z, r18
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    14c4:	a0 85       	ldd	r26, Z+8	; 0x08
    14c6:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14c8:	c2 81       	ldd	r28, Z+2	; 0x02
    14ca:	d3 81       	ldd	r29, Z+3	; 0x03
    14cc:	84 81       	ldd	r24, Z+4	; 0x04
    14ce:	95 81       	ldd	r25, Z+5	; 0x05
    14d0:	8c 83       	std	Y+4, r24	; 0x04
    14d2:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14d4:	c4 81       	ldd	r28, Z+4	; 0x04
    14d6:	d5 81       	ldd	r29, Z+5	; 0x05
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	12 97       	sbiw	r26, 0x02	; 2
    14e8:	e8 17       	cp	r30, r24
    14ea:	f9 07       	cpc	r31, r25
    14ec:	31 f4       	brne	.+12     	; 0x14fa <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	95 81       	ldd	r25, Z+5	; 0x05
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	8d 93       	st	X+, r24
    14f6:	9c 93       	st	X, r25
    14f8:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    14fa:	10 86       	std	Z+8, r1	; 0x08
    14fc:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    14fe:	8c 91       	ld	r24, X
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    1510:	71 e1       	ldi	r23, 0x11	; 17
    1512:	fc 01       	movw	r30, r24
    1514:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    1516:	31 97       	sbiw	r30, 0x01	; 1
    1518:	62 e2       	ldi	r22, 0x22	; 34
    151a:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    151c:	31 97       	sbiw	r30, 0x01	; 1
    151e:	23 e3       	ldi	r18, 0x33	; 51
    1520:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    1522:	01 2e       	mov	r0, r17
    1524:	00 0c       	add	r0, r0
    1526:	22 0b       	sbc	r18, r18
    1528:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    152a:	31 97       	sbiw	r30, 0x01	; 1
    152c:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    152e:	31 97       	sbiw	r30, 0x01	; 1
    1530:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1532:	31 97       	sbiw	r30, 0x01	; 1
    1534:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    1536:	31 97       	sbiw	r30, 0x01	; 1
    1538:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    153a:	31 97       	sbiw	r30, 0x01	; 1
    153c:	20 e8       	ldi	r18, 0x80	; 128
    153e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    1540:	31 97       	sbiw	r30, 0x01	; 1
    1542:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    1544:	31 97       	sbiw	r30, 0x01	; 1
    1546:	22 e0       	ldi	r18, 0x02	; 2
    1548:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    154a:	31 97       	sbiw	r30, 0x01	; 1
    154c:	23 e0       	ldi	r18, 0x03	; 3
    154e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    1550:	31 97       	sbiw	r30, 0x01	; 1
    1552:	24 e0       	ldi	r18, 0x04	; 4
    1554:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	25 e0       	ldi	r18, 0x05	; 5
    155a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	26 e0       	ldi	r18, 0x06	; 6
    1560:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    1562:	31 97       	sbiw	r30, 0x01	; 1
    1564:	27 e0       	ldi	r18, 0x07	; 7
    1566:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	28 e0       	ldi	r18, 0x08	; 8
    156c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    156e:	31 97       	sbiw	r30, 0x01	; 1
    1570:	29 e0       	ldi	r18, 0x09	; 9
    1572:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    1574:	31 97       	sbiw	r30, 0x01	; 1
    1576:	20 e1       	ldi	r18, 0x10	; 16
    1578:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    157e:	31 97       	sbiw	r30, 0x01	; 1
    1580:	22 e1       	ldi	r18, 0x12	; 18
    1582:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	23 e1       	ldi	r18, 0x13	; 19
    1588:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	24 e1       	ldi	r18, 0x14	; 20
    158e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    1590:	31 97       	sbiw	r30, 0x01	; 1
    1592:	25 e1       	ldi	r18, 0x15	; 21
    1594:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	26 e1       	ldi	r18, 0x16	; 22
    159a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	27 e1       	ldi	r18, 0x17	; 23
    15a0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	28 e1       	ldi	r18, 0x18	; 24
    15a6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    15a8:	31 97       	sbiw	r30, 0x01	; 1
    15aa:	29 e1       	ldi	r18, 0x19	; 25
    15ac:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    15ae:	31 97       	sbiw	r30, 0x01	; 1
    15b0:	20 e2       	ldi	r18, 0x20	; 32
    15b2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	21 e2       	ldi	r18, 0x21	; 33
    15b8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	23 e2       	ldi	r18, 0x23	; 35
    15c2:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    15c4:	31 97       	sbiw	r30, 0x01	; 1
    15c6:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    15c8:	31 97       	sbiw	r30, 0x01	; 1
    15ca:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	26 e2       	ldi	r18, 0x26	; 38
    15d0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    15d2:	31 97       	sbiw	r30, 0x01	; 1
    15d4:	27 e2       	ldi	r18, 0x27	; 39
    15d6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	28 e2       	ldi	r18, 0x28	; 40
    15dc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    15de:	31 97       	sbiw	r30, 0x01	; 1
    15e0:	29 e2       	ldi	r18, 0x29	; 41
    15e2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	20 e3       	ldi	r18, 0x30	; 48
    15e8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	21 e3       	ldi	r18, 0x31	; 49
    15ee:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    15f0:	87 97       	sbiw	r24, 0x27	; 39
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	08 95       	ret

000015f8 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    15f8:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    15fa:	e0 e7       	ldi	r30, 0x70	; 112
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	83 81       	ldd	r24, Z+3	; 0x03
    1600:	8a 7f       	andi	r24, 0xFA	; 250
    1602:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f8 e0       	ldi	r31, 0x08	; 8
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	9a ef       	ldi	r25, 0xFA	; 250
    160c:	86 a3       	std	Z+38, r24	; 0x26
    160e:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1614:	a0 ea       	ldi	r26, 0xA0	; 160
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	8c 91       	ld	r24, X
    161c:	12 97       	sbiw	r26, 0x02	; 2
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    1624:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    1626:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1628:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    162c:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1630:	0d 90       	ld	r0, X+
    1632:	0d be       	out	0x3d, r0	; 61
    1634:	0d 90       	ld	r0, X+
    1636:	0e be       	out	0x3e, r0	; 62
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	7f 90       	pop	r7
    166a:	6f 90       	pop	r6
    166c:	5f 90       	pop	r5
    166e:	4f 90       	pop	r4
    1670:	3f 90       	pop	r3
    1672:	2f 90       	pop	r2
    1674:	1f 90       	pop	r1
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    167c:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	08 95       	ret

00001682 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	0f 92       	push	r0
    168a:	1f 92       	push	r1
    168c:	11 24       	eor	r1, r1
    168e:	2f 92       	push	r2
    1690:	3f 92       	push	r3
    1692:	4f 92       	push	r4
    1694:	5f 92       	push	r5
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    16ce:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    16d2:	0d b6       	in	r0, 0x3d	; 61
    16d4:	0d 92       	st	X+, r0
    16d6:	0e b6       	in	r0, 0x3e	; 62
    16d8:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    16da:	5a d6       	rcall	.+3252   	; 0x2390 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    16dc:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    16e0:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    16e4:	0d 90       	ld	r0, X+
    16e6:	0d be       	out	0x3d, r0	; 61
    16e8:	0d 90       	ld	r0, X+
    16ea:	0e be       	out	0x3e, r0	; 62
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	9f 90       	pop	r9
    171a:	8f 90       	pop	r8
    171c:	7f 90       	pop	r7
    171e:	6f 90       	pop	r6
    1720:	5f 90       	pop	r5
    1722:	4f 90       	pop	r4
    1724:	3f 90       	pop	r3
    1726:	2f 90       	pop	r2
    1728:	1f 90       	pop	r1
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1730:	08 95       	ret

00001732 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	0f 92       	push	r0
    173a:	1f 92       	push	r1
    173c:	11 24       	eor	r1, r1
    173e:	2f 92       	push	r2
    1740:	3f 92       	push	r3
    1742:	4f 92       	push	r4
    1744:	5f 92       	push	r5
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ef 93       	push	r30
    1778:	ff 93       	push	r31
    177a:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    177e:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1782:	0d b6       	in	r0, 0x3d	; 61
    1784:	0d 92       	st	X+, r0
    1786:	0e b6       	in	r0, 0x3e	; 62
    1788:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    178a:	97 d4       	rcall	.+2350   	; 0x20ba <xTaskIncrementTick>
    178c:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    178e:	00 d6       	rcall	.+3072   	; 0x2390 <vTaskSwitchContext>
    1790:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
        }
        portRESTORE_CONTEXT();
    1794:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1798:	0d 90       	ld	r0, X+
    179a:	0d be       	out	0x3d, r0	; 61
    179c:	0d 90       	ld	r0, X+
    179e:	0e be       	out	0x3e, r0	; 62
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	5f 90       	pop	r5
    17d6:	4f 90       	pop	r4
    17d8:	3f 90       	pop	r3
    17da:	2f 90       	pop	r2
    17dc:	1f 90       	pop	r1
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	18 95       	reti

000017e6 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
    17ec:	56 d4       	rcall	.+2220   	; 0x209a <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 05 18 	call	0x300a	; 0x300a <malloc>
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    17f4:	ec 01       	movw	r28, r24
    17f6:	34 d5       	rcall	.+2664   	; 0x2260 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    17f8:	ce 01       	movw	r24, r28
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
	if( pv )
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	31 f0       	breq	.+12     	; 0x1814 <vPortFree+0x14>
    1808:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
    180a:	47 d4       	rcall	.+2190   	; 0x209a <vTaskSuspendAll>
		{
			free( pv );
    180c:	ce 01       	movw	r24, r28
    180e:	0e 94 9d 18 	call	0x313a	; 0x313a <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    1812:	26 d5       	rcall	.+2636   	; 0x2260 <xTaskResumeAll>
	}
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <prvCopyDataToQueue>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	14 2f       	mov	r17, r20
    1824:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1826:	41 11       	cpse	r20, r1
    1828:	0b c0       	rjmp	.+22     	; 0x1840 <prvCopyDataToQueue+0x26>
    182a:	88 81       	ld	r24, Y
    182c:	99 81       	ldd	r25, Y+1	; 0x01
    182e:	89 2b       	or	r24, r25
    1830:	09 f0       	breq	.+2      	; 0x1834 <prvCopyDataToQueue+0x1a>
    1832:	44 c0       	rjmp	.+136    	; 0x18bc <prvCopyDataToQueue+0xa2>
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	47 d7       	rcall	.+3726   	; 0x26c8 <xTaskPriorityDisinherit>
    183a:	1a 82       	std	Y+2, r1	; 0x02
    183c:	1b 82       	std	Y+3, r1	; 0x03
    183e:	45 c0       	rjmp	.+138    	; 0x18ca <prvCopyDataToQueue+0xb0>
    1840:	11 11       	cpse	r17, r1
    1842:	17 c0       	rjmp	.+46     	; 0x1872 <prvCopyDataToQueue+0x58>
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	0e 94 26 19 	call	0x324c	; 0x324c <memcpy>
    184e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	82 0f       	add	r24, r18
    1856:	91 1d       	adc	r25, r1
    1858:	8c 83       	std	Y+4, r24	; 0x04
    185a:	9d 83       	std	Y+5, r25	; 0x05
    185c:	2a 81       	ldd	r18, Y+2	; 0x02
    185e:	3b 81       	ldd	r19, Y+3	; 0x03
    1860:	82 17       	cp	r24, r18
    1862:	93 07       	cpc	r25, r19
    1864:	68 f1       	brcs	.+90     	; 0x18c0 <prvCopyDataToQueue+0xa6>
    1866:	88 81       	ld	r24, Y
    1868:	99 81       	ldd	r25, Y+1	; 0x01
    186a:	8c 83       	std	Y+4, r24	; 0x04
    186c:	9d 83       	std	Y+5, r25	; 0x05
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	2c c0       	rjmp	.+88     	; 0x18ca <prvCopyDataToQueue+0xb0>
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	0e 94 26 19 	call	0x324c	; 0x324c <memcpy>
    187c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	91 95       	neg	r25
    1882:	81 95       	neg	r24
    1884:	91 09       	sbc	r25, r1
    1886:	2e 81       	ldd	r18, Y+6	; 0x06
    1888:	3f 81       	ldd	r19, Y+7	; 0x07
    188a:	28 0f       	add	r18, r24
    188c:	39 1f       	adc	r19, r25
    188e:	2e 83       	std	Y+6, r18	; 0x06
    1890:	3f 83       	std	Y+7, r19	; 0x07
    1892:	48 81       	ld	r20, Y
    1894:	59 81       	ldd	r21, Y+1	; 0x01
    1896:	24 17       	cp	r18, r20
    1898:	35 07       	cpc	r19, r21
    189a:	30 f4       	brcc	.+12     	; 0x18a8 <prvCopyDataToQueue+0x8e>
    189c:	2a 81       	ldd	r18, Y+2	; 0x02
    189e:	3b 81       	ldd	r19, Y+3	; 0x03
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	8e 83       	std	Y+6, r24	; 0x06
    18a6:	9f 83       	std	Y+7, r25	; 0x07
    18a8:	12 30       	cpi	r17, 0x02	; 2
    18aa:	61 f4       	brne	.+24     	; 0x18c4 <prvCopyDataToQueue+0xaa>
    18ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ae:	88 23       	and	r24, r24
    18b0:	59 f0       	breq	.+22     	; 0x18c8 <prvCopyDataToQueue+0xae>
    18b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18b4:	81 50       	subi	r24, 0x01	; 1
    18b6:	8a 8f       	std	Y+26, r24	; 0x1a
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <prvCopyDataToQueue+0xb0>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <prvCopyDataToQueue+0xb0>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <prvCopyDataToQueue+0xb0>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <prvCopyDataToQueue+0xb0>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18cc:	9f 5f       	subi	r25, 0xFF	; 255
    18ce:	9a 8f       	std	Y+26, r25	; 0x1a
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	08 95       	ret

000018d8 <prvCopyDataFromQueue>:
    18d8:	fc 01       	movw	r30, r24
    18da:	44 8d       	ldd	r20, Z+28	; 0x1c
    18dc:	44 23       	and	r20, r20
    18de:	a9 f0       	breq	.+42     	; 0x190a <prvCopyDataFromQueue+0x32>
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	26 81       	ldd	r18, Z+6	; 0x06
    18e4:	37 81       	ldd	r19, Z+7	; 0x07
    18e6:	24 0f       	add	r18, r20
    18e8:	35 1f       	adc	r19, r21
    18ea:	26 83       	std	Z+6, r18	; 0x06
    18ec:	37 83       	std	Z+7, r19	; 0x07
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	28 17       	cp	r18, r24
    18f4:	39 07       	cpc	r19, r25
    18f6:	20 f0       	brcs	.+8      	; 0x1900 <prvCopyDataFromQueue+0x28>
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	86 83       	std	Z+6, r24	; 0x06
    18fe:	97 83       	std	Z+7, r25	; 0x07
    1900:	cb 01       	movw	r24, r22
    1902:	66 81       	ldd	r22, Z+6	; 0x06
    1904:	77 81       	ldd	r23, Z+7	; 0x07
    1906:	0c 94 26 19 	jmp	0x324c	; 0x324c <memcpy>
    190a:	08 95       	ret

0000190c <prvUnlockQueue>:
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	0f 92       	push	r0
    191c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191e:	18 16       	cp	r1, r24
    1920:	ac f4       	brge	.+42     	; 0x194c <prvUnlockQueue+0x40>
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	81 11       	cpse	r24, r1
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <prvUnlockQueue+0x26>
    1928:	11 c0       	rjmp	.+34     	; 0x194c <prvUnlockQueue+0x40>
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	81 11       	cpse	r24, r1
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <prvUnlockQueue+0x2c>
    1930:	0d c0       	rjmp	.+26     	; 0x194c <prvUnlockQueue+0x40>
    1932:	8e 01       	movw	r16, r28
    1934:	0f 5e       	subi	r16, 0xEF	; 239
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	c8 01       	movw	r24, r16
    193a:	ce d5       	rcall	.+2972   	; 0x24d8 <xTaskRemoveFromEventList>
    193c:	81 11       	cpse	r24, r1
    193e:	50 d6       	rcall	.+3232   	; 0x25e0 <vTaskMissedYield>
    1940:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1942:	81 50       	subi	r24, 0x01	; 1
    1944:	8e 8f       	std	Y+30, r24	; 0x1e
    1946:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1948:	18 16       	cp	r1, r24
    194a:	7c f3       	brlt	.-34     	; 0x192a <prvUnlockQueue+0x1e>
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	8e 8f       	std	Y+30, r24	; 0x1e
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
    195a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195c:	18 16       	cp	r1, r24
    195e:	ac f4       	brge	.+42     	; 0x198a <prvUnlockQueue+0x7e>
    1960:	88 85       	ldd	r24, Y+8	; 0x08
    1962:	81 11       	cpse	r24, r1
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <prvUnlockQueue+0x64>
    1966:	11 c0       	rjmp	.+34     	; 0x198a <prvUnlockQueue+0x7e>
    1968:	88 85       	ldd	r24, Y+8	; 0x08
    196a:	81 11       	cpse	r24, r1
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <prvUnlockQueue+0x6a>
    196e:	0d c0       	rjmp	.+26     	; 0x198a <prvUnlockQueue+0x7e>
    1970:	8e 01       	movw	r16, r28
    1972:	08 5f       	subi	r16, 0xF8	; 248
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	c8 01       	movw	r24, r16
    1978:	af d5       	rcall	.+2910   	; 0x24d8 <xTaskRemoveFromEventList>
    197a:	81 11       	cpse	r24, r1
    197c:	31 d6       	rcall	.+3170   	; 0x25e0 <vTaskMissedYield>
    197e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1980:	81 50       	subi	r24, 0x01	; 1
    1982:	8d 8f       	std	Y+29, r24	; 0x1d
    1984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1986:	18 16       	cp	r1, r24
    1988:	7c f3       	brlt	.-34     	; 0x1968 <prvUnlockQueue+0x5c>
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	8d 8f       	std	Y+29, r24	; 0x1d
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <xQueueGenericReset>:
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	0f 92       	push	r0
    19a8:	48 81       	ld	r20, Y
    19aa:	59 81       	ldd	r21, Y+1	; 0x01
    19ac:	2c 8d       	ldd	r18, Y+28	; 0x1c
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19b2:	72 9f       	mul	r23, r18
    19b4:	c0 01       	movw	r24, r0
    19b6:	73 9f       	mul	r23, r19
    19b8:	90 0d       	add	r25, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	fa 01       	movw	r30, r20
    19be:	e8 0f       	add	r30, r24
    19c0:	f9 1f       	adc	r31, r25
    19c2:	ea 83       	std	Y+2, r30	; 0x02
    19c4:	fb 83       	std	Y+3, r31	; 0x03
    19c6:	1a 8e       	std	Y+26, r1	; 0x1a
    19c8:	4c 83       	std	Y+4, r20	; 0x04
    19ca:	5d 83       	std	Y+5, r21	; 0x05
    19cc:	82 1b       	sub	r24, r18
    19ce:	93 0b       	sbc	r25, r19
    19d0:	84 0f       	add	r24, r20
    19d2:	95 1f       	adc	r25, r21
    19d4:	8e 83       	std	Y+6, r24	; 0x06
    19d6:	9f 83       	std	Y+7, r25	; 0x07
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	8d 8f       	std	Y+29, r24	; 0x1d
    19dc:	8e 8f       	std	Y+30, r24	; 0x1e
    19de:	61 11       	cpse	r22, r1
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <xQueueGenericReset+0x5a>
    19e2:	88 85       	ldd	r24, Y+8	; 0x08
    19e4:	88 23       	and	r24, r24
    19e6:	69 f0       	breq	.+26     	; 0x1a02 <xQueueGenericReset+0x66>
    19e8:	ce 01       	movw	r24, r28
    19ea:	08 96       	adiw	r24, 0x08	; 8
    19ec:	75 d5       	rcall	.+2794   	; 0x24d8 <xTaskRemoveFromEventList>
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	41 f4       	brne	.+16     	; 0x1a02 <xQueueGenericReset+0x66>
    19f2:	47 de       	rcall	.-882    	; 0x1682 <vPortYield>
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <xQueueGenericReset+0x66>
    19f6:	ce 01       	movw	r24, r28
    19f8:	08 96       	adiw	r24, 0x08	; 8
    19fa:	fd dc       	rcall	.-1542   	; 0x13f6 <vListInitialise>
    19fc:	ce 01       	movw	r24, r28
    19fe:	41 96       	adiw	r24, 0x11	; 17
    1a00:	fa dc       	rcall	.-1548   	; 0x13f6 <vListInitialise>
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <xQueueGenericCreate>:
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	08 2f       	mov	r16, r24
    1a18:	16 2f       	mov	r17, r22
    1a1a:	66 23       	and	r22, r22
    1a1c:	a9 f0       	breq	.+42     	; 0x1a48 <xQueueGenericCreate+0x3a>
    1a1e:	86 9f       	mul	r24, r22
    1a20:	c0 01       	movw	r24, r0
    1a22:	11 24       	eor	r1, r1
    1a24:	80 96       	adiw	r24, 0x20	; 32
    1a26:	df de       	rcall	.-578    	; 0x17e6 <pvPortMalloc>
    1a28:	ec 01       	movw	r28, r24
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	21 f4       	brne	.+8      	; 0x1a36 <xQueueGenericCreate+0x28>
    1a2e:	12 c0       	rjmp	.+36     	; 0x1a54 <xQueueGenericCreate+0x46>
    1a30:	c8 83       	st	Y, r28
    1a32:	d9 83       	std	Y+1, r29	; 0x01
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <xQueueGenericCreate+0x2e>
    1a36:	4f 96       	adiw	r24, 0x1f	; 31
    1a38:	88 83       	st	Y, r24
    1a3a:	99 83       	std	Y+1, r25	; 0x01
    1a3c:	0b 8f       	std	Y+27, r16	; 0x1b
    1a3e:	1c 8f       	std	Y+28, r17	; 0x1c
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	ce 01       	movw	r24, r28
    1a44:	ab df       	rcall	.-170    	; 0x199c <xQueueGenericReset>
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <xQueueGenericCreate+0x46>
    1a48:	8f e1       	ldi	r24, 0x1F	; 31
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	cc de       	rcall	.-616    	; 0x17e6 <pvPortMalloc>
    1a4e:	ec 01       	movw	r28, r24
    1a50:	89 2b       	or	r24, r25
    1a52:	71 f7       	brne	.-36     	; 0x1a30 <xQueueGenericCreate+0x22>
    1a54:	ce 01       	movw	r24, r28
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <xQueueGenericSend>:
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	25 97       	sbiw	r28, 0x05	; 5
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	8c 01       	movw	r16, r24
    1a80:	6b 01       	movw	r12, r22
    1a82:	4c 83       	std	Y+4, r20	; 0x04
    1a84:	5d 83       	std	Y+5, r21	; 0x05
    1a86:	a2 2e       	mov	r10, r18
    1a88:	b1 2c       	mov	r11, r1
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	88 e0       	ldi	r24, 0x08	; 8
    1a8e:	e8 0e       	add	r14, r24
    1a90:	f1 1c       	adc	r15, r1
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	0f 92       	push	r0
    1a98:	f8 01       	movw	r30, r16
    1a9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a9c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a9e:	98 17       	cp	r25, r24
    1aa0:	18 f0       	brcs	.+6      	; 0x1aa8 <xQueueGenericSend+0x48>
    1aa2:	f2 e0       	ldi	r31, 0x02	; 2
    1aa4:	af 12       	cpse	r10, r31
    1aa6:	15 c0       	rjmp	.+42     	; 0x1ad2 <xQueueGenericSend+0x72>
    1aa8:	4a 2d       	mov	r20, r10
    1aaa:	b6 01       	movw	r22, r12
    1aac:	c8 01       	movw	r24, r16
    1aae:	b5 de       	rcall	.-662    	; 0x181a <prvCopyDataToQueue>
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	91 89       	ldd	r25, Z+17	; 0x11
    1ab4:	99 23       	and	r25, r25
    1ab6:	39 f0       	breq	.+14     	; 0x1ac6 <xQueueGenericSend+0x66>
    1ab8:	c8 01       	movw	r24, r16
    1aba:	41 96       	adiw	r24, 0x11	; 17
    1abc:	0d d5       	rcall	.+2586   	; 0x24d8 <xTaskRemoveFromEventList>
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	21 f4       	brne	.+8      	; 0x1aca <xQueueGenericSend+0x6a>
    1ac2:	df dd       	rcall	.-1090   	; 0x1682 <vPortYield>
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <xQueueGenericSend+0x6a>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	dc dd       	rcall	.-1096   	; 0x1682 <vPortYield>
    1aca:	0f 90       	pop	r0
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	46 c0       	rjmp	.+140    	; 0x1b5e <xQueueGenericSend+0xfe>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	89 2b       	or	r24, r25
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <xQueueGenericSend+0x82>
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	3e c0       	rjmp	.+124    	; 0x1b5e <xQueueGenericSend+0xfe>
    1ae2:	b1 10       	cpse	r11, r1
    1ae4:	05 c0       	rjmp	.+10     	; 0x1af0 <xQueueGenericSend+0x90>
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	3e d5       	rcall	.+2684   	; 0x2568 <vTaskSetTimeOutState>
    1aec:	bb 24       	eor	r11, r11
    1aee:	b3 94       	inc	r11
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	d2 d2       	rcall	.+1444   	; 0x209a <vTaskSuspendAll>
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	0f 92       	push	r0
    1afc:	f8 01       	movw	r30, r16
    1afe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b00:	8f 3f       	cpi	r24, 0xFF	; 255
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <xQueueGenericSend+0xa6>
    1b04:	15 8e       	std	Z+29, r1	; 0x1d
    1b06:	f8 01       	movw	r30, r16
    1b08:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <xQueueGenericSend+0xb0>
    1b0e:	16 8e       	std	Z+30, r1	; 0x1e
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	be 01       	movw	r22, r28
    1b16:	6c 5f       	subi	r22, 0xFC	; 252
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	2f d5       	rcall	.+2654   	; 0x257e <xTaskCheckForTimeOut>
    1b20:	81 11       	cpse	r24, r1
    1b22:	19 c0       	rjmp	.+50     	; 0x1b56 <xQueueGenericSend+0xf6>
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	0f 92       	push	r0
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b34:	98 13       	cpse	r25, r24
    1b36:	0b c0       	rjmp	.+22     	; 0x1b4e <xQueueGenericSend+0xee>
    1b38:	6c 81       	ldd	r22, Y+4	; 0x04
    1b3a:	7d 81       	ldd	r23, Y+5	; 0x05
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	95 d4       	rcall	.+2346   	; 0x246a <vTaskPlaceOnEventList>
    1b40:	c8 01       	movw	r24, r16
    1b42:	e4 de       	rcall	.-568    	; 0x190c <prvUnlockQueue>
    1b44:	8d d3       	rcall	.+1818   	; 0x2260 <xTaskResumeAll>
    1b46:	81 11       	cpse	r24, r1
    1b48:	a4 cf       	rjmp	.-184    	; 0x1a92 <xQueueGenericSend+0x32>
    1b4a:	9b dd       	rcall	.-1226   	; 0x1682 <vPortYield>
    1b4c:	a2 cf       	rjmp	.-188    	; 0x1a92 <xQueueGenericSend+0x32>
    1b4e:	c8 01       	movw	r24, r16
    1b50:	dd de       	rcall	.-582    	; 0x190c <prvUnlockQueue>
    1b52:	86 d3       	rcall	.+1804   	; 0x2260 <xTaskResumeAll>
    1b54:	9e cf       	rjmp	.-196    	; 0x1a92 <xQueueGenericSend+0x32>
    1b56:	c8 01       	movw	r24, r16
    1b58:	d9 de       	rcall	.-590    	; 0x190c <prvUnlockQueue>
    1b5a:	82 d3       	rcall	.+1796   	; 0x2260 <xTaskResumeAll>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	25 96       	adiw	r28, 0x05	; 5
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	df 90       	pop	r13
    1b72:	cf 90       	pop	r12
    1b74:	bf 90       	pop	r11
    1b76:	af 90       	pop	r10
    1b78:	08 95       	ret

00001b7a <xQueueCreateMutex>:
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	8f e1       	ldi	r24, 0x1F	; 31
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	31 de       	rcall	.-926    	; 0x17e6 <pvPortMalloc>
    1b84:	ec 01       	movw	r28, r24
    1b86:	89 2b       	or	r24, r25
    1b88:	e1 f0       	breq	.+56     	; 0x1bc2 <xQueueCreateMutex+0x48>
    1b8a:	1a 82       	std	Y+2, r1	; 0x02
    1b8c:	1b 82       	std	Y+3, r1	; 0x03
    1b8e:	18 82       	st	Y, r1
    1b90:	19 82       	std	Y+1, r1	; 0x01
    1b92:	1c 82       	std	Y+4, r1	; 0x04
    1b94:	1d 82       	std	Y+5, r1	; 0x05
    1b96:	1e 82       	std	Y+6, r1	; 0x06
    1b98:	1f 82       	std	Y+7, r1	; 0x07
    1b9a:	1a 8e       	std	Y+26, r1	; 0x1a
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	8b 8f       	std	Y+27, r24	; 0x1b
    1ba0:	1c 8e       	std	Y+28, r1	; 0x1c
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ba8:	ce 01       	movw	r24, r28
    1baa:	08 96       	adiw	r24, 0x08	; 8
    1bac:	24 dc       	rcall	.-1976   	; 0x13f6 <vListInitialise>
    1bae:	ce 01       	movw	r24, r28
    1bb0:	41 96       	adiw	r24, 0x11	; 17
    1bb2:	21 dc       	rcall	.-1982   	; 0x13f6 <vListInitialise>
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	4f df       	rcall	.-354    	; 0x1a60 <xQueueGenericSend>
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <xQueueGenericSendFromISR>:
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	fa 01       	movw	r30, r20
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	5a 96       	adiw	r26, 0x1a	; 26
    1bd8:	5c 91       	ld	r21, X
    1bda:	5a 97       	sbiw	r26, 0x1a	; 26
    1bdc:	5b 96       	adiw	r26, 0x1b	; 27
    1bde:	3c 91       	ld	r19, X
    1be0:	53 17       	cp	r21, r19
    1be2:	10 f0       	brcs	.+4      	; 0x1be8 <xQueueGenericSendFromISR+0x1e>
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	d9 f4       	brne	.+54     	; 0x1c1e <xQueueGenericSendFromISR+0x54>
    1be8:	42 2f       	mov	r20, r18
    1bea:	8f 01       	movw	r16, r30
    1bec:	ec 01       	movw	r28, r24
    1bee:	15 de       	rcall	.-982    	; 0x181a <prvCopyDataToQueue>
    1bf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf4:	79 f4       	brne	.+30     	; 0x1c14 <xQueueGenericSendFromISR+0x4a>
    1bf6:	89 89       	ldd	r24, Y+17	; 0x11
    1bf8:	88 23       	and	r24, r24
    1bfa:	99 f0       	breq	.+38     	; 0x1c22 <xQueueGenericSendFromISR+0x58>
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	41 96       	adiw	r24, 0x11	; 17
    1c00:	6b d4       	rcall	.+2262   	; 0x24d8 <xTaskRemoveFromEventList>
    1c02:	88 23       	and	r24, r24
    1c04:	81 f0       	breq	.+32     	; 0x1c26 <xQueueGenericSendFromISR+0x5c>
    1c06:	01 15       	cp	r16, r1
    1c08:	11 05       	cpc	r17, r1
    1c0a:	79 f0       	breq	.+30     	; 0x1c2a <xQueueGenericSendFromISR+0x60>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	f8 01       	movw	r30, r16
    1c10:	80 83       	st	Z, r24
    1c12:	0c c0       	rjmp	.+24     	; 0x1c2c <xQueueGenericSendFromISR+0x62>
    1c14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c16:	8f 5f       	subi	r24, 0xFF	; 255
    1c18:	8e 8f       	std	Y+30, r24	; 0x1e
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <xQueueGenericSendFromISR+0x62>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <xQueueGenericSendFromISR+0x62>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <xQueueGenericSendFromISR+0x62>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <xQueueGenericSendFromISR+0x62>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <xQueueGenericReceive>:
    1c36:	af 92       	push	r10
    1c38:	bf 92       	push	r11
    1c3a:	cf 92       	push	r12
    1c3c:	df 92       	push	r13
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	25 97       	sbiw	r28, 0x05	; 5
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	8c 01       	movw	r16, r24
    1c56:	6b 01       	movw	r12, r22
    1c58:	4c 83       	std	Y+4, r20	; 0x04
    1c5a:	5d 83       	std	Y+5, r21	; 0x05
    1c5c:	a2 2e       	mov	r10, r18
    1c5e:	b1 2c       	mov	r11, r1
    1c60:	7c 01       	movw	r14, r24
    1c62:	81 e1       	ldi	r24, 0x11	; 17
    1c64:	e8 0e       	add	r14, r24
    1c66:	f1 1c       	adc	r15, r1
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	0f 92       	push	r0
    1c6e:	f8 01       	movw	r30, r16
    1c70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c72:	88 23       	and	r24, r24
    1c74:	69 f1       	breq	.+90     	; 0x1cd0 <xQueueGenericReceive+0x9a>
    1c76:	e6 80       	ldd	r14, Z+6	; 0x06
    1c78:	f7 80       	ldd	r15, Z+7	; 0x07
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	2c de       	rcall	.-936    	; 0x18d8 <prvCopyDataFromQueue>
    1c80:	a1 10       	cpse	r10, r1
    1c82:	17 c0       	rjmp	.+46     	; 0x1cb2 <xQueueGenericReceive+0x7c>
    1c84:	f8 01       	movw	r30, r16
    1c86:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c88:	81 50       	subi	r24, 0x01	; 1
    1c8a:	82 8f       	std	Z+26, r24	; 0x1a
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	89 2b       	or	r24, r25
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <xQueueGenericReceive+0x66>
    1c94:	59 d5       	rcall	.+2738   	; 0x2748 <pvTaskIncrementMutexHeldCount>
    1c96:	f8 01       	movw	r30, r16
    1c98:	82 83       	std	Z+2, r24	; 0x02
    1c9a:	93 83       	std	Z+3, r25	; 0x03
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ca0:	88 23       	and	r24, r24
    1ca2:	91 f0       	breq	.+36     	; 0x1cc8 <xQueueGenericReceive+0x92>
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	08 96       	adiw	r24, 0x08	; 8
    1ca8:	17 d4       	rcall	.+2094   	; 0x24d8 <xTaskRemoveFromEventList>
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	69 f4       	brne	.+26     	; 0x1cc8 <xQueueGenericReceive+0x92>
    1cae:	e9 dc       	rcall	.-1582   	; 0x1682 <vPortYield>
    1cb0:	0b c0       	rjmp	.+22     	; 0x1cc8 <xQueueGenericReceive+0x92>
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	e6 82       	std	Z+6, r14	; 0x06
    1cb6:	f7 82       	std	Z+7, r15	; 0x07
    1cb8:	81 89       	ldd	r24, Z+17	; 0x11
    1cba:	88 23       	and	r24, r24
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8 <xQueueGenericReceive+0x92>
    1cbe:	c8 01       	movw	r24, r16
    1cc0:	41 96       	adiw	r24, 0x11	; 17
    1cc2:	0a d4       	rcall	.+2068   	; 0x24d8 <xTaskRemoveFromEventList>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	dd dc       	rcall	.-1606   	; 0x1682 <vPortYield>
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	51 c0       	rjmp	.+162    	; 0x1d72 <xQueueGenericReceive+0x13c>
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	89 2b       	or	r24, r25
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <xQueueGenericReceive+0xaa>
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	49 c0       	rjmp	.+146    	; 0x1d72 <xQueueGenericReceive+0x13c>
    1ce0:	b1 10       	cpse	r11, r1
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <xQueueGenericReceive+0xb8>
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	3f d4       	rcall	.+2174   	; 0x2568 <vTaskSetTimeOutState>
    1cea:	bb 24       	eor	r11, r11
    1cec:	b3 94       	inc	r11
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	d3 d1       	rcall	.+934    	; 0x209a <vTaskSuspendAll>
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	0f 92       	push	r0
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <xQueueGenericReceive+0xce>
    1d02:	15 8e       	std	Z+29, r1	; 0x1d
    1d04:	f8 01       	movw	r30, r16
    1d06:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d08:	8f 3f       	cpi	r24, 0xFF	; 255
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <xQueueGenericReceive+0xd8>
    1d0c:	16 8e       	std	Z+30, r1	; 0x1e
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	be 01       	movw	r22, r28
    1d14:	6c 5f       	subi	r22, 0xFC	; 252
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	30 d4       	rcall	.+2144   	; 0x257e <xTaskCheckForTimeOut>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	24 c0       	rjmp	.+72     	; 0x1d6a <xQueueGenericReceive+0x134>
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	0f 92       	push	r0
    1d28:	f8 01       	movw	r30, r16
    1d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d2c:	0f 90       	pop	r0
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	81 11       	cpse	r24, r1
    1d32:	17 c0       	rjmp	.+46     	; 0x1d62 <xQueueGenericReceive+0x12c>
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	89 2b       	or	r24, r25
    1d3a:	41 f4       	brne	.+16     	; 0x1d4c <xQueueGenericReceive+0x116>
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	0f 92       	push	r0
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	5e d4       	rcall	.+2236   	; 0x2604 <vTaskPriorityInherit>
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	6c 81       	ldd	r22, Y+4	; 0x04
    1d4e:	7d 81       	ldd	r23, Y+5	; 0x05
    1d50:	c7 01       	movw	r24, r14
    1d52:	8b d3       	rcall	.+1814   	; 0x246a <vTaskPlaceOnEventList>
    1d54:	c8 01       	movw	r24, r16
    1d56:	da dd       	rcall	.-1100   	; 0x190c <prvUnlockQueue>
    1d58:	83 d2       	rcall	.+1286   	; 0x2260 <xTaskResumeAll>
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	85 cf       	rjmp	.-246    	; 0x1c68 <xQueueGenericReceive+0x32>
    1d5e:	91 dc       	rcall	.-1758   	; 0x1682 <vPortYield>
    1d60:	83 cf       	rjmp	.-250    	; 0x1c68 <xQueueGenericReceive+0x32>
    1d62:	c8 01       	movw	r24, r16
    1d64:	d3 dd       	rcall	.-1114   	; 0x190c <prvUnlockQueue>
    1d66:	7c d2       	rcall	.+1272   	; 0x2260 <xTaskResumeAll>
    1d68:	7f cf       	rjmp	.-258    	; 0x1c68 <xQueueGenericReceive+0x32>
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	cf dd       	rcall	.-1122   	; 0x190c <prvUnlockQueue>
    1d6e:	78 d2       	rcall	.+1264   	; 0x2260 <xTaskResumeAll>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	25 96       	adiw	r28, 0x05	; 5
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	08 95       	ret

00001d8e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	0f 92       	push	r0
    1d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <vQueueWaitForMessageRestricted+0x14>
    1da0:	1d 8e       	std	Y+29, r1	; 0x1d
    1da2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1da4:	8f 3f       	cpi	r24, 0xFF	; 255
    1da6:	09 f4       	brne	.+2      	; 0x1daa <vQueueWaitForMessageRestricted+0x1c>
    1da8:	1e 8e       	std	Y+30, r1	; 0x1e
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1dae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1db0:	81 11       	cpse	r24, r1
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <vQueueWaitForMessageRestricted+0x2c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1db4:	ce 01       	movw	r24, r28
    1db6:	41 96       	adiw	r24, 0x11	; 17
    1db8:	73 d3       	rcall	.+1766   	; 0x24a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1dba:	ce 01       	movw	r24, r28
    1dbc:	a7 dd       	rcall	.-1202   	; 0x190c <prvUnlockQueue>
	}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <prvIdleTask>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1dc4:	cd e4       	ldi	r28, 0x4D	; 77
    1dc6:	d3 e2       	ldi	r29, 0x23	; 35
    1dc8:	88 81       	ld	r24, Y
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	f0 f3       	brcs	.-4      	; 0x1dca <prvIdleTask+0x6>
    1dce:	59 dc       	rcall	.-1870   	; 0x1682 <vPortYield>
    1dd0:	fb cf       	rjmp	.-10     	; 0x1dc8 <prvIdleTask+0x4>

00001dd2 <prvAddCurrentTaskToDelayedList>:
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    1ddc:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1de0:	82 83       	std	Z+2, r24	; 0x02
    1de2:	93 83       	std	Z+3, r25	; 0x03
    1de4:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <xTickCount>
    1de8:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <xTickCount+0x1>
    1dec:	c8 17       	cp	r28, r24
    1dee:	d9 07       	cpc	r29, r25
    1df0:	60 f4       	brcc	.+24     	; 0x1e0a <prvAddCurrentTaskToDelayedList+0x38>
    1df2:	60 91 7a 23 	lds	r22, 0x237A	; 0x80237a <pxCurrentTCB>
    1df6:	70 91 7b 23 	lds	r23, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1dfa:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <pxOverflowDelayedTaskList>
    1dfe:	90 91 38 23 	lds	r25, 0x2338	; 0x802338 <pxOverflowDelayedTaskList+0x1>
    1e02:	6e 5f       	subi	r22, 0xFE	; 254
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	2a db       	rcall	.-2476   	; 0x145c <vListInsert>
    1e08:	16 c0       	rjmp	.+44     	; 0x1e36 <prvAddCurrentTaskToDelayedList+0x64>
    1e0a:	60 91 7a 23 	lds	r22, 0x237A	; 0x80237a <pxCurrentTCB>
    1e0e:	70 91 7b 23 	lds	r23, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1e12:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <pxDelayedTaskList>
    1e16:	90 91 3a 23 	lds	r25, 0x233A	; 0x80233a <pxDelayedTaskList+0x1>
    1e1a:	6e 5f       	subi	r22, 0xFE	; 254
    1e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1e:	1e db       	rcall	.-2500   	; 0x145c <vListInsert>
    1e20:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <xNextTaskUnblockTime>
    1e24:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <xNextTaskUnblockTime+0x1>
    1e28:	c8 17       	cp	r28, r24
    1e2a:	d9 07       	cpc	r29, r25
    1e2c:	20 f4       	brcc	.+8      	; 0x1e36 <prvAddCurrentTaskToDelayedList+0x64>
    1e2e:	c0 93 0d 20 	sts	0x200D, r28	; 0x80200d <xNextTaskUnblockTime>
    1e32:	d0 93 0e 20 	sts	0x200E, r29	; 0x80200e <xNextTaskUnblockTime+0x1>
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <xTaskGenericCreate>:
    1e3c:	4f 92       	push	r4
    1e3e:	5f 92       	push	r5
    1e40:	6f 92       	push	r6
    1e42:	7f 92       	push	r7
    1e44:	8f 92       	push	r8
    1e46:	9f 92       	push	r9
    1e48:	af 92       	push	r10
    1e4a:	bf 92       	push	r11
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	4c 01       	movw	r8, r24
    1e5e:	eb 01       	movw	r28, r22
    1e60:	5a 01       	movw	r10, r20
    1e62:	29 01       	movw	r4, r18
    1e64:	c1 14       	cp	r12, r1
    1e66:	d1 04       	cpc	r13, r1
    1e68:	31 f4       	brne	.+12     	; 0x1e76 <xTaskGenericCreate+0x3a>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	bc dc       	rcall	.-1672   	; 0x17e6 <pvPortMalloc>
    1e6e:	6c 01       	movw	r12, r24
    1e70:	89 2b       	or	r24, r25
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <xTaskGenericCreate+0x3a>
    1e74:	d4 c0       	rjmp	.+424    	; 0x201e <xTaskGenericCreate+0x1e2>
    1e76:	88 e2       	ldi	r24, 0x28	; 40
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	b5 dc       	rcall	.-1686   	; 0x17e6 <pvPortMalloc>
    1e7c:	3c 01       	movw	r6, r24
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	79 f0       	breq	.+30     	; 0x1ea0 <xTaskGenericCreate+0x64>
    1e82:	fc 01       	movw	r30, r24
    1e84:	c7 8a       	std	Z+23, r12	; 0x17
    1e86:	d0 8e       	std	Z+24, r13	; 0x18
    1e88:	f1 e0       	ldi	r31, 0x01	; 1
    1e8a:	af 1a       	sub	r10, r31
    1e8c:	b1 08       	sbc	r11, r1
    1e8e:	ca 0c       	add	r12, r10
    1e90:	db 1c       	adc	r13, r11
    1e92:	88 81       	ld	r24, Y
    1e94:	f3 01       	movw	r30, r6
    1e96:	81 8f       	std	Z+25, r24	; 0x19
    1e98:	88 81       	ld	r24, Y
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <xTaskGenericCreate+0x6a>
    1e9e:	13 c0       	rjmp	.+38     	; 0x1ec6 <xTaskGenericCreate+0x8a>
    1ea0:	c6 01       	movw	r24, r12
    1ea2:	ae dc       	rcall	.-1700   	; 0x1800 <vPortFree>
    1ea4:	bc c0       	rjmp	.+376    	; 0x201e <xTaskGenericCreate+0x1e2>
    1ea6:	d3 01       	movw	r26, r6
    1ea8:	5a 96       	adiw	r26, 0x1a	; 26
    1eaa:	fe 01       	movw	r30, r28
    1eac:	31 96       	adiw	r30, 0x01	; 1
    1eae:	9e 01       	movw	r18, r28
    1eb0:	28 5f       	subi	r18, 0xF8	; 248
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	ef 01       	movw	r28, r30
    1eb6:	81 91       	ld	r24, Z+
    1eb8:	8d 93       	st	X+, r24
    1eba:	88 81       	ld	r24, Y
    1ebc:	88 23       	and	r24, r24
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <xTaskGenericCreate+0x8a>
    1ec0:	2e 17       	cp	r18, r30
    1ec2:	3f 07       	cpc	r19, r31
    1ec4:	b9 f7       	brne	.-18     	; 0x1eb4 <xTaskGenericCreate+0x78>
    1ec6:	f3 01       	movw	r30, r6
    1ec8:	10 a2       	std	Z+32, r1	; 0x20
    1eca:	10 2f       	mov	r17, r16
    1ecc:	05 30       	cpi	r16, 0x05	; 5
    1ece:	08 f0       	brcs	.+2      	; 0x1ed2 <xTaskGenericCreate+0x96>
    1ed0:	14 e0       	ldi	r17, 0x04	; 4
    1ed2:	f3 01       	movw	r30, r6
    1ed4:	16 8b       	std	Z+22, r17	; 0x16
    1ed6:	11 a3       	std	Z+33, r17	; 0x21
    1ed8:	12 a2       	std	Z+34, r1	; 0x22
    1eda:	e3 01       	movw	r28, r6
    1edc:	22 96       	adiw	r28, 0x02	; 2
    1ede:	ce 01       	movw	r24, r28
    1ee0:	98 da       	rcall	.-2768   	; 0x1412 <vListInitialiseItem>
    1ee2:	c3 01       	movw	r24, r6
    1ee4:	0c 96       	adiw	r24, 0x0c	; 12
    1ee6:	95 da       	rcall	.-2774   	; 0x1412 <vListInitialiseItem>
    1ee8:	f3 01       	movw	r30, r6
    1eea:	60 86       	std	Z+8, r6	; 0x08
    1eec:	71 86       	std	Z+9, r7	; 0x09
    1eee:	85 e0       	ldi	r24, 0x05	; 5
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	81 1b       	sub	r24, r17
    1ef4:	91 09       	sbc	r25, r1
    1ef6:	84 87       	std	Z+12, r24	; 0x0c
    1ef8:	95 87       	std	Z+13, r25	; 0x0d
    1efa:	62 8a       	std	Z+18, r6	; 0x12
    1efc:	73 8a       	std	Z+19, r7	; 0x13
    1efe:	13 a2       	std	Z+35, r1	; 0x23
    1f00:	14 a2       	std	Z+36, r1	; 0x24
    1f02:	15 a2       	std	Z+37, r1	; 0x25
    1f04:	16 a2       	std	Z+38, r1	; 0x26
    1f06:	17 a2       	std	Z+39, r1	; 0x27
    1f08:	a2 01       	movw	r20, r4
    1f0a:	b4 01       	movw	r22, r8
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	fd da       	rcall	.-2566   	; 0x150a <pxPortInitialiseStack>
    1f10:	f3 01       	movw	r30, r6
    1f12:	80 83       	st	Z, r24
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	e1 14       	cp	r14, r1
    1f18:	f1 04       	cpc	r15, r1
    1f1a:	19 f0       	breq	.+6      	; 0x1f22 <xTaskGenericCreate+0xe6>
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	60 82       	st	Z, r6
    1f20:	71 82       	std	Z+1, r7	; 0x01
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	0f 92       	push	r0
    1f28:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <uxCurrentNumberOfTasks>
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	80 93 2d 23 	sts	0x232D, r24	; 0x80232d <uxCurrentNumberOfTasks>
    1f32:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <pxCurrentTCB>
    1f36:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1f3a:	89 2b       	or	r24, r25
    1f3c:	91 f5       	brne	.+100    	; 0x1fa2 <xTaskGenericCreate+0x166>
    1f3e:	60 92 7a 23 	sts	0x237A, r6	; 0x80237a <pxCurrentTCB>
    1f42:	70 92 7b 23 	sts	0x237B, r7	; 0x80237b <pxCurrentTCB+0x1>
    1f46:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <uxCurrentNumberOfTasks>
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	c9 f5       	brne	.+114    	; 0x1fc0 <xTaskGenericCreate+0x184>
    1f4e:	0f 2e       	mov	r0, r31
    1f50:	fd e4       	ldi	r31, 0x4D	; 77
    1f52:	ef 2e       	mov	r14, r31
    1f54:	f3 e2       	ldi	r31, 0x23	; 35
    1f56:	ff 2e       	mov	r15, r31
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	0f 2e       	mov	r0, r31
    1f5c:	fa e7       	ldi	r31, 0x7A	; 122
    1f5e:	cf 2e       	mov	r12, r31
    1f60:	f3 e2       	ldi	r31, 0x23	; 35
    1f62:	df 2e       	mov	r13, r31
    1f64:	f0 2d       	mov	r31, r0
    1f66:	c7 01       	movw	r24, r14
    1f68:	46 da       	rcall	.-2932   	; 0x13f6 <vListInitialise>
    1f6a:	f9 e0       	ldi	r31, 0x09	; 9
    1f6c:	ef 0e       	add	r14, r31
    1f6e:	f1 1c       	adc	r15, r1
    1f70:	ec 14       	cp	r14, r12
    1f72:	fd 04       	cpc	r15, r13
    1f74:	c1 f7       	brne	.-16     	; 0x1f66 <xTaskGenericCreate+0x12a>
    1f76:	84 e4       	ldi	r24, 0x44	; 68
    1f78:	93 e2       	ldi	r25, 0x23	; 35
    1f7a:	3d da       	rcall	.-2950   	; 0x13f6 <vListInitialise>
    1f7c:	8b e3       	ldi	r24, 0x3B	; 59
    1f7e:	93 e2       	ldi	r25, 0x23	; 35
    1f80:	3a da       	rcall	.-2956   	; 0x13f6 <vListInitialise>
    1f82:	8e e2       	ldi	r24, 0x2E	; 46
    1f84:	93 e2       	ldi	r25, 0x23	; 35
    1f86:	37 da       	rcall	.-2962   	; 0x13f6 <vListInitialise>
    1f88:	84 e4       	ldi	r24, 0x44	; 68
    1f8a:	93 e2       	ldi	r25, 0x23	; 35
    1f8c:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <pxDelayedTaskList>
    1f90:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <pxDelayedTaskList+0x1>
    1f94:	8b e3       	ldi	r24, 0x3B	; 59
    1f96:	93 e2       	ldi	r25, 0x23	; 35
    1f98:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <pxOverflowDelayedTaskList>
    1f9c:	90 93 38 23 	sts	0x2338, r25	; 0x802338 <pxOverflowDelayedTaskList+0x1>
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <xTaskGenericCreate+0x184>
    1fa2:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <xSchedulerRunning>
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	0b c0       	rjmp	.+22     	; 0x1fc0 <xTaskGenericCreate+0x184>
    1faa:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    1fae:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    1fb2:	86 89       	ldd	r24, Z+22	; 0x16
    1fb4:	08 17       	cp	r16, r24
    1fb6:	20 f0       	brcs	.+8      	; 0x1fc0 <xTaskGenericCreate+0x184>
    1fb8:	60 92 7a 23 	sts	0x237A, r6	; 0x80237a <pxCurrentTCB>
    1fbc:	70 92 7b 23 	sts	0x237B, r7	; 0x80237b <pxCurrentTCB+0x1>
    1fc0:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <uxTaskNumber>
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	80 93 25 23 	sts	0x2325, r24	; 0x802325 <uxTaskNumber>
    1fca:	f3 01       	movw	r30, r6
    1fcc:	86 89       	ldd	r24, Z+22	; 0x16
    1fce:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <uxTopReadyPriority>
    1fd2:	98 17       	cp	r25, r24
    1fd4:	10 f4       	brcc	.+4      	; 0x1fda <xTaskGenericCreate+0x19e>
    1fd6:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9c 01       	movw	r18, r24
    1fde:	22 0f       	add	r18, r18
    1fe0:	33 1f       	adc	r19, r19
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	22 0f       	add	r18, r18
    1fe8:	33 1f       	adc	r19, r19
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
    1fee:	be 01       	movw	r22, r28
    1ff0:	83 5b       	subi	r24, 0xB3	; 179
    1ff2:	9c 4d       	sbci	r25, 0xDC	; 220
    1ff4:	12 da       	rcall	.-3036   	; 0x141a <vListInsertEnd>
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <xSchedulerRunning>
    1ffe:	88 23       	and	r24, r24
    2000:	51 f0       	breq	.+20     	; 0x2016 <xTaskGenericCreate+0x1da>
    2002:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    2006:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    200a:	86 89       	ldd	r24, Z+22	; 0x16
    200c:	80 17       	cp	r24, r16
    200e:	28 f4       	brcc	.+10     	; 0x201a <xTaskGenericCreate+0x1de>
    2010:	38 db       	rcall	.-2448   	; 0x1682 <vPortYield>
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <xTaskGenericCreate+0x1e4>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <xTaskGenericCreate+0x1e4>
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <xTaskGenericCreate+0x1e4>
    201e:	8f ef       	ldi	r24, 0xFF	; 255
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	df 90       	pop	r13
    202e:	cf 90       	pop	r12
    2030:	bf 90       	pop	r11
    2032:	af 90       	pop	r10
    2034:	9f 90       	pop	r9
    2036:	8f 90       	pop	r8
    2038:	7f 90       	pop	r7
    203a:	6f 90       	pop	r6
    203c:	5f 90       	pop	r5
    203e:	4f 90       	pop	r4
    2040:	08 95       	ret

00002042 <vTaskStartScheduler>:
    2042:	af 92       	push	r10
    2044:	bf 92       	push	r11
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	a1 2c       	mov	r10, r1
    2052:	b1 2c       	mov	r11, r1
    2054:	c1 2c       	mov	r12, r1
    2056:	d1 2c       	mov	r13, r1
    2058:	e1 2c       	mov	r14, r1
    205a:	f1 2c       	mov	r15, r1
    205c:	00 e0       	ldi	r16, 0x00	; 0
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	45 e5       	ldi	r20, 0x55	; 85
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	6f e0       	ldi	r22, 0x0F	; 15
    2068:	70 e2       	ldi	r23, 0x20	; 32
    206a:	82 ee       	ldi	r24, 0xE2	; 226
    206c:	9e e0       	ldi	r25, 0x0E	; 14
    206e:	e6 de       	rcall	.-564    	; 0x1e3c <xTaskGenericCreate>
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	59 f4       	brne	.+22     	; 0x208a <vTaskStartScheduler+0x48>
    2074:	d2 d3       	rcall	.+1956   	; 0x281a <xTimerCreateTimerTask>
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	41 f4       	brne	.+16     	; 0x208a <vTaskStartScheduler+0x48>
    207a:	f8 94       	cli
    207c:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <xSchedulerRunning>
    2080:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <xTickCount>
    2084:	10 92 2c 23 	sts	0x232C, r1	; 0x80232c <xTickCount+0x1>
    2088:	b7 da       	rcall	.-2706   	; 0x15f8 <xPortStartScheduler>
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	df 90       	pop	r13
    2092:	cf 90       	pop	r12
    2094:	bf 90       	pop	r11
    2096:	af 90       	pop	r10
    2098:	08 95       	ret

0000209a <vTaskSuspendAll>:
    209a:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <uxSchedulerSuspended>
    20a4:	08 95       	ret

000020a6 <xTaskGetTickCount>:
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	0f 92       	push	r0
    20ac:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <xTickCount>
    20b0:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <xTickCount+0x1>
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	08 95       	ret

000020ba <xTaskIncrementTick>:
    20ba:	df 92       	push	r13
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    20cc:	81 11       	cpse	r24, r1
    20ce:	b3 c0       	rjmp	.+358    	; 0x2236 <xTaskIncrementTick+0x17c>
    20d0:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <xTickCount>
    20d4:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <xTickCount+0x1>
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <xTickCount>
    20de:	90 93 2c 23 	sts	0x232C, r25	; 0x80232c <xTickCount+0x1>
    20e2:	e0 90 2b 23 	lds	r14, 0x232B	; 0x80232b <xTickCount>
    20e6:	f0 90 2c 23 	lds	r15, 0x232C	; 0x80232c <xTickCount+0x1>
    20ea:	e1 14       	cp	r14, r1
    20ec:	f1 04       	cpc	r15, r1
    20ee:	99 f5       	brne	.+102    	; 0x2156 <xTaskIncrementTick+0x9c>
    20f0:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <pxDelayedTaskList>
    20f4:	90 91 3a 23 	lds	r25, 0x233A	; 0x80233a <pxDelayedTaskList+0x1>
    20f8:	20 91 37 23 	lds	r18, 0x2337	; 0x802337 <pxOverflowDelayedTaskList>
    20fc:	30 91 38 23 	lds	r19, 0x2338	; 0x802338 <pxOverflowDelayedTaskList+0x1>
    2100:	20 93 39 23 	sts	0x2339, r18	; 0x802339 <pxDelayedTaskList>
    2104:	30 93 3a 23 	sts	0x233A, r19	; 0x80233a <pxDelayedTaskList+0x1>
    2108:	80 93 37 23 	sts	0x2337, r24	; 0x802337 <pxOverflowDelayedTaskList>
    210c:	90 93 38 23 	sts	0x2338, r25	; 0x802338 <pxOverflowDelayedTaskList+0x1>
    2110:	80 91 26 23 	lds	r24, 0x2326	; 0x802326 <xNumOfOverflows>
    2114:	8f 5f       	subi	r24, 0xFF	; 255
    2116:	80 93 26 23 	sts	0x2326, r24	; 0x802326 <xNumOfOverflows>
    211a:	e0 91 39 23 	lds	r30, 0x2339	; 0x802339 <pxDelayedTaskList>
    211e:	f0 91 3a 23 	lds	r31, 0x233A	; 0x80233a <pxDelayedTaskList+0x1>
    2122:	80 81       	ld	r24, Z
    2124:	81 11       	cpse	r24, r1
    2126:	07 c0       	rjmp	.+14     	; 0x2136 <xTaskIncrementTick+0x7c>
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	9f ef       	ldi	r25, 0xFF	; 255
    212c:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    2130:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    2134:	10 c0       	rjmp	.+32     	; 0x2156 <xTaskIncrementTick+0x9c>
    2136:	e0 91 39 23 	lds	r30, 0x2339	; 0x802339 <pxDelayedTaskList>
    213a:	f0 91 3a 23 	lds	r31, 0x233A	; 0x80233a <pxDelayedTaskList+0x1>
    213e:	05 80       	ldd	r0, Z+5	; 0x05
    2140:	f6 81       	ldd	r31, Z+6	; 0x06
    2142:	e0 2d       	mov	r30, r0
    2144:	06 80       	ldd	r0, Z+6	; 0x06
    2146:	f7 81       	ldd	r31, Z+7	; 0x07
    2148:	e0 2d       	mov	r30, r0
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    2152:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    2156:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <xNextTaskUnblockTime>
    215a:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <xNextTaskUnblockTime+0x1>
    215e:	e8 16       	cp	r14, r24
    2160:	f9 06       	cpc	r15, r25
    2162:	10 f4       	brcc	.+4      	; 0x2168 <xTaskIncrementTick+0xae>
    2164:	d1 2c       	mov	r13, r1
    2166:	4f c0       	rjmp	.+158    	; 0x2206 <xTaskIncrementTick+0x14c>
    2168:	d1 2c       	mov	r13, r1
    216a:	e0 91 39 23 	lds	r30, 0x2339	; 0x802339 <pxDelayedTaskList>
    216e:	f0 91 3a 23 	lds	r31, 0x233A	; 0x80233a <pxDelayedTaskList+0x1>
    2172:	80 81       	ld	r24, Z
    2174:	81 11       	cpse	r24, r1
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <xTaskIncrementTick+0xcc>
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	9f ef       	ldi	r25, 0xFF	; 255
    217c:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    2180:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    2184:	40 c0       	rjmp	.+128    	; 0x2206 <xTaskIncrementTick+0x14c>
    2186:	e0 91 39 23 	lds	r30, 0x2339	; 0x802339 <pxDelayedTaskList>
    218a:	f0 91 3a 23 	lds	r31, 0x233A	; 0x80233a <pxDelayedTaskList+0x1>
    218e:	05 80       	ldd	r0, Z+5	; 0x05
    2190:	f6 81       	ldd	r31, Z+6	; 0x06
    2192:	e0 2d       	mov	r30, r0
    2194:	c6 81       	ldd	r28, Z+6	; 0x06
    2196:	d7 81       	ldd	r29, Z+7	; 0x07
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	e8 16       	cp	r14, r24
    219e:	f9 06       	cpc	r15, r25
    21a0:	28 f4       	brcc	.+10     	; 0x21ac <xTaskIncrementTick+0xf2>
    21a2:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    21a6:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    21aa:	2d c0       	rjmp	.+90     	; 0x2206 <xTaskIncrementTick+0x14c>
    21ac:	8e 01       	movw	r16, r28
    21ae:	0e 5f       	subi	r16, 0xFE	; 254
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	c8 01       	movw	r24, r16
    21b4:	84 d9       	rcall	.-3320   	; 0x14be <uxListRemove>
    21b6:	8c 89       	ldd	r24, Y+20	; 0x14
    21b8:	9d 89       	ldd	r25, Y+21	; 0x15
    21ba:	89 2b       	or	r24, r25
    21bc:	19 f0       	breq	.+6      	; 0x21c4 <xTaskIncrementTick+0x10a>
    21be:	ce 01       	movw	r24, r28
    21c0:	0c 96       	adiw	r24, 0x0c	; 12
    21c2:	7d d9       	rcall	.-3334   	; 0x14be <uxListRemove>
    21c4:	8e 89       	ldd	r24, Y+22	; 0x16
    21c6:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <uxTopReadyPriority>
    21ca:	98 17       	cp	r25, r24
    21cc:	10 f4       	brcc	.+4      	; 0x21d2 <xTaskIncrementTick+0x118>
    21ce:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 01       	movw	r18, r24
    21d6:	22 0f       	add	r18, r18
    21d8:	33 1f       	adc	r19, r19
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	22 0f       	add	r18, r18
    21e0:	33 1f       	adc	r19, r19
    21e2:	82 0f       	add	r24, r18
    21e4:	93 1f       	adc	r25, r19
    21e6:	b8 01       	movw	r22, r16
    21e8:	83 5b       	subi	r24, 0xB3	; 179
    21ea:	9c 4d       	sbci	r25, 0xDC	; 220
    21ec:	16 d9       	rcall	.-3540   	; 0x141a <vListInsertEnd>
    21ee:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    21f2:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    21f6:	9e 89       	ldd	r25, Y+22	; 0x16
    21f8:	86 89       	ldd	r24, Z+22	; 0x16
    21fa:	98 17       	cp	r25, r24
    21fc:	08 f4       	brcc	.+2      	; 0x2200 <xTaskIncrementTick+0x146>
    21fe:	b5 cf       	rjmp	.-150    	; 0x216a <xTaskIncrementTick+0xb0>
    2200:	dd 24       	eor	r13, r13
    2202:	d3 94       	inc	r13
    2204:	b2 cf       	rjmp	.-156    	; 0x216a <xTaskIncrementTick+0xb0>
    2206:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    220a:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    220e:	86 89       	ldd	r24, Z+22	; 0x16
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	fc 01       	movw	r30, r24
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	8e 0f       	add	r24, r30
    2222:	9f 1f       	adc	r25, r31
    2224:	fc 01       	movw	r30, r24
    2226:	e3 5b       	subi	r30, 0xB3	; 179
    2228:	fc 4d       	sbci	r31, 0xDC	; 220
    222a:	80 81       	ld	r24, Z
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	48 f0       	brcs	.+18     	; 0x2242 <xTaskIncrementTick+0x188>
    2230:	dd 24       	eor	r13, r13
    2232:	d3 94       	inc	r13
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <xTaskIncrementTick+0x188>
    2236:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <uxPendedTicks>
    223a:	8f 5f       	subi	r24, 0xFF	; 255
    223c:	80 93 28 23 	sts	0x2328, r24	; 0x802328 <uxPendedTicks>
    2240:	d1 2c       	mov	r13, r1
    2242:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <xYieldPending>
    2246:	88 23       	and	r24, r24
    2248:	11 f0       	breq	.+4      	; 0x224e <xTaskIncrementTick+0x194>
    224a:	dd 24       	eor	r13, r13
    224c:	d3 94       	inc	r13
    224e:	8d 2d       	mov	r24, r13
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	08 95       	ret

00002260 <xTaskResumeAll>:
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	0f 92       	push	r0
    2274:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    2278:	81 50       	subi	r24, 0x01	; 1
    227a:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <uxSchedulerSuspended>
    227e:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    2282:	81 11       	cpse	r24, r1
    2284:	5d c0       	rjmp	.+186    	; 0x2340 <xTaskResumeAll+0xe0>
    2286:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <uxCurrentNumberOfTasks>
    228a:	81 11       	cpse	r24, r1
    228c:	30 c0       	rjmp	.+96     	; 0x22ee <xTaskResumeAll+0x8e>
    228e:	5b c0       	rjmp	.+182    	; 0x2346 <xTaskResumeAll+0xe6>
    2290:	d7 01       	movw	r26, r14
    2292:	15 96       	adiw	r26, 0x05	; 5
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	16 97       	sbiw	r26, 0x06	; 6
    229a:	c6 81       	ldd	r28, Z+6	; 0x06
    229c:	d7 81       	ldd	r29, Z+7	; 0x07
    229e:	ce 01       	movw	r24, r28
    22a0:	0c 96       	adiw	r24, 0x0c	; 12
    22a2:	0d d9       	rcall	.-3558   	; 0x14be <uxListRemove>
    22a4:	8e 01       	movw	r16, r28
    22a6:	0e 5f       	subi	r16, 0xFE	; 254
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	c8 01       	movw	r24, r16
    22ac:	08 d9       	rcall	.-3568   	; 0x14be <uxListRemove>
    22ae:	8e 89       	ldd	r24, Y+22	; 0x16
    22b0:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <uxTopReadyPriority>
    22b4:	98 17       	cp	r25, r24
    22b6:	10 f4       	brcc	.+4      	; 0x22bc <xTaskResumeAll+0x5c>
    22b8:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9c 01       	movw	r18, r24
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	22 0f       	add	r18, r18
    22c6:	33 1f       	adc	r19, r19
    22c8:	22 0f       	add	r18, r18
    22ca:	33 1f       	adc	r19, r19
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	b8 01       	movw	r22, r16
    22d2:	83 5b       	subi	r24, 0xB3	; 179
    22d4:	9c 4d       	sbci	r25, 0xDC	; 220
    22d6:	a1 d8       	rcall	.-3774   	; 0x141a <vListInsertEnd>
    22d8:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    22dc:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    22e0:	9e 89       	ldd	r25, Y+22	; 0x16
    22e2:	86 89       	ldd	r24, Z+22	; 0x16
    22e4:	98 17       	cp	r25, r24
    22e6:	58 f0       	brcs	.+22     	; 0x22fe <xTaskResumeAll+0x9e>
    22e8:	d0 92 27 23 	sts	0x2327, r13	; 0x802327 <xYieldPending>
    22ec:	08 c0       	rjmp	.+16     	; 0x22fe <xTaskResumeAll+0x9e>
    22ee:	0f 2e       	mov	r0, r31
    22f0:	fe e2       	ldi	r31, 0x2E	; 46
    22f2:	ef 2e       	mov	r14, r31
    22f4:	f3 e2       	ldi	r31, 0x23	; 35
    22f6:	ff 2e       	mov	r15, r31
    22f8:	f0 2d       	mov	r31, r0
    22fa:	dd 24       	eor	r13, r13
    22fc:	d3 94       	inc	r13
    22fe:	f7 01       	movw	r30, r14
    2300:	80 81       	ld	r24, Z
    2302:	81 11       	cpse	r24, r1
    2304:	c5 cf       	rjmp	.-118    	; 0x2290 <xTaskResumeAll+0x30>
    2306:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <uxPendedTicks>
    230a:	88 23       	and	r24, r24
    230c:	91 f0       	breq	.+36     	; 0x2332 <xTaskResumeAll+0xd2>
    230e:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <uxPendedTicks>
    2312:	88 23       	and	r24, r24
    2314:	71 f0       	breq	.+28     	; 0x2332 <xTaskResumeAll+0xd2>
    2316:	c1 e0       	ldi	r28, 0x01	; 1
    2318:	d0 de       	rcall	.-608    	; 0x20ba <xTaskIncrementTick>
    231a:	81 11       	cpse	r24, r1
    231c:	c0 93 27 23 	sts	0x2327, r28	; 0x802327 <xYieldPending>
    2320:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <uxPendedTicks>
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	80 93 28 23 	sts	0x2328, r24	; 0x802328 <uxPendedTicks>
    232a:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <uxPendedTicks>
    232e:	81 11       	cpse	r24, r1
    2330:	f3 cf       	rjmp	.-26     	; 0x2318 <xTaskResumeAll+0xb8>
    2332:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <xYieldPending>
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	29 f4       	brne	.+10     	; 0x2344 <xTaskResumeAll+0xe4>
    233a:	a3 d9       	rcall	.-3258   	; 0x1682 <vPortYield>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <xTaskResumeAll+0xe6>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <xTaskResumeAll+0xe6>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	0f 90       	pop	r0
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	08 95       	ret

0000235a <vTaskDelay>:
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	ec 01       	movw	r28, r24
    2360:	89 2b       	or	r24, r25
    2362:	91 f0       	breq	.+36     	; 0x2388 <vTaskDelay+0x2e>
    2364:	9a de       	rcall	.-716    	; 0x209a <vTaskSuspendAll>
    2366:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <xTickCount>
    236a:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <xTickCount+0x1>
    236e:	c8 0f       	add	r28, r24
    2370:	d9 1f       	adc	r29, r25
    2372:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <pxCurrentTCB>
    2376:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    237a:	02 96       	adiw	r24, 0x02	; 2
    237c:	a0 d8       	rcall	.-3776   	; 0x14be <uxListRemove>
    237e:	ce 01       	movw	r24, r28
    2380:	28 dd       	rcall	.-1456   	; 0x1dd2 <prvAddCurrentTaskToDelayedList>
    2382:	6e df       	rcall	.-292    	; 0x2260 <xTaskResumeAll>
    2384:	81 11       	cpse	r24, r1
    2386:	01 c0       	rjmp	.+2      	; 0x238a <vTaskDelay+0x30>
    2388:	7c d9       	rcall	.-3336   	; 0x1682 <vPortYield>
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <vTaskSwitchContext>:
    2390:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    2394:	88 23       	and	r24, r24
    2396:	21 f0       	breq	.+8      	; 0x23a0 <vTaskSwitchContext+0x10>
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	80 93 27 23 	sts	0x2327, r24	; 0x802327 <xYieldPending>
    239e:	08 95       	ret
    23a0:	10 92 27 23 	sts	0x2327, r1	; 0x802327 <xYieldPending>
    23a4:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <uxTopReadyPriority>
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	fc 01       	movw	r30, r24
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	8e 0f       	add	r24, r30
    23ba:	9f 1f       	adc	r25, r31
    23bc:	fc 01       	movw	r30, r24
    23be:	e3 5b       	subi	r30, 0xB3	; 179
    23c0:	fc 4d       	sbci	r31, 0xDC	; 220
    23c2:	80 81       	ld	r24, Z
    23c4:	81 11       	cpse	r24, r1
    23c6:	17 c0       	rjmp	.+46     	; 0x23f6 <vTaskSwitchContext+0x66>
    23c8:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <uxTopReadyPriority>
    23cc:	81 50       	subi	r24, 0x01	; 1
    23ce:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    23d2:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <uxTopReadyPriority>
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	8e 0f       	add	r24, r30
    23e8:	9f 1f       	adc	r25, r31
    23ea:	fc 01       	movw	r30, r24
    23ec:	e3 5b       	subi	r30, 0xB3	; 179
    23ee:	fc 4d       	sbci	r31, 0xDC	; 220
    23f0:	80 81       	ld	r24, Z
    23f2:	88 23       	and	r24, r24
    23f4:	49 f3       	breq	.-46     	; 0x23c8 <vTaskSwitchContext+0x38>
    23f6:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <uxTopReadyPriority>
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 01       	movw	r18, r24
    23fe:	22 0f       	add	r18, r18
    2400:	33 1f       	adc	r19, r19
    2402:	22 0f       	add	r18, r18
    2404:	33 1f       	adc	r19, r19
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	28 0f       	add	r18, r24
    240c:	39 1f       	adc	r19, r25
    240e:	d9 01       	movw	r26, r18
    2410:	a3 5b       	subi	r26, 0xB3	; 179
    2412:	bc 4d       	sbci	r27, 0xDC	; 220
    2414:	11 96       	adiw	r26, 0x01	; 1
    2416:	ed 91       	ld	r30, X+
    2418:	fc 91       	ld	r31, X
    241a:	12 97       	sbiw	r26, 0x02	; 2
    241c:	02 80       	ldd	r0, Z+2	; 0x02
    241e:	f3 81       	ldd	r31, Z+3	; 0x03
    2420:	e0 2d       	mov	r30, r0
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	ed 93       	st	X+, r30
    2426:	fc 93       	st	X, r31
    2428:	12 97       	sbiw	r26, 0x02	; 2
    242a:	20 5b       	subi	r18, 0xB0	; 176
    242c:	3c 4d       	sbci	r19, 0xDC	; 220
    242e:	e2 17       	cp	r30, r18
    2430:	f3 07       	cpc	r31, r19
    2432:	29 f4       	brne	.+10     	; 0x243e <vTaskSwitchContext+0xae>
    2434:	22 81       	ldd	r18, Z+2	; 0x02
    2436:	33 81       	ldd	r19, Z+3	; 0x03
    2438:	fd 01       	movw	r30, r26
    243a:	21 83       	std	Z+1, r18	; 0x01
    243c:	32 83       	std	Z+2, r19	; 0x02
    243e:	fc 01       	movw	r30, r24
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	8e 0f       	add	r24, r30
    244e:	9f 1f       	adc	r25, r31
    2450:	fc 01       	movw	r30, r24
    2452:	e3 5b       	subi	r30, 0xB3	; 179
    2454:	fc 4d       	sbci	r31, 0xDC	; 220
    2456:	01 80       	ldd	r0, Z+1	; 0x01
    2458:	f2 81       	ldd	r31, Z+2	; 0x02
    245a:	e0 2d       	mov	r30, r0
    245c:	86 81       	ldd	r24, Z+6	; 0x06
    245e:	97 81       	ldd	r25, Z+7	; 0x07
    2460:	80 93 7a 23 	sts	0x237A, r24	; 0x80237a <pxCurrentTCB>
    2464:	90 93 7b 23 	sts	0x237B, r25	; 0x80237b <pxCurrentTCB+0x1>
    2468:	08 95       	ret

0000246a <vTaskPlaceOnEventList>:
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	eb 01       	movw	r28, r22
    2470:	60 91 7a 23 	lds	r22, 0x237A	; 0x80237a <pxCurrentTCB>
    2474:	70 91 7b 23 	lds	r23, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    2478:	64 5f       	subi	r22, 0xF4	; 244
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    2480:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <pxCurrentTCB>
    2484:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    2488:	02 96       	adiw	r24, 0x02	; 2
    248a:	19 d8       	rcall	.-4046   	; 0x14be <uxListRemove>
    248c:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <xTickCount>
    2490:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <xTickCount+0x1>
    2494:	8c 0f       	add	r24, r28
    2496:	9d 1f       	adc	r25, r29
    2498:	9c dc       	rcall	.-1736   	; 0x1dd2 <prvAddCurrentTaskToDelayedList>
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <vTaskPlaceOnEventListRestricted>:
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	eb 01       	movw	r28, r22
    24a6:	60 91 7a 23 	lds	r22, 0x237A	; 0x80237a <pxCurrentTCB>
    24aa:	70 91 7b 23 	lds	r23, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    24ae:	64 5f       	subi	r22, 0xF4	; 244
    24b0:	7f 4f       	sbci	r23, 0xFF	; 255
    24b2:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    24b6:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <pxCurrentTCB>
    24ba:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    24be:	02 96       	adiw	r24, 0x02	; 2
    24c0:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    24c4:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <xTickCount>
    24c8:	90 91 2c 23 	lds	r25, 0x232C	; 0x80232c <xTickCount+0x1>
    24cc:	8c 0f       	add	r24, r28
    24ce:	9d 1f       	adc	r25, r29
    24d0:	80 dc       	rcall	.-1792   	; 0x1dd2 <prvAddCurrentTaskToDelayedList>
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	08 95       	ret

000024d8 <xTaskRemoveFromEventList>:
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	dc 01       	movw	r26, r24
    24e2:	15 96       	adiw	r26, 0x05	; 5
    24e4:	ed 91       	ld	r30, X+
    24e6:	fc 91       	ld	r31, X
    24e8:	16 97       	sbiw	r26, 0x06	; 6
    24ea:	c6 81       	ldd	r28, Z+6	; 0x06
    24ec:	d7 81       	ldd	r29, Z+7	; 0x07
    24ee:	8e 01       	movw	r16, r28
    24f0:	04 5f       	subi	r16, 0xF4	; 244
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
    24f4:	c8 01       	movw	r24, r16
    24f6:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    24fa:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    24fe:	81 11       	cpse	r24, r1
    2500:	1c c0       	rjmp	.+56     	; 0x253a <xTaskRemoveFromEventList+0x62>
    2502:	0a 50       	subi	r16, 0x0A	; 10
    2504:	11 09       	sbc	r17, r1
    2506:	c8 01       	movw	r24, r16
    2508:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    250c:	8e 89       	ldd	r24, Y+22	; 0x16
    250e:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <uxTopReadyPriority>
    2512:	98 17       	cp	r25, r24
    2514:	10 f4       	brcc	.+4      	; 0x251a <xTaskRemoveFromEventList+0x42>
    2516:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 01       	movw	r18, r24
    251e:	22 0f       	add	r18, r18
    2520:	33 1f       	adc	r19, r19
    2522:	22 0f       	add	r18, r18
    2524:	33 1f       	adc	r19, r19
    2526:	22 0f       	add	r18, r18
    2528:	33 1f       	adc	r19, r19
    252a:	82 0f       	add	r24, r18
    252c:	93 1f       	adc	r25, r19
    252e:	b8 01       	movw	r22, r16
    2530:	83 5b       	subi	r24, 0xB3	; 179
    2532:	9c 4d       	sbci	r25, 0xDC	; 220
    2534:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    2538:	05 c0       	rjmp	.+10     	; 0x2544 <xTaskRemoveFromEventList+0x6c>
    253a:	b8 01       	movw	r22, r16
    253c:	8e e2       	ldi	r24, 0x2E	; 46
    253e:	93 e2       	ldi	r25, 0x23	; 35
    2540:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    2544:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    2548:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    254c:	9e 89       	ldd	r25, Y+22	; 0x16
    254e:	86 89       	ldd	r24, Z+22	; 0x16
    2550:	89 17       	cp	r24, r25
    2552:	20 f4       	brcc	.+8      	; 0x255c <xTaskRemoveFromEventList+0x84>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	80 93 27 23 	sts	0x2327, r24	; 0x802327 <xYieldPending>
    255a:	01 c0       	rjmp	.+2      	; 0x255e <xTaskRemoveFromEventList+0x86>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	08 95       	ret

00002568 <vTaskSetTimeOutState>:
    2568:	20 91 26 23 	lds	r18, 0x2326	; 0x802326 <xNumOfOverflows>
    256c:	fc 01       	movw	r30, r24
    256e:	20 83       	st	Z, r18
    2570:	20 91 2b 23 	lds	r18, 0x232B	; 0x80232b <xTickCount>
    2574:	30 91 2c 23 	lds	r19, 0x232C	; 0x80232c <xTickCount+0x1>
    2578:	21 83       	std	Z+1, r18	; 0x01
    257a:	32 83       	std	Z+2, r19	; 0x02
    257c:	08 95       	ret

0000257e <xTaskCheckForTimeOut>:
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	fc 01       	movw	r30, r24
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	0f 92       	push	r0
    258a:	20 91 2b 23 	lds	r18, 0x232B	; 0x80232b <xTickCount>
    258e:	30 91 2c 23 	lds	r19, 0x232C	; 0x80232c <xTickCount+0x1>
    2592:	80 91 26 23 	lds	r24, 0x2326	; 0x802326 <xNumOfOverflows>
    2596:	90 81       	ld	r25, Z
    2598:	98 17       	cp	r25, r24
    259a:	29 f0       	breq	.+10     	; 0x25a6 <xTaskCheckForTimeOut+0x28>
    259c:	81 81       	ldd	r24, Z+1	; 0x01
    259e:	92 81       	ldd	r25, Z+2	; 0x02
    25a0:	28 17       	cp	r18, r24
    25a2:	39 07       	cpc	r19, r25
    25a4:	a8 f4       	brcc	.+42     	; 0x25d0 <xTaskCheckForTimeOut+0x52>
    25a6:	a1 81       	ldd	r26, Z+1	; 0x01
    25a8:	b2 81       	ldd	r27, Z+2	; 0x02
    25aa:	eb 01       	movw	r28, r22
    25ac:	48 81       	ld	r20, Y
    25ae:	59 81       	ldd	r21, Y+1	; 0x01
    25b0:	c9 01       	movw	r24, r18
    25b2:	8a 1b       	sub	r24, r26
    25b4:	9b 0b       	sbc	r25, r27
    25b6:	84 17       	cp	r24, r20
    25b8:	95 07       	cpc	r25, r21
    25ba:	60 f4       	brcc	.+24     	; 0x25d4 <xTaskCheckForTimeOut+0x56>
    25bc:	cf 01       	movw	r24, r30
    25be:	a2 1b       	sub	r26, r18
    25c0:	b3 0b       	sbc	r27, r19
    25c2:	4a 0f       	add	r20, r26
    25c4:	5b 1f       	adc	r21, r27
    25c6:	48 83       	st	Y, r20
    25c8:	59 83       	std	Y+1, r21	; 0x01
    25ca:	ce df       	rcall	.-100    	; 0x2568 <vTaskSetTimeOutState>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <xTaskCheckForTimeOut+0x58>
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <xTaskCheckForTimeOut+0x58>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <vTaskMissedYield>:
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	80 93 27 23 	sts	0x2327, r24	; 0x802327 <xYieldPending>
    25e6:	08 95       	ret

000025e8 <xTaskGetSchedulerState>:
    25e8:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <xSchedulerRunning>
    25ec:	88 23       	and	r24, r24
    25ee:	31 f0       	breq	.+12     	; 0x25fc <xTaskGetSchedulerState+0x14>
    25f0:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <uxSchedulerSuspended>
    25f4:	88 23       	and	r24, r24
    25f6:	21 f0       	breq	.+8      	; 0x2600 <xTaskGetSchedulerState+0x18>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	08 95       	ret
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	08 95       	ret
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	08 95       	ret

00002604 <vTaskPriorityInherit>:
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	fc 01       	movw	r30, r24
    260e:	89 2b       	or	r24, r25
    2610:	09 f4       	brne	.+2      	; 0x2614 <vTaskPriorityInherit+0x10>
    2612:	55 c0       	rjmp	.+170    	; 0x26be <vTaskPriorityInherit+0xba>
    2614:	26 89       	ldd	r18, Z+22	; 0x16
    2616:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    261a:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    261e:	56 96       	adiw	r26, 0x16	; 22
    2620:	8c 91       	ld	r24, X
    2622:	28 17       	cp	r18, r24
    2624:	08 f0       	brcs	.+2      	; 0x2628 <vTaskPriorityInherit+0x24>
    2626:	4b c0       	rjmp	.+150    	; 0x26be <vTaskPriorityInherit+0xba>
    2628:	84 85       	ldd	r24, Z+12	; 0x0c
    262a:	95 85       	ldd	r25, Z+13	; 0x0d
    262c:	99 23       	and	r25, r25
    262e:	64 f0       	brlt	.+24     	; 0x2648 <vTaskPriorityInherit+0x44>
    2630:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    2634:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    2638:	56 96       	adiw	r26, 0x16	; 22
    263a:	3c 91       	ld	r19, X
    263c:	85 e0       	ldi	r24, 0x05	; 5
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	83 1b       	sub	r24, r19
    2642:	91 09       	sbc	r25, r1
    2644:	84 87       	std	Z+12, r24	; 0x0c
    2646:	95 87       	std	Z+13, r25	; 0x0d
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	c9 01       	movw	r24, r18
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	28 0f       	add	r18, r24
    265a:	39 1f       	adc	r19, r25
    265c:	23 5b       	subi	r18, 0xB3	; 179
    265e:	3c 4d       	sbci	r19, 0xDC	; 220
    2660:	82 85       	ldd	r24, Z+10	; 0x0a
    2662:	93 85       	ldd	r25, Z+11	; 0x0b
    2664:	82 17       	cp	r24, r18
    2666:	93 07       	cpc	r25, r19
    2668:	19 f5       	brne	.+70     	; 0x26b0 <vTaskPriorityInherit+0xac>
    266a:	8f 01       	movw	r16, r30
    266c:	ef 01       	movw	r28, r30
    266e:	22 96       	adiw	r28, 0x02	; 2
    2670:	ce 01       	movw	r24, r28
    2672:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    2676:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    267a:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    267e:	86 89       	ldd	r24, Z+22	; 0x16
    2680:	f8 01       	movw	r30, r16
    2682:	86 8b       	std	Z+22, r24	; 0x16
    2684:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <uxTopReadyPriority>
    2688:	98 17       	cp	r25, r24
    268a:	10 f4       	brcc	.+4      	; 0x2690 <vTaskPriorityInherit+0x8c>
    268c:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 01       	movw	r18, r24
    2694:	22 0f       	add	r18, r18
    2696:	33 1f       	adc	r19, r19
    2698:	22 0f       	add	r18, r18
    269a:	33 1f       	adc	r19, r19
    269c:	22 0f       	add	r18, r18
    269e:	33 1f       	adc	r19, r19
    26a0:	82 0f       	add	r24, r18
    26a2:	93 1f       	adc	r25, r19
    26a4:	be 01       	movw	r22, r28
    26a6:	83 5b       	subi	r24, 0xB3	; 179
    26a8:	9c 4d       	sbci	r25, 0xDC	; 220
    26aa:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    26ae:	07 c0       	rjmp	.+14     	; 0x26be <vTaskPriorityInherit+0xba>
    26b0:	a0 91 7a 23 	lds	r26, 0x237A	; 0x80237a <pxCurrentTCB>
    26b4:	b0 91 7b 23 	lds	r27, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    26b8:	56 96       	adiw	r26, 0x16	; 22
    26ba:	8c 91       	ld	r24, X
    26bc:	86 8b       	std	Z+22, r24	; 0x16
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	08 95       	ret

000026c8 <xTaskPriorityDisinherit>:
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	fc 01       	movw	r30, r24
    26d2:	89 2b       	or	r24, r25
    26d4:	79 f1       	breq	.+94     	; 0x2734 <xTaskPriorityDisinherit+0x6c>
    26d6:	82 a1       	ldd	r24, Z+34	; 0x22
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	82 a3       	std	Z+34, r24	; 0x22
    26dc:	26 89       	ldd	r18, Z+22	; 0x16
    26de:	91 a1       	ldd	r25, Z+33	; 0x21
    26e0:	29 17       	cp	r18, r25
    26e2:	51 f1       	breq	.+84     	; 0x2738 <xTaskPriorityDisinherit+0x70>
    26e4:	81 11       	cpse	r24, r1
    26e6:	2a c0       	rjmp	.+84     	; 0x273c <xTaskPriorityDisinherit+0x74>
    26e8:	ef 01       	movw	r28, r30
    26ea:	8f 01       	movw	r16, r30
    26ec:	0e 5f       	subi	r16, 0xFE	; 254
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	c8 01       	movw	r24, r16
    26f2:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
    26f6:	89 a1       	ldd	r24, Y+33	; 0x21
    26f8:	8e 8b       	std	Y+22, r24	; 0x16
    26fa:	25 e0       	ldi	r18, 0x05	; 5
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	28 1b       	sub	r18, r24
    2700:	31 09       	sbc	r19, r1
    2702:	2c 87       	std	Y+12, r18	; 0x0c
    2704:	3d 87       	std	Y+13, r19	; 0x0d
    2706:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <uxTopReadyPriority>
    270a:	98 17       	cp	r25, r24
    270c:	10 f4       	brcc	.+4      	; 0x2712 <xTaskPriorityDisinherit+0x4a>
    270e:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <uxTopReadyPriority>
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9c 01       	movw	r18, r24
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	22 0f       	add	r18, r18
    2720:	33 1f       	adc	r19, r19
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	b8 01       	movw	r22, r16
    2728:	83 5b       	subi	r24, 0xB3	; 179
    272a:	9c 4d       	sbci	r25, 0xDC	; 220
    272c:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInsertEnd>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	05 c0       	rjmp	.+10     	; 0x273e <xTaskPriorityDisinherit+0x76>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	03 c0       	rjmp	.+6      	; 0x273e <xTaskPriorityDisinherit+0x76>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	01 c0       	rjmp	.+2      	; 0x273e <xTaskPriorityDisinherit+0x76>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	08 95       	ret

00002748 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2748:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <pxCurrentTCB>
    274c:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    2750:	89 2b       	or	r24, r25
    2752:	39 f0       	breq	.+14     	; 0x2762 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2754:	e0 91 7a 23 	lds	r30, 0x237A	; 0x80237a <pxCurrentTCB>
    2758:	f0 91 7b 23 	lds	r31, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
    275c:	82 a1       	ldd	r24, Z+34	; 0x22
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    2762:	80 91 7a 23 	lds	r24, 0x237A	; 0x80237a <pxCurrentTCB>
    2766:	90 91 7b 23 	lds	r25, 0x237B	; 0x80237b <pxCurrentTCB+0x1>
	}
    276a:	08 95       	ret

0000276c <prvInsertTimerInActiveList>:

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
}
    276c:	fc 01       	movw	r30, r24
    276e:	62 83       	std	Z+2, r22	; 0x02
    2770:	73 83       	std	Z+3, r23	; 0x03
    2772:	80 87       	std	Z+8, r24	; 0x08
    2774:	91 87       	std	Z+9, r25	; 0x09
    2776:	46 17       	cp	r20, r22
    2778:	57 07       	cpc	r21, r23
    277a:	90 f0       	brcs	.+36     	; 0x27a0 <prvInsertTimerInActiveList+0x34>
    277c:	42 1b       	sub	r20, r18
    277e:	53 0b       	sbc	r21, r19
    2780:	84 85       	ldd	r24, Z+12	; 0x0c
    2782:	95 85       	ldd	r25, Z+13	; 0x0d
    2784:	48 17       	cp	r20, r24
    2786:	59 07       	cpc	r21, r25
    2788:	e0 f4       	brcc	.+56     	; 0x27c2 <prvInsertTimerInActiveList+0x56>
    278a:	bf 01       	movw	r22, r30
    278c:	6e 5f       	subi	r22, 0xFE	; 254
    278e:	7f 4f       	sbci	r23, 0xFF	; 255
    2790:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <pxOverflowTimerList>
    2794:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <pxOverflowTimerList+0x1>
    2798:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	08 95       	ret
    27a0:	42 17       	cp	r20, r18
    27a2:	53 07       	cpc	r21, r19
    27a4:	18 f4       	brcc	.+6      	; 0x27ac <prvInsertTimerInActiveList+0x40>
    27a6:	62 17       	cp	r22, r18
    27a8:	73 07       	cpc	r23, r19
    27aa:	68 f4       	brcc	.+26     	; 0x27c6 <prvInsertTimerInActiveList+0x5a>
    27ac:	bf 01       	movw	r22, r30
    27ae:	6e 5f       	subi	r22, 0xFE	; 254
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <pxCurrentTimerList>
    27b6:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <pxCurrentTimerList+0x1>
    27ba:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	08 95       	ret
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	08 95       	ret
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	08 95       	ret

000027ca <prvCheckForValidListAndQueue>:
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	0f 92       	push	r0
    27d0:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <xTimerQueue>
    27d4:	90 91 7f 23 	lds	r25, 0x237F	; 0x80237f <xTimerQueue+0x1>
    27d8:	89 2b       	or	r24, r25
    27da:	e1 f4       	brne	.+56     	; 0x2814 <prvCheckForValidListAndQueue+0x4a>
    27dc:	8d e8       	ldi	r24, 0x8D	; 141
    27de:	93 e2       	ldi	r25, 0x23	; 35
    27e0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    27e4:	84 e8       	ldi	r24, 0x84	; 132
    27e6:	93 e2       	ldi	r25, 0x23	; 35
    27e8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <vListInitialise>
    27ec:	8d e8       	ldi	r24, 0x8D	; 141
    27ee:	93 e2       	ldi	r25, 0x23	; 35
    27f0:	80 93 82 23 	sts	0x2382, r24	; 0x802382 <pxCurrentTimerList>
    27f4:	90 93 83 23 	sts	0x2383, r25	; 0x802383 <pxCurrentTimerList+0x1>
    27f8:	84 e8       	ldi	r24, 0x84	; 132
    27fa:	93 e2       	ldi	r25, 0x23	; 35
    27fc:	80 93 80 23 	sts	0x2380, r24	; 0x802380 <pxOverflowTimerList>
    2800:	90 93 81 23 	sts	0x2381, r25	; 0x802381 <pxOverflowTimerList+0x1>
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	65 e0       	ldi	r22, 0x05	; 5
    2808:	8a e0       	ldi	r24, 0x0A	; 10
    280a:	01 d9       	rcall	.-3582   	; 0x1a0e <xQueueGenericCreate>
    280c:	80 93 7e 23 	sts	0x237E, r24	; 0x80237e <xTimerQueue>
    2810:	90 93 7f 23 	sts	0x237F, r25	; 0x80237f <xTimerQueue+0x1>
    2814:	0f 90       	pop	r0
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	08 95       	ret

0000281a <xTimerCreateTimerTask>:
    281a:	af 92       	push	r10
    281c:	bf 92       	push	r11
    281e:	cf 92       	push	r12
    2820:	df 92       	push	r13
    2822:	ef 92       	push	r14
    2824:	ff 92       	push	r15
    2826:	0f 93       	push	r16
    2828:	d0 df       	rcall	.-96     	; 0x27ca <prvCheckForValidListAndQueue>
    282a:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <xTimerQueue>
    282e:	90 91 7f 23 	lds	r25, 0x237F	; 0x80237f <xTimerQueue+0x1>
    2832:	89 2b       	or	r24, r25
    2834:	89 f0       	breq	.+34     	; 0x2858 <xTimerCreateTimerTask+0x3e>
    2836:	a1 2c       	mov	r10, r1
    2838:	b1 2c       	mov	r11, r1
    283a:	c1 2c       	mov	r12, r1
    283c:	d1 2c       	mov	r13, r1
    283e:	e1 2c       	mov	r14, r1
    2840:	f1 2c       	mov	r15, r1
    2842:	03 e0       	ldi	r16, 0x03	; 3
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	45 e5       	ldi	r20, 0x55	; 85
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	64 e1       	ldi	r22, 0x14	; 20
    284e:	70 e2       	ldi	r23, 0x20	; 32
    2850:	85 ee       	ldi	r24, 0xE5	; 229
    2852:	94 e1       	ldi	r25, 0x14	; 20
    2854:	f3 da       	rcall	.-2586   	; 0x1e3c <xTaskGenericCreate>
    2856:	01 c0       	rjmp	.+2      	; 0x285a <xTimerCreateTimerTask+0x40>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	bf 90       	pop	r11
    2866:	af 90       	pop	r10
    2868:	08 95       	ret

0000286a <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	25 97       	sbiw	r28, 0x05	; 5
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	de bf       	out	0x3e, r29	; 62
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    287c:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <xTimerQueue>
    2880:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <xTimerQueue+0x1>
    2884:	30 97       	sbiw	r30, 0x00	; 0
    2886:	51 f1       	breq	.+84     	; 0x28dc <xTimerGenericCommand+0x72>
    2888:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    288a:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    288c:	4a 83       	std	Y+2, r20	; 0x02
    288e:	5b 83       	std	Y+3, r21	; 0x03
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2890:	8c 83       	std	Y+4, r24	; 0x04
    2892:	9d 83       	std	Y+5, r25	; 0x05

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2894:	66 30       	cpi	r22, 0x06	; 6
    2896:	d4 f4       	brge	.+52     	; 0x28cc <xTimerGenericCommand+0x62>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2898:	a7 de       	rcall	.-690    	; 0x25e8 <xTaskGetSchedulerState>
    289a:	82 30       	cpi	r24, 0x02	; 2
    289c:	59 f4       	brne	.+22     	; 0x28b4 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	a8 01       	movw	r20, r16
    28a2:	be 01       	movw	r22, r28
    28a4:	6f 5f       	subi	r22, 0xFF	; 255
    28a6:	7f 4f       	sbci	r23, 0xFF	; 255
    28a8:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <xTimerQueue>
    28ac:	90 91 7f 23 	lds	r25, 0x237F	; 0x80237f <xTimerQueue+0x1>
    28b0:	d7 d8       	rcall	.-3666   	; 0x1a60 <xQueueGenericSend>
    28b2:	15 c0       	rjmp	.+42     	; 0x28de <xTimerGenericCommand+0x74>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	be 01       	movw	r22, r28
    28bc:	6f 5f       	subi	r22, 0xFF	; 255
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <xTimerQueue>
    28c4:	90 91 7f 23 	lds	r25, 0x237F	; 0x80237f <xTimerQueue+0x1>
    28c8:	cb d8       	rcall	.-3690   	; 0x1a60 <xQueueGenericSend>
    28ca:	09 c0       	rjmp	.+18     	; 0x28de <xTimerGenericCommand+0x74>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	ad 01       	movw	r20, r26
    28d0:	be 01       	movw	r22, r28
    28d2:	6f 5f       	subi	r22, 0xFF	; 255
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255
    28d6:	cf 01       	movw	r24, r30
    28d8:	78 d9       	rcall	.-3344   	; 0x1bca <xQueueGenericSendFromISR>
    28da:	01 c0       	rjmp	.+2      	; 0x28de <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    28dc:	80 e0       	ldi	r24, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    28de:	25 96       	adiw	r28, 0x05	; 5
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	08 95       	ret

000028ee <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    2904:	d0 db       	rcall	.-2144   	; 0x20a6 <xTaskGetTickCount>
    2906:	7c 01       	movw	r14, r24

	if( xTimeNow < xLastTime )
    2908:	80 91 7c 23 	lds	r24, 0x237C	; 0x80237c <xLastTime.4450>
    290c:	90 91 7d 23 	lds	r25, 0x237D	; 0x80237d <xLastTime.4450+0x1>
    2910:	e8 16       	cp	r14, r24
    2912:	f9 06       	cpc	r15, r25
    2914:	08 f0       	brcs	.+2      	; 0x2918 <prvSampleTimeNow+0x2a>
    2916:	47 c0       	rjmp	.+142    	; 0x29a6 <prvSampleTimeNow+0xb8>
    2918:	2f c0       	rjmp	.+94     	; 0x2978 <prvSampleTimeNow+0x8a>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    291a:	05 80       	ldd	r0, Z+5	; 0x05
    291c:	f6 81       	ldd	r31, Z+6	; 0x06
    291e:	e0 2d       	mov	r30, r0
    2920:	a0 80       	ld	r10, Z
    2922:	b1 80       	ldd	r11, Z+1	; 0x01

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2924:	c6 81       	ldd	r28, Z+6	; 0x06
    2926:	d7 81       	ldd	r29, Z+7	; 0x07
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2928:	8e 01       	movw	r16, r28
    292a:	0e 5f       	subi	r16, 0xFE	; 254
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	c8 01       	movw	r24, r16
    2930:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2934:	e9 89       	ldd	r30, Y+17	; 0x11
    2936:	fa 89       	ldd	r31, Y+18	; 0x12
    2938:	ce 01       	movw	r24, r28
    293a:	19 95       	eicall

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    293c:	8e 85       	ldd	r24, Y+14	; 0x0e
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	d9 f4       	brne	.+54     	; 0x2978 <prvSampleTimeNow+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2942:	8c 85       	ldd	r24, Y+12	; 0x0c
    2944:	9d 85       	ldd	r25, Y+13	; 0x0d
    2946:	8a 0d       	add	r24, r10
    2948:	9b 1d       	adc	r25, r11
			if( xReloadTime > xNextExpireTime )
    294a:	a8 16       	cp	r10, r24
    294c:	b9 06       	cpc	r11, r25
    294e:	60 f4       	brcc	.+24     	; 0x2968 <prvSampleTimeNow+0x7a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2950:	8a 83       	std	Y+2, r24	; 0x02
    2952:	9b 83       	std	Y+3, r25	; 0x03
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2954:	c8 87       	std	Y+8, r28	; 0x08
    2956:	d9 87       	std	Y+9, r29	; 0x09
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2958:	b8 01       	movw	r22, r16
    295a:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <pxCurrentTimerList>
    295e:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <pxCurrentTimerList+0x1>
    2962:	0e 94 2e 0a 	call	0x145c	; 0x145c <vListInsert>
    2966:	08 c0       	rjmp	.+16     	; 0x2978 <prvSampleTimeNow+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2968:	00 e0       	ldi	r16, 0x00	; 0
    296a:	10 e0       	ldi	r17, 0x00	; 0
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	a5 01       	movw	r20, r10
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	ce 01       	movw	r24, r28
    2976:	79 df       	rcall	.-270    	; 0x286a <xTimerGenericCommand>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2978:	e0 91 82 23 	lds	r30, 0x2382	; 0x802382 <pxCurrentTimerList>
    297c:	f0 91 83 23 	lds	r31, 0x2383	; 0x802383 <pxCurrentTimerList+0x1>
    2980:	80 81       	ld	r24, Z
    2982:	81 11       	cpse	r24, r1
    2984:	ca cf       	rjmp	.-108    	; 0x291a <prvSampleTimeNow+0x2c>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    2986:	80 91 80 23 	lds	r24, 0x2380	; 0x802380 <pxOverflowTimerList>
    298a:	90 91 81 23 	lds	r25, 0x2381	; 0x802381 <pxOverflowTimerList+0x1>
    298e:	80 93 82 23 	sts	0x2382, r24	; 0x802382 <pxCurrentTimerList>
    2992:	90 93 83 23 	sts	0x2383, r25	; 0x802383 <pxCurrentTimerList+0x1>
	pxOverflowTimerList = pxTemp;
    2996:	e0 93 80 23 	sts	0x2380, r30	; 0x802380 <pxOverflowTimerList>
    299a:	f0 93 81 23 	sts	0x2381, r31	; 0x802381 <pxOverflowTimerList+0x1>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	f6 01       	movw	r30, r12
    29a2:	80 83       	st	Z, r24
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <prvSampleTimeNow+0xbc>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    29a6:	f6 01       	movw	r30, r12
    29a8:	10 82       	st	Z, r1
	}

	xLastTime = xTimeNow;
    29aa:	e0 92 7c 23 	sts	0x237C, r14	; 0x80237c <xLastTime.4450>
    29ae:	f0 92 7d 23 	sts	0x237D, r15	; 0x80237d <xLastTime.4450+0x1>

	return xTimeNow;
}
    29b2:	c7 01       	movw	r24, r14
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	bf 90       	pop	r11
    29c6:	af 90       	pop	r10
    29c8:	08 95       	ret

000029ca <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <prvTimerTask+0x6>
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <prvTimerTask+0x8>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    29d6:	ce 01       	movw	r24, r28
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	5c 01       	movw	r10, r24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    29dc:	e8 2e       	mov	r14, r24
    29de:	fb 2c       	mov	r15, r11
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    29e0:	e0 91 82 23 	lds	r30, 0x2382	; 0x802382 <pxCurrentTimerList>
    29e4:	f0 91 83 23 	lds	r31, 0x2383	; 0x802383 <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    29e8:	80 81       	ld	r24, Z
    29ea:	88 23       	and	r24, r24
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <prvTimerTask+0x26>
    29ee:	b7 c0       	rjmp	.+366    	; 0x2b5e <prvTimerTask+0x194>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    29f0:	05 80       	ldd	r0, Z+5	; 0x05
    29f2:	f6 81       	ldd	r31, Z+6	; 0x06
    29f4:	e0 2d       	mov	r30, r0
    29f6:	c0 80       	ld	r12, Z
    29f8:	d1 80       	ldd	r13, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    29fa:	4f db       	rcall	.-2402   	; 0x209a <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    29fc:	c5 01       	movw	r24, r10
    29fe:	77 df       	rcall	.-274    	; 0x28ee <prvSampleTimeNow>
    2a00:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	81 11       	cpse	r24, r1
    2a06:	43 c0       	rjmp	.+134    	; 0x2a8e <prvTimerTask+0xc4>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2a08:	0c 15       	cp	r16, r12
    2a0a:	1d 05       	cpc	r17, r13
			{
				( void ) xTaskResumeAll();
    2a0c:	90 f1       	brcs	.+100    	; 0x2a72 <prvTimerTask+0xa8>
    2a0e:	28 dc       	rcall	.-1968   	; 0x2260 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a10:	e0 91 82 23 	lds	r30, 0x2382	; 0x802382 <pxCurrentTimerList>
    2a14:	f0 91 83 23 	lds	r31, 0x2383	; 0x802383 <pxCurrentTimerList+0x1>
    2a18:	05 80       	ldd	r0, Z+5	; 0x05
    2a1a:	f6 81       	ldd	r31, Z+6	; 0x06
    2a1c:	e0 2d       	mov	r30, r0
    2a1e:	86 80       	ldd	r8, Z+6	; 0x06
    2a20:	97 80       	ldd	r9, Z+7	; 0x07

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a22:	c4 01       	movw	r24, r8
    2a24:	02 96       	adiw	r24, 0x02	; 2
    2a26:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2a2a:	d4 01       	movw	r26, r8
    2a2c:	1e 96       	adiw	r26, 0x0e	; 14
    2a2e:	8c 91       	ld	r24, X
    2a30:	1e 97       	sbiw	r26, 0x0e	; 14
    2a32:	81 30       	cpi	r24, 0x01	; 1
    2a34:	a1 f4       	brne	.+40     	; 0x2a5e <prvTimerTask+0x94>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    2a36:	1c 96       	adiw	r26, 0x0c	; 12
    2a38:	6d 91       	ld	r22, X+
    2a3a:	7c 91       	ld	r23, X
    2a3c:	1d 97       	sbiw	r26, 0x0d	; 13
    2a3e:	6c 0d       	add	r22, r12
    2a40:	7d 1d       	adc	r23, r13
    2a42:	96 01       	movw	r18, r12
    2a44:	a8 01       	movw	r20, r16
    2a46:	c4 01       	movw	r24, r8
    2a48:	91 de       	rcall	.-734    	; 0x276c <prvInsertTimerInActiveList>
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	41 f4       	brne	.+16     	; 0x2a5e <prvTimerTask+0x94>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a4e:	00 e0       	ldi	r16, 0x00	; 0
    2a50:	10 e0       	ldi	r17, 0x00	; 0
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	a6 01       	movw	r20, r12
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	c4 01       	movw	r24, r8
    2a5c:	06 df       	rcall	.-500    	; 0x286a <xTimerGenericCommand>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a5e:	d4 01       	movw	r26, r8
    2a60:	51 96       	adiw	r26, 0x11	; 17
    2a62:	ed 91       	ld	r30, X+
    2a64:	fc 91       	ld	r31, X
    2a66:	52 97       	sbiw	r26, 0x12	; 18
    2a68:	c4 01       	movw	r24, r8
    2a6a:	19 95       	eicall
    2a6c:	6b c0       	rjmp	.+214    	; 0x2b44 <prvTimerTask+0x17a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2a6e:	c1 2c       	mov	r12, r1
    2a70:	d1 2c       	mov	r13, r1
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    2a72:	b6 01       	movw	r22, r12
    2a74:	60 1b       	sub	r22, r16
    2a76:	71 0b       	sbc	r23, r17
    2a78:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <xTimerQueue>
    2a7c:	90 91 7f 23 	lds	r25, 0x237F	; 0x80237f <xTimerQueue+0x1>

				if( xTaskResumeAll() == pdFALSE )
    2a80:	86 d9       	rcall	.-3316   	; 0x1d8e <vQueueWaitForMessageRestricted>
    2a82:	ee db       	rcall	.-2084   	; 0x2260 <xTaskResumeAll>
    2a84:	81 11       	cpse	r24, r1
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    2a86:	5e c0       	rjmp	.+188    	; 0x2b44 <prvTimerTask+0x17a>
    2a88:	0e 94 41 0b 	call	0x1682	; 0x1682 <vPortYield>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    2a8c:	5b c0       	rjmp	.+182    	; 0x2b44 <prvTimerTask+0x17a>
    2a8e:	e8 db       	rcall	.-2096   	; 0x2260 <xTaskResumeAll>
    2a90:	59 c0       	rjmp	.+178    	; 0x2b44 <prvTimerTask+0x17a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	88 23       	and	r24, r24
    2a96:	0c f4       	brge	.+2      	; 0x2a9a <prvTimerTask+0xd0>
    2a98:	55 c0       	rjmp	.+170    	; 0x2b44 <prvTimerTask+0x17a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2a9a:	cc 80       	ldd	r12, Y+4	; 0x04
    2a9c:	dd 80       	ldd	r13, Y+5	; 0x05

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2a9e:	f6 01       	movw	r30, r12
    2aa0:	82 85       	ldd	r24, Z+10	; 0x0a
    2aa2:	93 85       	ldd	r25, Z+11	; 0x0b
    2aa4:	89 2b       	or	r24, r25
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2aa6:	21 f0       	breq	.+8      	; 0x2ab0 <prvTimerTask+0xe6>
    2aa8:	c6 01       	movw	r24, r12
    2aaa:	02 96       	adiw	r24, 0x02	; 2
    2aac:	0e 94 5f 0a 	call	0x14be	; 0x14be <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	06 96       	adiw	r24, 0x06	; 6
    2ab4:	1c df       	rcall	.-456    	; 0x28ee <prvSampleTimeNow>
    2ab6:	ac 01       	movw	r20, r24

			switch( xMessage.xMessageID )
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	08 2e       	mov	r0, r24
    2abc:	00 0c       	add	r0, r0
    2abe:	99 0b       	sbc	r25, r25
    2ac0:	aa 0b       	sbc	r26, r26
    2ac2:	bb 0b       	sbc	r27, r27
    2ac4:	8a 30       	cpi	r24, 0x0A	; 10
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <prvTimerTask+0x102>
    2aca:	3c c0       	rjmp	.+120    	; 0x2b44 <prvTimerTask+0x17a>
    2acc:	fc 01       	movw	r30, r24
    2ace:	88 27       	eor	r24, r24
    2ad0:	e2 50       	subi	r30, 0x02	; 2
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad6:	91 c2       	rjmp	.+1314   	; 0x2ffa <__tablejump2__>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    2ad8:	2a 81       	ldd	r18, Y+2	; 0x02
    2ada:	3b 81       	ldd	r19, Y+3	; 0x03
    2adc:	d6 01       	movw	r26, r12
    2ade:	1c 96       	adiw	r26, 0x0c	; 12
    2ae0:	6d 91       	ld	r22, X+
    2ae2:	7c 91       	ld	r23, X
    2ae4:	1d 97       	sbiw	r26, 0x0d	; 13
    2ae6:	62 0f       	add	r22, r18
    2ae8:	73 1f       	adc	r23, r19
    2aea:	c6 01       	movw	r24, r12
    2aec:	3f de       	rcall	.-898    	; 0x276c <prvInsertTimerInActiveList>
    2aee:	81 30       	cpi	r24, 0x01	; 1
    2af0:	49 f5       	brne	.+82     	; 0x2b44 <prvTimerTask+0x17a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2af2:	d6 01       	movw	r26, r12
    2af4:	51 96       	adiw	r26, 0x11	; 17
    2af6:	ed 91       	ld	r30, X+
    2af8:	fc 91       	ld	r31, X
    2afa:	52 97       	sbiw	r26, 0x12	; 18
    2afc:	c6 01       	movw	r24, r12
    2afe:	19 95       	eicall
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2b00:	f6 01       	movw	r30, r12
    2b02:	86 85       	ldd	r24, Z+14	; 0x0e
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	f1 f4       	brne	.+60     	; 0x2b44 <prvTimerTask+0x17a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2b08:	4a 81       	ldd	r20, Y+2	; 0x02
    2b0a:	5b 81       	ldd	r21, Y+3	; 0x03
    2b0c:	84 85       	ldd	r24, Z+12	; 0x0c
    2b0e:	95 85       	ldd	r25, Z+13	; 0x0d
    2b10:	48 0f       	add	r20, r24
    2b12:	59 1f       	adc	r21, r25
    2b14:	00 e0       	ldi	r16, 0x00	; 0
    2b16:	10 e0       	ldi	r17, 0x00	; 0
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	c6 01       	movw	r24, r12
    2b20:	a4 de       	rcall	.-696    	; 0x286a <xTimerGenericCommand>
    2b22:	10 c0       	rjmp	.+32     	; 0x2b44 <prvTimerTask+0x17a>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2b24:	6a 81       	ldd	r22, Y+2	; 0x02
    2b26:	7b 81       	ldd	r23, Y+3	; 0x03
    2b28:	d6 01       	movw	r26, r12
    2b2a:	1c 96       	adiw	r26, 0x0c	; 12
    2b2c:	6d 93       	st	X+, r22
    2b2e:	7c 93       	st	X, r23
    2b30:	1d 97       	sbiw	r26, 0x0d	; 13
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2b32:	64 0f       	add	r22, r20
    2b34:	75 1f       	adc	r23, r21
    2b36:	9a 01       	movw	r18, r20
    2b38:	c6 01       	movw	r24, r12
    2b3a:	18 de       	rcall	.-976    	; 0x276c <prvInsertTimerInActiveList>
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <prvTimerTask+0x17a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    2b3e:	c6 01       	movw	r24, r12
    2b40:	0e 94 00 0c 	call	0x1800	; 0x1800 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	6e 2d       	mov	r22, r14
    2b4c:	7f 2d       	mov	r23, r15
    2b4e:	80 91 7e 23 	lds	r24, 0x237E	; 0x80237e <xTimerQueue>
    2b52:	90 91 7f 23 	lds	r25, 0x237F	; 0x80237f <xTimerQueue+0x1>
    2b56:	6f d8       	rcall	.-3874   	; 0x1c36 <xQueueGenericReceive>
    2b58:	81 11       	cpse	r24, r1
    2b5a:	9b cf       	rjmp	.-202    	; 0x2a92 <prvTimerTask+0xc8>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2b5c:	41 cf       	rjmp	.-382    	; 0x29e0 <prvTimerTask+0x16>
    2b5e:	9d da       	rcall	.-2758   	; 0x209a <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2b60:	c5 01       	movw	r24, r10
    2b62:	c5 de       	rcall	.-630    	; 0x28ee <prvSampleTimeNow>
    2b64:	8c 01       	movw	r16, r24
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
		if( xTimerListsWereSwitched == pdFALSE )
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <prvTimerTask+0x1a4>
    2b6c:	80 cf       	rjmp	.-256    	; 0x2a6e <prvTimerTask+0xa4>
    2b6e:	8f cf       	rjmp	.-226    	; 0x2a8e <prvTimerTask+0xc4>

00002b70 <vCheckDoor>:
    2b70:	e0 e8       	ldi	r30, 0x80	; 128
	// Disable interrupts, just for safety
	USARTC0_CTRLA = 0;
	// 8 data bits, no parity, 1 stop bit
	USARTC0_CTRLC = USART_CHSIZE_8BIT_gc;
	// Enable receive and transmit
	USARTC0_CTRLB = USART_TXEN_bm | USART_RXEN_bm;
    2b72:	f6 e0       	ldi	r31, 0x06	; 6
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	82 83       	std	Z+2, r24	; 0x02
    2b78:	88 e1       	ldi	r24, 0x18	; 24
    2b7a:	80 8b       	std	Z+16, r24	; 0x10
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0f 2e       	mov	r0, r31
    2b80:	f0 e8       	ldi	r31, 0x80	; 128
    2b82:	cf 2e       	mov	r12, r31
    2b84:	f6 e0       	ldi	r31, 0x06	; 6
    2b86:	df 2e       	mov	r13, r31
    2b88:	f0 2d       	mov	r31, r0
    2b8a:	0f 2e       	mov	r0, r31
    2b8c:	f0 e3       	ldi	r31, 0x30	; 48
    2b8e:	ef 2e       	mov	r14, r31
    2b90:	f0 e2       	ldi	r31, 0x20	; 32
    2b92:	ff 2e       	mov	r15, r31
    2b94:	f0 2d       	mov	r31, r0
    2b96:	d0 e8       	ldi	r29, 0x80	; 128
    2b98:	0b e9       	ldi	r16, 0x9B	; 155
    2b9a:	13 e2       	ldi	r17, 0x23	; 35
    2b9c:	0f 2e       	mov	r0, r31
    2b9e:	fc e1       	ldi	r31, 0x1C	; 28
    2ba0:	8f 2e       	mov	r8, r31
    2ba2:	f0 e2       	ldi	r31, 0x20	; 32
    2ba4:	9f 2e       	mov	r9, r31
    2ba6:	f0 2d       	mov	r31, r0
    2ba8:	0f 2e       	mov	r0, r31
    2baa:	f6 e2       	ldi	r31, 0x26	; 38
    2bac:	af 2e       	mov	r10, r31
    2bae:	f0 e2       	ldi	r31, 0x20	; 32
    2bb0:	bf 2e       	mov	r11, r31
    2bb2:	f0 2d       	mov	r31, r0
    2bb4:	f6 01       	movw	r30, r12
    2bb6:	80 85       	ldd	r24, Z+8	; 0x08
    2bb8:	c1 e0       	ldi	r28, 0x01	; 1
    2bba:	28 2f       	mov	r18, r24
    2bbc:	21 70       	andi	r18, 0x01	; 1
    2bbe:	80 ff       	sbrs	r24, 0
    2bc0:	c0 e0       	ldi	r28, 0x00	; 0
    2bc2:	9c 17       	cp	r25, r28
    2bc4:	49 f1       	breq	.+82     	; 0x2c18 <vCheckDoor+0xa8>
    2bc6:	c0 93 99 23 	sts	0x2399, r28	; 0x802399 <door_open>
    2bca:	21 11       	cpse	r18, r1
    2bcc:	03 c0       	rjmp	.+6      	; 0x2bd4 <vCheckDoor+0x64>
    2bce:	8a 2d       	mov	r24, r10
    2bd0:	9b 2d       	mov	r25, r11
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <vCheckDoor+0x68>
    2bd4:	88 2d       	mov	r24, r8
    2bd6:	99 2d       	mov	r25, r9
    2bd8:	9f 93       	push	r25
    2bda:	8f 93       	push	r24
    2bdc:	ff 92       	push	r15
    2bde:	ef 92       	push	r14
    2be0:	1f 92       	push	r1
    2be2:	df 93       	push	r29
    2be4:	1f 93       	push	r17
    2be6:	0f 93       	push	r16
    2be8:	3a d3       	rcall	.+1652   	; 0x325e <snprintf>
    2bea:	26 e0       	ldi	r18, 0x06	; 6
    2bec:	30 e2       	ldi	r19, 0x20	; 32
    2bee:	40 e1       	ldi	r20, 0x10	; 16
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <xSemaphoreDoor>
    2c06:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <xSemaphoreDoor+0x1>
    2c0a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueGenericSend>
    2c0e:	8d b7       	in	r24, 0x3d	; 61
    2c10:	9e b7       	in	r25, 0x3e	; 62
    2c12:	08 96       	adiw	r24, 0x08	; 8
    2c14:	8d bf       	out	0x3d, r24	; 61
    2c16:	9e bf       	out	0x3e, r25	; 62
    2c18:	82 e3       	ldi	r24, 0x32	; 50
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9e db       	rcall	.-2244   	; 0x235a <vTaskDelay>
    2c1e:	9c 2f       	mov	r25, r28
    2c20:	c9 cf       	rjmp	.-110    	; 0x2bb4 <vCheckDoor+0x44>

00002c22 <PWM_Init>:
/* Initiate Single Slope PWM                                            */
/************************************************************************/
void PWM_Init(void)
{
	/* Set output for Buzzer */
	PORTC.DIR |= PIN0_bm;
    2c22:	e0 e4       	ldi	r30, 0x40	; 64
    2c24:	f6 e0       	ldi	r31, 0x06	; 6
    2c26:	80 81       	ld	r24, Z
    2c28:	81 60       	ori	r24, 0x01	; 1
    2c2a:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm;
    2c2c:	e0 e0       	ldi	r30, 0x00	; 0
    2c2e:	f8 e0       	ldi	r31, 0x08	; 8
    2c30:	82 e0       	ldi	r24, 0x02	; 2
    2c32:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    2c34:	86 e1       	ldi	r24, 0x16	; 22
    2c36:	81 83       	std	Z+1, r24	; 0x01

	/* Set Period */
	TCC0.PER = 1000;
    2c38:	88 ee       	ldi	r24, 0xE8	; 232
    2c3a:	93 e0       	ldi	r25, 0x03	; 3
    2c3c:	86 a3       	std	Z+38, r24	; 0x26
    2c3e:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value*/
	TCC0.CCA = 0;
    2c40:	10 a6       	std	Z+40, r1	; 0x28
    2c42:	11 a6       	std	Z+41, r1	; 0x29
    2c44:	08 95       	ret

00002c46 <reset_actuators>:
/* Resets all actuators (buzzer & LED) and counter                      */
/************************************************************************/
void reset_actuators(void)
{
	// Reset buzzer
	TCC0.CCA = 0;
    2c46:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    2c4a:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    2c4e:	e0 ee       	ldi	r30, 0xE0	; 224
    2c50:	f7 e0       	ldi	r31, 0x07	; 7
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	85 83       	std	Z+5, r24	; 0x05
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	85 83       	std	Z+5, r24	; 0x05
	// Turn off LED
	LED_Off(LED0);
	LED_Off(LED1);
	// Reset counter
	counter = 0;
    2c5a:	10 92 96 23 	sts	0x2396, r1	; 0x802396 <counter>
    2c5e:	10 92 97 23 	sts	0x2397, r1	; 0x802397 <counter+0x1>
    2c62:	08 95       	ret

00002c64 <vAlarmControl>:

/************************************************************************/
/* Task: Alarm Control                                                  */
/************************************************************************/
static portTASK_FUNCTION(vAlarmControl, pvParameters) {
	gfx_mono_draw_string("Waktu: 0            ", 0, 24, &sysfont);
    2c64:	26 e0       	ldi	r18, 0x06	; 6
    2c66:	30 e2       	ldi	r19, 0x20	; 32
    2c68:	48 e1       	ldi	r20, 0x18	; 24
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	8a e3       	ldi	r24, 0x3A	; 58
    2c6e:	90 e2       	ldi	r25, 0x20	; 32
    2c70:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
	PWM_Init();
    2c74:	d6 df       	rcall	.-84     	; 0x2c22 <PWM_Init>
		if (xSemaphoreTake(xSemaphoreDoor, portMAX_DELAY) == pdTRUE) {
			if (xSemaphoreTake(xMutexSystemActive, pdMS_TO_TICKS(250)) == pdTRUE) {
				gfx_mono_draw_string("MASUK COY       ", 0, 0, &sysfont);
				if (system_active && door_open) {
					gfx_mono_draw_string("HARUSNYA NYALA COY", 0, 0, &sysfont);
					alarm_active = true;
    2c76:	77 24       	eor	r7, r7
    2c78:	73 94       	inc	r7
				TCC0.CCA = 800; // High buzzer frequency
				LED_Toggle(LED0);
				LED_Toggle(LED1);
			}
			counter++;
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d           ", counter);
    2c7a:	0f 2e       	mov	r0, r31
    2c7c:	f7 e9       	ldi	r31, 0x97	; 151
    2c7e:	ef 2e       	mov	r14, r31
    2c80:	f0 e2       	ldi	r31, 0x20	; 32
    2c82:	ff 2e       	mov	r15, r31
    2c84:	f0 2d       	mov	r31, r0
    2c86:	68 94       	set
    2c88:	55 24       	eor	r5, r5
    2c8a:	57 f8       	bld	r5, 7
    2c8c:	cb e9       	ldi	r28, 0x9B	; 155
    2c8e:	d3 e2       	ldi	r29, 0x23	; 35
			if (counter < 10) {
				TCC0.CCA = 500; // Low buzzer frequency
				LED_On(LED0);
				LED_On(LED1);
				} else {
				TCC0.CCA = 800; // High buzzer frequency
    2c90:	c1 2c       	mov	r12, r1
    2c92:	68 94       	set
    2c94:	dd 24       	eor	r13, r13
    2c96:	d3 f8       	bld	r13, 3
    2c98:	0f 2e       	mov	r0, r31
    2c9a:	f0 e2       	ldi	r31, 0x20	; 32
    2c9c:	8f 2e       	mov	r8, r31
    2c9e:	f3 e0       	ldi	r31, 0x03	; 3
    2ca0:	9f 2e       	mov	r9, r31
    2ca2:	f0 2d       	mov	r31, r0

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2ca4:	00 ee       	ldi	r16, 0xE0	; 224
    2ca6:	17 e0       	ldi	r17, 0x07	; 7
    2ca8:	68 94       	set
    2caa:	66 24       	eor	r6, r6
    2cac:	61 f8       	bld	r6, 1
			xSemaphoreGive(xSemaphoreDoor);
		}

		if (alarm_active) {
			if (counter < 10) {
				TCC0.CCA = 500; // Low buzzer frequency
    2cae:	0f 2e       	mov	r0, r31
    2cb0:	f4 ef       	ldi	r31, 0xF4	; 244
    2cb2:	af 2e       	mov	r10, r31
    2cb4:	bb 24       	eor	r11, r11
    2cb6:	b3 94       	inc	r11
    2cb8:	f0 2d       	mov	r31, r0
static portTASK_FUNCTION(vAlarmControl, pvParameters) {
	gfx_mono_draw_string("Waktu: 0            ", 0, 24, &sysfont);
	PWM_Init();

	while (1) {
		if (xSemaphoreTake(xSemaphoreDoor, portMAX_DELAY) == pdTRUE) {
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	4f ef       	ldi	r20, 0xFF	; 255
    2cbe:	5f ef       	ldi	r21, 0xFF	; 255
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <xSemaphoreDoor>
    2cc8:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <xSemaphoreDoor+0x1>
    2ccc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xQueueGenericReceive>
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <vAlarmControl+0x72>
    2cd4:	55 c0       	rjmp	.+170    	; 0x2d80 <vAlarmControl+0x11c>
			if (xSemaphoreTake(xMutexSystemActive, pdMS_TO_TICKS(250)) == pdTRUE) {
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	4b e3       	ldi	r20, 0x3B	; 59
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <xMutexSystemActive>
    2ce4:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <xMutexSystemActive+0x1>
    2ce8:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xQueueGenericReceive>
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	e9 f5       	brne	.+122    	; 0x2d6a <vAlarmControl+0x106>
				gfx_mono_draw_string("MASUK COY       ", 0, 0, &sysfont);
    2cf0:	26 e0       	ldi	r18, 0x06	; 6
    2cf2:	30 e2       	ldi	r19, 0x20	; 32
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	8f e4       	ldi	r24, 0x4F	; 79
    2cfa:	90 e2       	ldi	r25, 0x20	; 32
    2cfc:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
				if (system_active && door_open) {
    2d00:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <system_active>
    2d04:	88 23       	and	r24, r24
    2d06:	79 f0       	breq	.+30     	; 0x2d26 <vAlarmControl+0xc2>
    2d08:	80 91 99 23 	lds	r24, 0x2399	; 0x802399 <door_open>
    2d0c:	88 23       	and	r24, r24
    2d0e:	59 f0       	breq	.+22     	; 0x2d26 <vAlarmControl+0xc2>
					gfx_mono_draw_string("HARUSNYA NYALA COY", 0, 0, &sysfont);
    2d10:	26 e0       	ldi	r18, 0x06	; 6
    2d12:	30 e2       	ldi	r19, 0x20	; 32
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	80 e6       	ldi	r24, 0x60	; 96
    2d1a:	90 e2       	ldi	r25, 0x20	; 32
    2d1c:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
					alarm_active = true;
    2d20:	70 92 98 23 	sts	0x2398, r7	; 0x802398 <alarm_active>
    2d24:	17 c0       	rjmp	.+46     	; 0x2d54 <vAlarmControl+0xf0>
					} else if (alarm_active) {
    2d26:	80 91 98 23 	lds	r24, 0x2398	; 0x802398 <alarm_active>
    2d2a:	88 23       	and	r24, r24
    2d2c:	49 f0       	breq	.+18     	; 0x2d40 <vAlarmControl+0xdc>
						gfx_mono_draw_string("JANGAN MATI COYYY", 0, 0, &sysfont);
    2d2e:	26 e0       	ldi	r18, 0x06	; 6
    2d30:	30 e2       	ldi	r19, 0x20	; 32
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	83 e7       	ldi	r24, 0x73	; 115
    2d38:	90 e2       	ldi	r25, 0x20	; 32
    2d3a:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
    2d3e:	0a c0       	rjmp	.+20     	; 0x2d54 <vAlarmControl+0xf0>
					} else {
					gfx_mono_draw_string("HARUSNYA MATI COY", 0, 0, &sysfont);
    2d40:	26 e0       	ldi	r18, 0x06	; 6
    2d42:	30 e2       	ldi	r19, 0x20	; 32
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	85 e8       	ldi	r24, 0x85	; 133
    2d4a:	90 e2       	ldi	r25, 0x20	; 32
    2d4c:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
					alarm_active = false;
    2d50:	10 92 98 23 	sts	0x2398, r1	; 0x802398 <alarm_active>
				}
				xSemaphoreGive(xMutexSystemActive);
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <xMutexSystemActive>
    2d62:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <xMutexSystemActive+0x1>
    2d66:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueGenericSend>
			}
			xSemaphoreGive(xSemaphoreDoor);
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	80 91 1b 24 	lds	r24, 0x241B	; 0x80241b <xSemaphoreDoor>
    2d78:	90 91 1c 24 	lds	r25, 0x241C	; 0x80241c <xSemaphoreDoor+0x1>
    2d7c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueGenericSend>
		}

		if (alarm_active) {
    2d80:	80 91 98 23 	lds	r24, 0x2398	; 0x802398 <alarm_active>
    2d84:	88 23       	and	r24, r24
    2d86:	91 f1       	breq	.+100    	; 0x2dec <vAlarmControl+0x188>
			if (counter < 10) {
    2d88:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <counter>
    2d8c:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <counter+0x1>
    2d90:	0a 97       	sbiw	r24, 0x0a	; 10
    2d92:	3c f4       	brge	.+14     	; 0x2da2 <vAlarmControl+0x13e>
				TCC0.CCA = 500; // Low buzzer frequency
    2d94:	f6 01       	movw	r30, r12
    2d96:	a0 a6       	std	Z+40, r10	; 0x28
    2d98:	b1 a6       	std	Z+41, r11	; 0x29
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	76 82       	std	Z+6, r7	; 0x06
    2d9e:	66 82       	std	Z+6, r6	; 0x06
    2da0:	06 c0       	rjmp	.+12     	; 0x2dae <vAlarmControl+0x14a>
				LED_On(LED0);
				LED_On(LED1);
				} else {
				TCC0.CCA = 800; // High buzzer frequency
    2da2:	f6 01       	movw	r30, r12
    2da4:	80 a6       	std	Z+40, r8	; 0x28
    2da6:	91 a6       	std	Z+41, r9	; 0x29

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2da8:	f8 01       	movw	r30, r16
    2daa:	77 82       	std	Z+7, r7	; 0x07
    2dac:	67 82       	std	Z+7, r6	; 0x07
				LED_Toggle(LED0);
				LED_Toggle(LED1);
			}
			counter++;
    2dae:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <counter>
    2db2:	90 91 97 23 	lds	r25, 0x2397	; 0x802397 <counter+0x1>
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	80 93 96 23 	sts	0x2396, r24	; 0x802396 <counter>
    2dbc:	90 93 97 23 	sts	0x2397, r25	; 0x802397 <counter+0x1>
			snprintf(strbuf, sizeof(strbuf), "Waktu: %02d           ", counter);
    2dc0:	9f 93       	push	r25
    2dc2:	8f 93       	push	r24
    2dc4:	ff 92       	push	r15
    2dc6:	ef 92       	push	r14
    2dc8:	1f 92       	push	r1
    2dca:	5f 92       	push	r5
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	46 d2       	rcall	.+1164   	; 0x325e <snprintf>
			gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    2dd2:	26 e0       	ldi	r18, 0x06	; 6
    2dd4:	30 e2       	ldi	r19, 0x20	; 32
    2dd6:	48 e1       	ldi	r20, 0x18	; 24
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	ce 01       	movw	r24, r28
    2ddc:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
    2de0:	ed b7       	in	r30, 0x3d	; 61
    2de2:	fe b7       	in	r31, 0x3e	; 62
    2de4:	38 96       	adiw	r30, 0x08	; 8
    2de6:	ed bf       	out	0x3d, r30	; 61
    2de8:	fe bf       	out	0x3e, r31	; 62
			} else {
			reset_actuators();
    2dea:	09 c0       	rjmp	.+18     	; 0x2dfe <vAlarmControl+0x19a>
    2dec:	2c df       	rcall	.-424    	; 0x2c46 <reset_actuators>
			gfx_mono_draw_string("Waktu: 0          ", 0, 24, &sysfont);
    2dee:	26 e0       	ldi	r18, 0x06	; 6
    2df0:	30 e2       	ldi	r19, 0x20	; 32
    2df2:	48 e1       	ldi	r20, 0x18	; 24
    2df4:	60 e0       	ldi	r22, 0x00	; 0
    2df6:	8e ea       	ldi	r24, 0xAE	; 174
    2df8:	90 e2       	ldi	r25, 0x20	; 32
    2dfa:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
		}

		vTaskDelay(pdMS_TO_TICKS(100));
    2dfe:	82 e3       	ldi	r24, 0x32	; 50
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	ab da       	rcall	.-2730   	; 0x235a <vTaskDelay>
	}
    2e04:	5a cf       	rjmp	.-332    	; 0x2cba <vAlarmControl+0x56>

00002e06 <vPushButton>:

/************************************************************************/
/* Task: Push Button Handling                                           */
/************************************************************************/
static portTASK_FUNCTION(vPushButton, pvParameters) {
	PORTF.DIRCLR = PIN1_bm | PIN2_bm;
    2e06:	e0 ea       	ldi	r30, 0xA0	; 160
    2e08:	f6 e0       	ldi	r31, 0x06	; 6
    2e0a:	86 e0       	ldi	r24, 0x06	; 6
    2e0c:	82 83       	std	Z+2, r24	; 0x02
	PORTF.PIN1CTRL = PORT_ISC_FALLING_gc;
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_ISC_FALLING_gc;
    2e12:	82 8b       	std	Z+18, r24	; 0x12

	gfx_mono_draw_string("Sistem Nonaktif", 0, 8, &sysfont);
    2e14:	26 e0       	ldi	r18, 0x06	; 6
    2e16:	30 e2       	ldi	r19, 0x20	; 32
    2e18:	48 e0       	ldi	r20, 0x08	; 8
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	87 ee       	ldi	r24, 0xE7	; 231
    2e1e:	90 e2       	ldi	r25, 0x20	; 32
    2e20:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>

	while (1) {
		if (!(PORTF.IN & PIN1_bm)) {  // SW1 toggle system state
    2e24:	c0 ea       	ldi	r28, 0xA0	; 160
    2e26:	d6 e0       	ldi	r29, 0x06	; 6
			if (xSemaphoreTake(xMutexSystemActive, portMAX_DELAY) == pdTRUE) {
				system_active = !system_active;
    2e28:	dd 24       	eor	r13, r13
    2e2a:	d3 94       	inc	r13
				gfx_mono_draw_string(system_active ? "Sistem Aktif    " : "Sistem Nonaktif     ", 0, 8, &sysfont);
    2e2c:	0f 2e       	mov	r0, r31
    2e2e:	f1 ec       	ldi	r31, 0xC1	; 193
    2e30:	ef 2e       	mov	r14, r31
    2e32:	f0 e2       	ldi	r31, 0x20	; 32
    2e34:	ff 2e       	mov	r15, r31
    2e36:	f0 2d       	mov	r31, r0
    2e38:	02 ed       	ldi	r16, 0xD2	; 210
    2e3a:	10 e2       	ldi	r17, 0x20	; 32
	PORTF.PIN2CTRL = PORT_ISC_FALLING_gc;

	gfx_mono_draw_string("Sistem Nonaktif", 0, 8, &sysfont);

	while (1) {
		if (!(PORTF.IN & PIN1_bm)) {  // SW1 toggle system state
    2e3c:	88 85       	ldd	r24, Y+8	; 0x08
    2e3e:	81 fd       	sbrc	r24, 1
    2e40:	34 c0       	rjmp	.+104    	; 0x2eaa <vPushButton+0xa4>
			if (xSemaphoreTake(xMutexSystemActive, portMAX_DELAY) == pdTRUE) {
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	4f ef       	ldi	r20, 0xFF	; 255
    2e46:	5f ef       	ldi	r21, 0xFF	; 255
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <xMutexSystemActive>
    2e50:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <xMutexSystemActive+0x1>
    2e54:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xQueueGenericReceive>
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	21 f5       	brne	.+72     	; 0x2ea4 <vPushButton+0x9e>
				system_active = !system_active;
    2e5c:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <system_active>
    2e60:	8d 25       	eor	r24, r13
    2e62:	80 93 9a 23 	sts	0x239A, r24	; 0x80239a <system_active>
				gfx_mono_draw_string(system_active ? "Sistem Aktif    " : "Sistem Nonaktif     ", 0, 8, &sysfont);
    2e66:	81 11       	cpse	r24, r1
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <vPushButton+0x6a>
    2e6a:	80 2f       	mov	r24, r16
    2e6c:	91 2f       	mov	r25, r17
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <vPushButton+0x6e>
    2e70:	8e 2d       	mov	r24, r14
    2e72:	9f 2d       	mov	r25, r15
    2e74:	26 e0       	ldi	r18, 0x06	; 6
    2e76:	30 e2       	ldi	r19, 0x20	; 32
    2e78:	48 e0       	ldi	r20, 0x08	; 8
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>
				if (!system_active) {
    2e80:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <system_active>
    2e84:	81 11       	cpse	r24, r1
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <vPushButton+0x88>
					reset_actuators();
    2e88:	de de       	rcall	.-580    	; 0x2c46 <reset_actuators>
					alarm_active = false;
    2e8a:	10 92 98 23 	sts	0x2398, r1	; 0x802398 <alarm_active>
				}
				xSemaphoreGive(xMutexSystemActive);
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <xMutexSystemActive>
    2e9c:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <xMutexSystemActive+0x1>
    2ea0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueGenericSend>
			}
			vTaskDelay(pdMS_TO_TICKS(100));
    2ea4:	82 e3       	ldi	r24, 0x32	; 50
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	58 da       	rcall	.-2896   	; 0x235a <vTaskDelay>
		}
		if (!(PORTF.IN & PIN2_bm)) {  // SW2 reset actuators
    2eaa:	88 85       	ldd	r24, Y+8	; 0x08
    2eac:	82 fd       	sbrc	r24, 2
    2eae:	22 c0       	rjmp	.+68     	; 0x2ef4 <vPushButton+0xee>
			if (xSemaphoreTake(xMutexSystemActive, portMAX_DELAY) == pdTRUE) {
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	4f ef       	ldi	r20, 0xFF	; 255
    2eb4:	5f ef       	ldi	r21, 0xFF	; 255
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <xMutexSystemActive>
    2ebe:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <xMutexSystemActive+0x1>
    2ec2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xQueueGenericReceive>
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	91 f4       	brne	.+36     	; 0x2eee <vPushButton+0xe8>
				if (system_active) {
    2eca:	80 91 9a 23 	lds	r24, 0x239A	; 0x80239a <system_active>
    2ece:	88 23       	and	r24, r24
    2ed0:	19 f0       	breq	.+6      	; 0x2ed8 <vPushButton+0xd2>
					alarm_active = false;
    2ed2:	10 92 98 23 	sts	0x2398, r1	; 0x802398 <alarm_active>
					reset_actuators();
    2ed6:	b7 de       	rcall	.-658    	; 0x2c46 <reset_actuators>
				}
				xSemaphoreGive(xMutexSystemActive);
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <xMutexSystemActive>
    2ee6:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <xMutexSystemActive+0x1>
    2eea:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <xQueueGenericSend>
			}
			vTaskDelay(pdMS_TO_TICKS(100));
    2eee:	82 e3       	ldi	r24, 0x32	; 50
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
		}
		vTaskDelay(pdMS_TO_TICKS(100));
    2ef2:	33 da       	rcall	.-2970   	; 0x235a <vTaskDelay>
    2ef4:	82 e3       	ldi	r24, 0x32	; 50
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	30 da       	rcall	.-2976   	; 0x235a <vTaskDelay>
	}
    2efa:	a0 cf       	rjmp	.-192    	; 0x2e3c <vPushButton+0x36>

00002efc <main>:
}

/************************************************************************/
/* Main Function                                                        */
/************************************************************************/
int main(void) {
    2efc:	af 92       	push	r10
    2efe:	bf 92       	push	r11
    2f00:	cf 92       	push	r12
    2f02:	df 92       	push	r13
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
	board_init();
    2f0a:	0e 94 48 07 	call	0xe90	; 0xe90 <board_init>
	sysclk_init();
    2f0e:	0e 94 42 04 	call	0x884	; 0x884 <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2f12:	87 e0       	ldi	r24, 0x07	; 7
    2f14:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init();
	gfx_mono_init();
    2f18:	0e 94 0f 05 	call	0xa1e	; 0xa1e <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2f1c:	80 e1       	ldi	r24, 0x10	; 16
    2f1e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	gfx_mono_draw_string("Sisnam+", 0, 0, &sysfont);
    2f22:	26 e0       	ldi	r18, 0x06	; 6
    2f24:	30 e2       	ldi	r19, 0x20	; 32
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	87 ef       	ldi	r24, 0xF7	; 247
    2f2c:	90 e2       	ldi	r25, 0x20	; 32
    2f2e:	0e 94 83 06 	call	0xd06	; 0xd06 <gfx_mono_draw_string>

	// Initialize Semaphores
	xSemaphoreDoor = xSemaphoreCreateBinary();
    2f32:	43 e0       	ldi	r20, 0x03	; 3
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <xQueueGenericCreate>
    2f3c:	80 93 1b 24 	sts	0x241B, r24	; 0x80241b <xSemaphoreDoor>
    2f40:	90 93 1c 24 	sts	0x241C, r25	; 0x80241c <xSemaphoreDoor+0x1>
	xMutexSystemActive = xSemaphoreCreateMutex();
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <xQueueCreateMutex>
    2f4a:	80 93 1d 24 	sts	0x241D, r24	; 0x80241d <xMutexSystemActive>
    2f4e:	90 93 1e 24 	sts	0x241E, r25	; 0x80241e <xMutexSystemActive+0x1>
	
	

	// Create Tasks
	xTaskCreate(vPushButton, "PushButton", 1000, NULL, tskIDLE_PRIORITY + 3, NULL);
    2f52:	a1 2c       	mov	r10, r1
    2f54:	b1 2c       	mov	r11, r1
    2f56:	c1 2c       	mov	r12, r1
    2f58:	d1 2c       	mov	r13, r1
    2f5a:	e1 2c       	mov	r14, r1
    2f5c:	f1 2c       	mov	r15, r1
    2f5e:	03 e0       	ldi	r16, 0x03	; 3
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	48 ee       	ldi	r20, 0xE8	; 232
    2f66:	53 e0       	ldi	r21, 0x03	; 3
    2f68:	6f ef       	ldi	r22, 0xFF	; 255
    2f6a:	70 e2       	ldi	r23, 0x20	; 32
    2f6c:	83 e0       	ldi	r24, 0x03	; 3
    2f6e:	97 e1       	ldi	r25, 0x17	; 23
    2f70:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xTaskGenericCreate>
	xTaskCreate(vCheckDoor, "CheckDoor", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);
    2f74:	02 e0       	ldi	r16, 0x02	; 2
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	48 ee       	ldi	r20, 0xE8	; 232
    2f7c:	53 e0       	ldi	r21, 0x03	; 3
    2f7e:	6a e0       	ldi	r22, 0x0A	; 10
    2f80:	71 e2       	ldi	r23, 0x21	; 33
    2f82:	88 eb       	ldi	r24, 0xB8	; 184
    2f84:	95 e1       	ldi	r25, 0x15	; 21
    2f86:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xTaskGenericCreate>
	xTaskCreate(vAlarmControl, "AlarmControl", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);
    2f8a:	01 e0       	ldi	r16, 0x01	; 1
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	48 ee       	ldi	r20, 0xE8	; 232
    2f92:	53 e0       	ldi	r21, 0x03	; 3
    2f94:	64 e1       	ldi	r22, 0x14	; 20
    2f96:	71 e2       	ldi	r23, 0x21	; 33
    2f98:	82 e3       	ldi	r24, 0x32	; 50
    2f9a:	96 e1       	ldi	r25, 0x16	; 22
    2f9c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xTaskGenericCreate>

	// Start Scheduler
	vTaskStartScheduler();
    2fa0:	50 d8       	rcall	.-3936   	; 0x2042 <vTaskStartScheduler>
}
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	08 95       	ret

00002fb6 <__udivmodsi4>:
    2fb6:	a1 e2       	ldi	r26, 0x21	; 33
    2fb8:	1a 2e       	mov	r1, r26
    2fba:	aa 1b       	sub	r26, r26
    2fbc:	bb 1b       	sub	r27, r27
    2fbe:	fd 01       	movw	r30, r26
    2fc0:	0d c0       	rjmp	.+26     	; 0x2fdc <__udivmodsi4_ep>

00002fc2 <__udivmodsi4_loop>:
    2fc2:	aa 1f       	adc	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	ee 1f       	adc	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	a2 17       	cp	r26, r18
    2fcc:	b3 07       	cpc	r27, r19
    2fce:	e4 07       	cpc	r30, r20
    2fd0:	f5 07       	cpc	r31, r21
    2fd2:	20 f0       	brcs	.+8      	; 0x2fdc <__udivmodsi4_ep>
    2fd4:	a2 1b       	sub	r26, r18
    2fd6:	b3 0b       	sbc	r27, r19
    2fd8:	e4 0b       	sbc	r30, r20
    2fda:	f5 0b       	sbc	r31, r21

00002fdc <__udivmodsi4_ep>:
    2fdc:	66 1f       	adc	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	88 1f       	adc	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	1a 94       	dec	r1
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <__udivmodsi4_loop>
    2fe8:	60 95       	com	r22
    2fea:	70 95       	com	r23
    2fec:	80 95       	com	r24
    2fee:	90 95       	com	r25
    2ff0:	9b 01       	movw	r18, r22
    2ff2:	ac 01       	movw	r20, r24
    2ff4:	bd 01       	movw	r22, r26
    2ff6:	cf 01       	movw	r24, r30
    2ff8:	08 95       	ret

00002ffa <__tablejump2__>:
    2ffa:	ee 0f       	add	r30, r30
    2ffc:	ff 1f       	adc	r31, r31
    2ffe:	88 1f       	adc	r24, r24
    3000:	8b bf       	out	0x3b, r24	; 59
    3002:	07 90       	elpm	r0, Z+
    3004:	f6 91       	elpm	r31, Z
    3006:	e0 2d       	mov	r30, r0
    3008:	19 94       	eijmp

0000300a <malloc>:
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	82 30       	cpi	r24, 0x02	; 2
    3014:	91 05       	cpc	r25, r1
    3016:	10 f4       	brcc	.+4      	; 0x301c <malloc+0x12>
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	e0 91 21 24 	lds	r30, 0x2421	; 0x802421 <__flp>
    3020:	f0 91 22 24 	lds	r31, 0x2422	; 0x802422 <__flp+0x1>
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	a0 e0       	ldi	r26, 0x00	; 0
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	30 97       	sbiw	r30, 0x00	; 0
    302e:	19 f1       	breq	.+70     	; 0x3076 <malloc+0x6c>
    3030:	40 81       	ld	r20, Z
    3032:	51 81       	ldd	r21, Z+1	; 0x01
    3034:	02 81       	ldd	r16, Z+2	; 0x02
    3036:	13 81       	ldd	r17, Z+3	; 0x03
    3038:	48 17       	cp	r20, r24
    303a:	59 07       	cpc	r21, r25
    303c:	c8 f0       	brcs	.+50     	; 0x3070 <malloc+0x66>
    303e:	84 17       	cp	r24, r20
    3040:	95 07       	cpc	r25, r21
    3042:	69 f4       	brne	.+26     	; 0x305e <malloc+0x54>
    3044:	10 97       	sbiw	r26, 0x00	; 0
    3046:	31 f0       	breq	.+12     	; 0x3054 <malloc+0x4a>
    3048:	12 96       	adiw	r26, 0x02	; 2
    304a:	0c 93       	st	X, r16
    304c:	12 97       	sbiw	r26, 0x02	; 2
    304e:	13 96       	adiw	r26, 0x03	; 3
    3050:	1c 93       	st	X, r17
    3052:	27 c0       	rjmp	.+78     	; 0x30a2 <malloc+0x98>
    3054:	00 93 21 24 	sts	0x2421, r16	; 0x802421 <__flp>
    3058:	10 93 22 24 	sts	0x2422, r17	; 0x802422 <__flp+0x1>
    305c:	22 c0       	rjmp	.+68     	; 0x30a2 <malloc+0x98>
    305e:	21 15       	cp	r18, r1
    3060:	31 05       	cpc	r19, r1
    3062:	19 f0       	breq	.+6      	; 0x306a <malloc+0x60>
    3064:	42 17       	cp	r20, r18
    3066:	53 07       	cpc	r21, r19
    3068:	18 f4       	brcc	.+6      	; 0x3070 <malloc+0x66>
    306a:	9a 01       	movw	r18, r20
    306c:	bd 01       	movw	r22, r26
    306e:	ef 01       	movw	r28, r30
    3070:	df 01       	movw	r26, r30
    3072:	f8 01       	movw	r30, r16
    3074:	db cf       	rjmp	.-74     	; 0x302c <malloc+0x22>
    3076:	21 15       	cp	r18, r1
    3078:	31 05       	cpc	r19, r1
    307a:	f9 f0       	breq	.+62     	; 0x30ba <malloc+0xb0>
    307c:	28 1b       	sub	r18, r24
    307e:	39 0b       	sbc	r19, r25
    3080:	24 30       	cpi	r18, 0x04	; 4
    3082:	31 05       	cpc	r19, r1
    3084:	80 f4       	brcc	.+32     	; 0x30a6 <malloc+0x9c>
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	61 15       	cp	r22, r1
    308c:	71 05       	cpc	r23, r1
    308e:	21 f0       	breq	.+8      	; 0x3098 <malloc+0x8e>
    3090:	fb 01       	movw	r30, r22
    3092:	82 83       	std	Z+2, r24	; 0x02
    3094:	93 83       	std	Z+3, r25	; 0x03
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <malloc+0x96>
    3098:	80 93 21 24 	sts	0x2421, r24	; 0x802421 <__flp>
    309c:	90 93 22 24 	sts	0x2422, r25	; 0x802422 <__flp+0x1>
    30a0:	fe 01       	movw	r30, r28
    30a2:	32 96       	adiw	r30, 0x02	; 2
    30a4:	44 c0       	rjmp	.+136    	; 0x312e <malloc+0x124>
    30a6:	fe 01       	movw	r30, r28
    30a8:	e2 0f       	add	r30, r18
    30aa:	f3 1f       	adc	r31, r19
    30ac:	81 93       	st	Z+, r24
    30ae:	91 93       	st	Z+, r25
    30b0:	22 50       	subi	r18, 0x02	; 2
    30b2:	31 09       	sbc	r19, r1
    30b4:	28 83       	st	Y, r18
    30b6:	39 83       	std	Y+1, r19	; 0x01
    30b8:	3a c0       	rjmp	.+116    	; 0x312e <malloc+0x124>
    30ba:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    30be:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    30c2:	23 2b       	or	r18, r19
    30c4:	41 f4       	brne	.+16     	; 0x30d6 <malloc+0xcc>
    30c6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    30ca:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    30ce:	20 93 1f 24 	sts	0x241F, r18	; 0x80241f <__brkval>
    30d2:	30 93 20 24 	sts	0x2420, r19	; 0x802420 <__brkval+0x1>
    30d6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    30da:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    30de:	21 15       	cp	r18, r1
    30e0:	31 05       	cpc	r19, r1
    30e2:	41 f4       	brne	.+16     	; 0x30f4 <malloc+0xea>
    30e4:	2d b7       	in	r18, 0x3d	; 61
    30e6:	3e b7       	in	r19, 0x3e	; 62
    30e8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    30ec:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    30f0:	24 1b       	sub	r18, r20
    30f2:	35 0b       	sbc	r19, r21
    30f4:	e0 91 1f 24 	lds	r30, 0x241F	; 0x80241f <__brkval>
    30f8:	f0 91 20 24 	lds	r31, 0x2420	; 0x802420 <__brkval+0x1>
    30fc:	e2 17       	cp	r30, r18
    30fe:	f3 07       	cpc	r31, r19
    3100:	a0 f4       	brcc	.+40     	; 0x312a <malloc+0x120>
    3102:	2e 1b       	sub	r18, r30
    3104:	3f 0b       	sbc	r19, r31
    3106:	28 17       	cp	r18, r24
    3108:	39 07       	cpc	r19, r25
    310a:	78 f0       	brcs	.+30     	; 0x312a <malloc+0x120>
    310c:	ac 01       	movw	r20, r24
    310e:	4e 5f       	subi	r20, 0xFE	; 254
    3110:	5f 4f       	sbci	r21, 0xFF	; 255
    3112:	24 17       	cp	r18, r20
    3114:	35 07       	cpc	r19, r21
    3116:	48 f0       	brcs	.+18     	; 0x312a <malloc+0x120>
    3118:	4e 0f       	add	r20, r30
    311a:	5f 1f       	adc	r21, r31
    311c:	40 93 1f 24 	sts	0x241F, r20	; 0x80241f <__brkval>
    3120:	50 93 20 24 	sts	0x2420, r21	; 0x802420 <__brkval+0x1>
    3124:	81 93       	st	Z+, r24
    3126:	91 93       	st	Z+, r25
    3128:	02 c0       	rjmp	.+4      	; 0x312e <malloc+0x124>
    312a:	e0 e0       	ldi	r30, 0x00	; 0
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	cf 01       	movw	r24, r30
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	08 95       	ret

0000313a <free>:
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	09 f4       	brne	.+2      	; 0x3144 <free+0xa>
    3142:	81 c0       	rjmp	.+258    	; 0x3246 <free+0x10c>
    3144:	fc 01       	movw	r30, r24
    3146:	32 97       	sbiw	r30, 0x02	; 2
    3148:	12 82       	std	Z+2, r1	; 0x02
    314a:	13 82       	std	Z+3, r1	; 0x03
    314c:	a0 91 21 24 	lds	r26, 0x2421	; 0x802421 <__flp>
    3150:	b0 91 22 24 	lds	r27, 0x2422	; 0x802422 <__flp+0x1>
    3154:	10 97       	sbiw	r26, 0x00	; 0
    3156:	81 f4       	brne	.+32     	; 0x3178 <free+0x3e>
    3158:	20 81       	ld	r18, Z
    315a:	31 81       	ldd	r19, Z+1	; 0x01
    315c:	82 0f       	add	r24, r18
    315e:	93 1f       	adc	r25, r19
    3160:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    3164:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    3168:	28 17       	cp	r18, r24
    316a:	39 07       	cpc	r19, r25
    316c:	51 f5       	brne	.+84     	; 0x31c2 <free+0x88>
    316e:	e0 93 1f 24 	sts	0x241F, r30	; 0x80241f <__brkval>
    3172:	f0 93 20 24 	sts	0x2420, r31	; 0x802420 <__brkval+0x1>
    3176:	67 c0       	rjmp	.+206    	; 0x3246 <free+0x10c>
    3178:	ed 01       	movw	r28, r26
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	ce 17       	cp	r28, r30
    3180:	df 07       	cpc	r29, r31
    3182:	40 f4       	brcc	.+16     	; 0x3194 <free+0x5a>
    3184:	4a 81       	ldd	r20, Y+2	; 0x02
    3186:	5b 81       	ldd	r21, Y+3	; 0x03
    3188:	9e 01       	movw	r18, r28
    318a:	41 15       	cp	r20, r1
    318c:	51 05       	cpc	r21, r1
    318e:	f1 f0       	breq	.+60     	; 0x31cc <free+0x92>
    3190:	ea 01       	movw	r28, r20
    3192:	f5 cf       	rjmp	.-22     	; 0x317e <free+0x44>
    3194:	c2 83       	std	Z+2, r28	; 0x02
    3196:	d3 83       	std	Z+3, r29	; 0x03
    3198:	40 81       	ld	r20, Z
    319a:	51 81       	ldd	r21, Z+1	; 0x01
    319c:	84 0f       	add	r24, r20
    319e:	95 1f       	adc	r25, r21
    31a0:	c8 17       	cp	r28, r24
    31a2:	d9 07       	cpc	r29, r25
    31a4:	59 f4       	brne	.+22     	; 0x31bc <free+0x82>
    31a6:	88 81       	ld	r24, Y
    31a8:	99 81       	ldd	r25, Y+1	; 0x01
    31aa:	84 0f       	add	r24, r20
    31ac:	95 1f       	adc	r25, r21
    31ae:	02 96       	adiw	r24, 0x02	; 2
    31b0:	80 83       	st	Z, r24
    31b2:	91 83       	std	Z+1, r25	; 0x01
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	82 83       	std	Z+2, r24	; 0x02
    31ba:	93 83       	std	Z+3, r25	; 0x03
    31bc:	21 15       	cp	r18, r1
    31be:	31 05       	cpc	r19, r1
    31c0:	29 f4       	brne	.+10     	; 0x31cc <free+0x92>
    31c2:	e0 93 21 24 	sts	0x2421, r30	; 0x802421 <__flp>
    31c6:	f0 93 22 24 	sts	0x2422, r31	; 0x802422 <__flp+0x1>
    31ca:	3d c0       	rjmp	.+122    	; 0x3246 <free+0x10c>
    31cc:	e9 01       	movw	r28, r18
    31ce:	ea 83       	std	Y+2, r30	; 0x02
    31d0:	fb 83       	std	Y+3, r31	; 0x03
    31d2:	49 91       	ld	r20, Y+
    31d4:	59 91       	ld	r21, Y+
    31d6:	c4 0f       	add	r28, r20
    31d8:	d5 1f       	adc	r29, r21
    31da:	ec 17       	cp	r30, r28
    31dc:	fd 07       	cpc	r31, r29
    31de:	61 f4       	brne	.+24     	; 0x31f8 <free+0xbe>
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	84 0f       	add	r24, r20
    31e6:	95 1f       	adc	r25, r21
    31e8:	02 96       	adiw	r24, 0x02	; 2
    31ea:	e9 01       	movw	r28, r18
    31ec:	88 83       	st	Y, r24
    31ee:	99 83       	std	Y+1, r25	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	8a 83       	std	Y+2, r24	; 0x02
    31f6:	9b 83       	std	Y+3, r25	; 0x03
    31f8:	e0 e0       	ldi	r30, 0x00	; 0
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	12 96       	adiw	r26, 0x02	; 2
    31fe:	8d 91       	ld	r24, X+
    3200:	9c 91       	ld	r25, X
    3202:	13 97       	sbiw	r26, 0x03	; 3
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	19 f0       	breq	.+6      	; 0x320e <free+0xd4>
    3208:	fd 01       	movw	r30, r26
    320a:	dc 01       	movw	r26, r24
    320c:	f7 cf       	rjmp	.-18     	; 0x31fc <free+0xc2>
    320e:	8d 91       	ld	r24, X+
    3210:	9c 91       	ld	r25, X
    3212:	11 97       	sbiw	r26, 0x01	; 1
    3214:	9d 01       	movw	r18, r26
    3216:	2e 5f       	subi	r18, 0xFE	; 254
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	82 0f       	add	r24, r18
    321c:	93 1f       	adc	r25, r19
    321e:	20 91 1f 24 	lds	r18, 0x241F	; 0x80241f <__brkval>
    3222:	30 91 20 24 	lds	r19, 0x2420	; 0x802420 <__brkval+0x1>
    3226:	28 17       	cp	r18, r24
    3228:	39 07       	cpc	r19, r25
    322a:	69 f4       	brne	.+26     	; 0x3246 <free+0x10c>
    322c:	30 97       	sbiw	r30, 0x00	; 0
    322e:	29 f4       	brne	.+10     	; 0x323a <free+0x100>
    3230:	10 92 21 24 	sts	0x2421, r1	; 0x802421 <__flp>
    3234:	10 92 22 24 	sts	0x2422, r1	; 0x802422 <__flp+0x1>
    3238:	02 c0       	rjmp	.+4      	; 0x323e <free+0x104>
    323a:	12 82       	std	Z+2, r1	; 0x02
    323c:	13 82       	std	Z+3, r1	; 0x03
    323e:	a0 93 1f 24 	sts	0x241F, r26	; 0x80241f <__brkval>
    3242:	b0 93 20 24 	sts	0x2420, r27	; 0x802420 <__brkval+0x1>
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	08 95       	ret

0000324c <memcpy>:
    324c:	fb 01       	movw	r30, r22
    324e:	dc 01       	movw	r26, r24
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <memcpy+0xa>
    3252:	01 90       	ld	r0, Z+
    3254:	0d 92       	st	X+, r0
    3256:	41 50       	subi	r20, 0x01	; 1
    3258:	50 40       	sbci	r21, 0x00	; 0
    325a:	d8 f7       	brcc	.-10     	; 0x3252 <memcpy+0x6>
    325c:	08 95       	ret

0000325e <snprintf>:
    325e:	0f 93       	push	r16
    3260:	1f 93       	push	r17
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	2e 97       	sbiw	r28, 0x0e	; 14
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0e 89       	ldd	r16, Y+22	; 0x16
    3272:	1f 89       	ldd	r17, Y+23	; 0x17
    3274:	88 8d       	ldd	r24, Y+24	; 0x18
    3276:	99 8d       	ldd	r25, Y+25	; 0x19
    3278:	26 e0       	ldi	r18, 0x06	; 6
    327a:	2c 83       	std	Y+4, r18	; 0x04
    327c:	09 83       	std	Y+1, r16	; 0x01
    327e:	1a 83       	std	Y+2, r17	; 0x02
    3280:	97 ff       	sbrs	r25, 7
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <snprintf+0x2a>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e8       	ldi	r25, 0x80	; 128
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	ae 01       	movw	r20, r28
    3290:	44 5e       	subi	r20, 0xE4	; 228
    3292:	5f 4f       	sbci	r21, 0xFF	; 255
    3294:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3296:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3298:	ce 01       	movw	r24, r28
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	16 d0       	rcall	.+44     	; 0x32ca <vfprintf>
    329e:	4d 81       	ldd	r20, Y+5	; 0x05
    32a0:	5e 81       	ldd	r21, Y+6	; 0x06
    32a2:	57 fd       	sbrc	r21, 7
    32a4:	0a c0       	rjmp	.+20     	; 0x32ba <snprintf+0x5c>
    32a6:	2f 81       	ldd	r18, Y+7	; 0x07
    32a8:	38 85       	ldd	r19, Y+8	; 0x08
    32aa:	42 17       	cp	r20, r18
    32ac:	53 07       	cpc	r21, r19
    32ae:	0c f4       	brge	.+2      	; 0x32b2 <snprintf+0x54>
    32b0:	9a 01       	movw	r18, r20
    32b2:	f8 01       	movw	r30, r16
    32b4:	e2 0f       	add	r30, r18
    32b6:	f3 1f       	adc	r31, r19
    32b8:	10 82       	st	Z, r1
    32ba:	2e 96       	adiw	r28, 0x0e	; 14
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	08 95       	ret

000032ca <vfprintf>:
    32ca:	2f 92       	push	r2
    32cc:	3f 92       	push	r3
    32ce:	4f 92       	push	r4
    32d0:	5f 92       	push	r5
    32d2:	6f 92       	push	r6
    32d4:	7f 92       	push	r7
    32d6:	8f 92       	push	r8
    32d8:	9f 92       	push	r9
    32da:	af 92       	push	r10
    32dc:	bf 92       	push	r11
    32de:	cf 92       	push	r12
    32e0:	df 92       	push	r13
    32e2:	ef 92       	push	r14
    32e4:	ff 92       	push	r15
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	cf 93       	push	r28
    32ec:	df 93       	push	r29
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	2b 97       	sbiw	r28, 0x0b	; 11
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	6c 01       	movw	r12, r24
    32fa:	7b 01       	movw	r14, r22
    32fc:	8a 01       	movw	r16, r20
    32fe:	fc 01       	movw	r30, r24
    3300:	16 82       	std	Z+6, r1	; 0x06
    3302:	17 82       	std	Z+7, r1	; 0x07
    3304:	83 81       	ldd	r24, Z+3	; 0x03
    3306:	81 ff       	sbrs	r24, 1
    3308:	bf c1       	rjmp	.+894    	; 0x3688 <vfprintf+0x3be>
    330a:	ce 01       	movw	r24, r28
    330c:	01 96       	adiw	r24, 0x01	; 1
    330e:	3c 01       	movw	r6, r24
    3310:	f6 01       	movw	r30, r12
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	f7 01       	movw	r30, r14
    3316:	93 fd       	sbrc	r25, 3
    3318:	85 91       	lpm	r24, Z+
    331a:	93 ff       	sbrs	r25, 3
    331c:	81 91       	ld	r24, Z+
    331e:	7f 01       	movw	r14, r30
    3320:	88 23       	and	r24, r24
    3322:	09 f4       	brne	.+2      	; 0x3326 <vfprintf+0x5c>
    3324:	ad c1       	rjmp	.+858    	; 0x3680 <vfprintf+0x3b6>
    3326:	85 32       	cpi	r24, 0x25	; 37
    3328:	39 f4       	brne	.+14     	; 0x3338 <vfprintf+0x6e>
    332a:	93 fd       	sbrc	r25, 3
    332c:	85 91       	lpm	r24, Z+
    332e:	93 ff       	sbrs	r25, 3
    3330:	81 91       	ld	r24, Z+
    3332:	7f 01       	movw	r14, r30
    3334:	85 32       	cpi	r24, 0x25	; 37
    3336:	21 f4       	brne	.+8      	; 0x3340 <vfprintf+0x76>
    3338:	b6 01       	movw	r22, r12
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	d3 d1       	rcall	.+934    	; 0x36e4 <fputc>
    333e:	e8 cf       	rjmp	.-48     	; 0x3310 <vfprintf+0x46>
    3340:	91 2c       	mov	r9, r1
    3342:	21 2c       	mov	r2, r1
    3344:	31 2c       	mov	r3, r1
    3346:	ff e1       	ldi	r31, 0x1F	; 31
    3348:	f3 15       	cp	r31, r3
    334a:	d8 f0       	brcs	.+54     	; 0x3382 <vfprintf+0xb8>
    334c:	8b 32       	cpi	r24, 0x2B	; 43
    334e:	79 f0       	breq	.+30     	; 0x336e <vfprintf+0xa4>
    3350:	38 f4       	brcc	.+14     	; 0x3360 <vfprintf+0x96>
    3352:	80 32       	cpi	r24, 0x20	; 32
    3354:	79 f0       	breq	.+30     	; 0x3374 <vfprintf+0xaa>
    3356:	83 32       	cpi	r24, 0x23	; 35
    3358:	a1 f4       	brne	.+40     	; 0x3382 <vfprintf+0xb8>
    335a:	23 2d       	mov	r18, r3
    335c:	20 61       	ori	r18, 0x10	; 16
    335e:	1d c0       	rjmp	.+58     	; 0x339a <vfprintf+0xd0>
    3360:	8d 32       	cpi	r24, 0x2D	; 45
    3362:	61 f0       	breq	.+24     	; 0x337c <vfprintf+0xb2>
    3364:	80 33       	cpi	r24, 0x30	; 48
    3366:	69 f4       	brne	.+26     	; 0x3382 <vfprintf+0xb8>
    3368:	23 2d       	mov	r18, r3
    336a:	21 60       	ori	r18, 0x01	; 1
    336c:	16 c0       	rjmp	.+44     	; 0x339a <vfprintf+0xd0>
    336e:	83 2d       	mov	r24, r3
    3370:	82 60       	ori	r24, 0x02	; 2
    3372:	38 2e       	mov	r3, r24
    3374:	e3 2d       	mov	r30, r3
    3376:	e4 60       	ori	r30, 0x04	; 4
    3378:	3e 2e       	mov	r3, r30
    337a:	2a c0       	rjmp	.+84     	; 0x33d0 <vfprintf+0x106>
    337c:	f3 2d       	mov	r31, r3
    337e:	f8 60       	ori	r31, 0x08	; 8
    3380:	1d c0       	rjmp	.+58     	; 0x33bc <vfprintf+0xf2>
    3382:	37 fc       	sbrc	r3, 7
    3384:	2d c0       	rjmp	.+90     	; 0x33e0 <vfprintf+0x116>
    3386:	20 ed       	ldi	r18, 0xD0	; 208
    3388:	28 0f       	add	r18, r24
    338a:	2a 30       	cpi	r18, 0x0A	; 10
    338c:	40 f0       	brcs	.+16     	; 0x339e <vfprintf+0xd4>
    338e:	8e 32       	cpi	r24, 0x2E	; 46
    3390:	b9 f4       	brne	.+46     	; 0x33c0 <vfprintf+0xf6>
    3392:	36 fc       	sbrc	r3, 6
    3394:	75 c1       	rjmp	.+746    	; 0x3680 <vfprintf+0x3b6>
    3396:	23 2d       	mov	r18, r3
    3398:	20 64       	ori	r18, 0x40	; 64
    339a:	32 2e       	mov	r3, r18
    339c:	19 c0       	rjmp	.+50     	; 0x33d0 <vfprintf+0x106>
    339e:	36 fe       	sbrs	r3, 6
    33a0:	06 c0       	rjmp	.+12     	; 0x33ae <vfprintf+0xe4>
    33a2:	8a e0       	ldi	r24, 0x0A	; 10
    33a4:	98 9e       	mul	r9, r24
    33a6:	20 0d       	add	r18, r0
    33a8:	11 24       	eor	r1, r1
    33aa:	92 2e       	mov	r9, r18
    33ac:	11 c0       	rjmp	.+34     	; 0x33d0 <vfprintf+0x106>
    33ae:	ea e0       	ldi	r30, 0x0A	; 10
    33b0:	2e 9e       	mul	r2, r30
    33b2:	20 0d       	add	r18, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	22 2e       	mov	r2, r18
    33b8:	f3 2d       	mov	r31, r3
    33ba:	f0 62       	ori	r31, 0x20	; 32
    33bc:	3f 2e       	mov	r3, r31
    33be:	08 c0       	rjmp	.+16     	; 0x33d0 <vfprintf+0x106>
    33c0:	8c 36       	cpi	r24, 0x6C	; 108
    33c2:	21 f4       	brne	.+8      	; 0x33cc <vfprintf+0x102>
    33c4:	83 2d       	mov	r24, r3
    33c6:	80 68       	ori	r24, 0x80	; 128
    33c8:	38 2e       	mov	r3, r24
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <vfprintf+0x106>
    33cc:	88 36       	cpi	r24, 0x68	; 104
    33ce:	41 f4       	brne	.+16     	; 0x33e0 <vfprintf+0x116>
    33d0:	f7 01       	movw	r30, r14
    33d2:	93 fd       	sbrc	r25, 3
    33d4:	85 91       	lpm	r24, Z+
    33d6:	93 ff       	sbrs	r25, 3
    33d8:	81 91       	ld	r24, Z+
    33da:	7f 01       	movw	r14, r30
    33dc:	81 11       	cpse	r24, r1
    33de:	b3 cf       	rjmp	.-154    	; 0x3346 <vfprintf+0x7c>
    33e0:	98 2f       	mov	r25, r24
    33e2:	9f 7d       	andi	r25, 0xDF	; 223
    33e4:	95 54       	subi	r25, 0x45	; 69
    33e6:	93 30       	cpi	r25, 0x03	; 3
    33e8:	28 f4       	brcc	.+10     	; 0x33f4 <vfprintf+0x12a>
    33ea:	0c 5f       	subi	r16, 0xFC	; 252
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	9f e3       	ldi	r25, 0x3F	; 63
    33f0:	99 83       	std	Y+1, r25	; 0x01
    33f2:	0d c0       	rjmp	.+26     	; 0x340e <vfprintf+0x144>
    33f4:	83 36       	cpi	r24, 0x63	; 99
    33f6:	31 f0       	breq	.+12     	; 0x3404 <vfprintf+0x13a>
    33f8:	83 37       	cpi	r24, 0x73	; 115
    33fa:	71 f0       	breq	.+28     	; 0x3418 <vfprintf+0x14e>
    33fc:	83 35       	cpi	r24, 0x53	; 83
    33fe:	09 f0       	breq	.+2      	; 0x3402 <vfprintf+0x138>
    3400:	55 c0       	rjmp	.+170    	; 0x34ac <vfprintf+0x1e2>
    3402:	20 c0       	rjmp	.+64     	; 0x3444 <vfprintf+0x17a>
    3404:	f8 01       	movw	r30, r16
    3406:	80 81       	ld	r24, Z
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	0e 5f       	subi	r16, 0xFE	; 254
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	88 24       	eor	r8, r8
    3410:	83 94       	inc	r8
    3412:	91 2c       	mov	r9, r1
    3414:	53 01       	movw	r10, r6
    3416:	12 c0       	rjmp	.+36     	; 0x343c <vfprintf+0x172>
    3418:	28 01       	movw	r4, r16
    341a:	f2 e0       	ldi	r31, 0x02	; 2
    341c:	4f 0e       	add	r4, r31
    341e:	51 1c       	adc	r5, r1
    3420:	f8 01       	movw	r30, r16
    3422:	a0 80       	ld	r10, Z
    3424:	b1 80       	ldd	r11, Z+1	; 0x01
    3426:	36 fe       	sbrs	r3, 6
    3428:	03 c0       	rjmp	.+6      	; 0x3430 <vfprintf+0x166>
    342a:	69 2d       	mov	r22, r9
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <vfprintf+0x16a>
    3430:	6f ef       	ldi	r22, 0xFF	; 255
    3432:	7f ef       	ldi	r23, 0xFF	; 255
    3434:	c5 01       	movw	r24, r10
    3436:	4b d1       	rcall	.+662    	; 0x36ce <strnlen>
    3438:	4c 01       	movw	r8, r24
    343a:	82 01       	movw	r16, r4
    343c:	f3 2d       	mov	r31, r3
    343e:	ff 77       	andi	r31, 0x7F	; 127
    3440:	3f 2e       	mov	r3, r31
    3442:	15 c0       	rjmp	.+42     	; 0x346e <vfprintf+0x1a4>
    3444:	28 01       	movw	r4, r16
    3446:	22 e0       	ldi	r18, 0x02	; 2
    3448:	42 0e       	add	r4, r18
    344a:	51 1c       	adc	r5, r1
    344c:	f8 01       	movw	r30, r16
    344e:	a0 80       	ld	r10, Z
    3450:	b1 80       	ldd	r11, Z+1	; 0x01
    3452:	36 fe       	sbrs	r3, 6
    3454:	03 c0       	rjmp	.+6      	; 0x345c <vfprintf+0x192>
    3456:	69 2d       	mov	r22, r9
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <vfprintf+0x196>
    345c:	6f ef       	ldi	r22, 0xFF	; 255
    345e:	7f ef       	ldi	r23, 0xFF	; 255
    3460:	c5 01       	movw	r24, r10
    3462:	2a d1       	rcall	.+596    	; 0x36b8 <strnlen_P>
    3464:	4c 01       	movw	r8, r24
    3466:	f3 2d       	mov	r31, r3
    3468:	f0 68       	ori	r31, 0x80	; 128
    346a:	3f 2e       	mov	r3, r31
    346c:	82 01       	movw	r16, r4
    346e:	33 fc       	sbrc	r3, 3
    3470:	19 c0       	rjmp	.+50     	; 0x34a4 <vfprintf+0x1da>
    3472:	82 2d       	mov	r24, r2
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	88 16       	cp	r8, r24
    3478:	99 06       	cpc	r9, r25
    347a:	a0 f4       	brcc	.+40     	; 0x34a4 <vfprintf+0x1da>
    347c:	b6 01       	movw	r22, r12
    347e:	80 e2       	ldi	r24, 0x20	; 32
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	30 d1       	rcall	.+608    	; 0x36e4 <fputc>
    3484:	2a 94       	dec	r2
    3486:	f5 cf       	rjmp	.-22     	; 0x3472 <vfprintf+0x1a8>
    3488:	f5 01       	movw	r30, r10
    348a:	37 fc       	sbrc	r3, 7
    348c:	85 91       	lpm	r24, Z+
    348e:	37 fe       	sbrs	r3, 7
    3490:	81 91       	ld	r24, Z+
    3492:	5f 01       	movw	r10, r30
    3494:	b6 01       	movw	r22, r12
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	25 d1       	rcall	.+586    	; 0x36e4 <fputc>
    349a:	21 10       	cpse	r2, r1
    349c:	2a 94       	dec	r2
    349e:	21 e0       	ldi	r18, 0x01	; 1
    34a0:	82 1a       	sub	r8, r18
    34a2:	91 08       	sbc	r9, r1
    34a4:	81 14       	cp	r8, r1
    34a6:	91 04       	cpc	r9, r1
    34a8:	79 f7       	brne	.-34     	; 0x3488 <vfprintf+0x1be>
    34aa:	e1 c0       	rjmp	.+450    	; 0x366e <vfprintf+0x3a4>
    34ac:	84 36       	cpi	r24, 0x64	; 100
    34ae:	11 f0       	breq	.+4      	; 0x34b4 <vfprintf+0x1ea>
    34b0:	89 36       	cpi	r24, 0x69	; 105
    34b2:	39 f5       	brne	.+78     	; 0x3502 <vfprintf+0x238>
    34b4:	f8 01       	movw	r30, r16
    34b6:	37 fe       	sbrs	r3, 7
    34b8:	07 c0       	rjmp	.+14     	; 0x34c8 <vfprintf+0x1fe>
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	0c 5f       	subi	r16, 0xFC	; 252
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <vfprintf+0x20e>
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	07 2e       	mov	r0, r23
    34ce:	00 0c       	add	r0, r0
    34d0:	88 0b       	sbc	r24, r24
    34d2:	99 0b       	sbc	r25, r25
    34d4:	0e 5f       	subi	r16, 0xFE	; 254
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	f3 2d       	mov	r31, r3
    34da:	ff 76       	andi	r31, 0x6F	; 111
    34dc:	3f 2e       	mov	r3, r31
    34de:	97 ff       	sbrs	r25, 7
    34e0:	09 c0       	rjmp	.+18     	; 0x34f4 <vfprintf+0x22a>
    34e2:	90 95       	com	r25
    34e4:	80 95       	com	r24
    34e6:	70 95       	com	r23
    34e8:	61 95       	neg	r22
    34ea:	7f 4f       	sbci	r23, 0xFF	; 255
    34ec:	8f 4f       	sbci	r24, 0xFF	; 255
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	f0 68       	ori	r31, 0x80	; 128
    34f2:	3f 2e       	mov	r3, r31
    34f4:	2a e0       	ldi	r18, 0x0A	; 10
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	a3 01       	movw	r20, r6
    34fa:	30 d1       	rcall	.+608    	; 0x375c <__ultoa_invert>
    34fc:	88 2e       	mov	r8, r24
    34fe:	86 18       	sub	r8, r6
    3500:	44 c0       	rjmp	.+136    	; 0x358a <vfprintf+0x2c0>
    3502:	85 37       	cpi	r24, 0x75	; 117
    3504:	31 f4       	brne	.+12     	; 0x3512 <vfprintf+0x248>
    3506:	23 2d       	mov	r18, r3
    3508:	2f 7e       	andi	r18, 0xEF	; 239
    350a:	b2 2e       	mov	r11, r18
    350c:	2a e0       	ldi	r18, 0x0A	; 10
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	25 c0       	rjmp	.+74     	; 0x355c <vfprintf+0x292>
    3512:	93 2d       	mov	r25, r3
    3514:	99 7f       	andi	r25, 0xF9	; 249
    3516:	b9 2e       	mov	r11, r25
    3518:	8f 36       	cpi	r24, 0x6F	; 111
    351a:	c1 f0       	breq	.+48     	; 0x354c <vfprintf+0x282>
    351c:	18 f4       	brcc	.+6      	; 0x3524 <vfprintf+0x25a>
    351e:	88 35       	cpi	r24, 0x58	; 88
    3520:	79 f0       	breq	.+30     	; 0x3540 <vfprintf+0x276>
    3522:	ae c0       	rjmp	.+348    	; 0x3680 <vfprintf+0x3b6>
    3524:	80 37       	cpi	r24, 0x70	; 112
    3526:	19 f0       	breq	.+6      	; 0x352e <vfprintf+0x264>
    3528:	88 37       	cpi	r24, 0x78	; 120
    352a:	21 f0       	breq	.+8      	; 0x3534 <vfprintf+0x26a>
    352c:	a9 c0       	rjmp	.+338    	; 0x3680 <vfprintf+0x3b6>
    352e:	e9 2f       	mov	r30, r25
    3530:	e0 61       	ori	r30, 0x10	; 16
    3532:	be 2e       	mov	r11, r30
    3534:	b4 fe       	sbrs	r11, 4
    3536:	0d c0       	rjmp	.+26     	; 0x3552 <vfprintf+0x288>
    3538:	fb 2d       	mov	r31, r11
    353a:	f4 60       	ori	r31, 0x04	; 4
    353c:	bf 2e       	mov	r11, r31
    353e:	09 c0       	rjmp	.+18     	; 0x3552 <vfprintf+0x288>
    3540:	34 fe       	sbrs	r3, 4
    3542:	0a c0       	rjmp	.+20     	; 0x3558 <vfprintf+0x28e>
    3544:	29 2f       	mov	r18, r25
    3546:	26 60       	ori	r18, 0x06	; 6
    3548:	b2 2e       	mov	r11, r18
    354a:	06 c0       	rjmp	.+12     	; 0x3558 <vfprintf+0x28e>
    354c:	28 e0       	ldi	r18, 0x08	; 8
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	05 c0       	rjmp	.+10     	; 0x355c <vfprintf+0x292>
    3552:	20 e1       	ldi	r18, 0x10	; 16
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	02 c0       	rjmp	.+4      	; 0x355c <vfprintf+0x292>
    3558:	20 e1       	ldi	r18, 0x10	; 16
    355a:	32 e0       	ldi	r19, 0x02	; 2
    355c:	f8 01       	movw	r30, r16
    355e:	b7 fe       	sbrs	r11, 7
    3560:	07 c0       	rjmp	.+14     	; 0x3570 <vfprintf+0x2a6>
    3562:	60 81       	ld	r22, Z
    3564:	71 81       	ldd	r23, Z+1	; 0x01
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	0c 5f       	subi	r16, 0xFC	; 252
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	06 c0       	rjmp	.+12     	; 0x357c <vfprintf+0x2b2>
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 5f       	subi	r16, 0xFE	; 254
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	a3 01       	movw	r20, r6
    357e:	ee d0       	rcall	.+476    	; 0x375c <__ultoa_invert>
    3580:	88 2e       	mov	r8, r24
    3582:	86 18       	sub	r8, r6
    3584:	fb 2d       	mov	r31, r11
    3586:	ff 77       	andi	r31, 0x7F	; 127
    3588:	3f 2e       	mov	r3, r31
    358a:	36 fe       	sbrs	r3, 6
    358c:	0d c0       	rjmp	.+26     	; 0x35a8 <vfprintf+0x2de>
    358e:	23 2d       	mov	r18, r3
    3590:	2e 7f       	andi	r18, 0xFE	; 254
    3592:	a2 2e       	mov	r10, r18
    3594:	89 14       	cp	r8, r9
    3596:	58 f4       	brcc	.+22     	; 0x35ae <vfprintf+0x2e4>
    3598:	34 fe       	sbrs	r3, 4
    359a:	0b c0       	rjmp	.+22     	; 0x35b2 <vfprintf+0x2e8>
    359c:	32 fc       	sbrc	r3, 2
    359e:	09 c0       	rjmp	.+18     	; 0x35b2 <vfprintf+0x2e8>
    35a0:	83 2d       	mov	r24, r3
    35a2:	8e 7e       	andi	r24, 0xEE	; 238
    35a4:	a8 2e       	mov	r10, r24
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <vfprintf+0x2e8>
    35a8:	b8 2c       	mov	r11, r8
    35aa:	a3 2c       	mov	r10, r3
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <vfprintf+0x2ea>
    35ae:	b8 2c       	mov	r11, r8
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <vfprintf+0x2ea>
    35b2:	b9 2c       	mov	r11, r9
    35b4:	a4 fe       	sbrs	r10, 4
    35b6:	0f c0       	rjmp	.+30     	; 0x35d6 <vfprintf+0x30c>
    35b8:	fe 01       	movw	r30, r28
    35ba:	e8 0d       	add	r30, r8
    35bc:	f1 1d       	adc	r31, r1
    35be:	80 81       	ld	r24, Z
    35c0:	80 33       	cpi	r24, 0x30	; 48
    35c2:	21 f4       	brne	.+8      	; 0x35cc <vfprintf+0x302>
    35c4:	9a 2d       	mov	r25, r10
    35c6:	99 7e       	andi	r25, 0xE9	; 233
    35c8:	a9 2e       	mov	r10, r25
    35ca:	09 c0       	rjmp	.+18     	; 0x35de <vfprintf+0x314>
    35cc:	a2 fe       	sbrs	r10, 2
    35ce:	06 c0       	rjmp	.+12     	; 0x35dc <vfprintf+0x312>
    35d0:	b3 94       	inc	r11
    35d2:	b3 94       	inc	r11
    35d4:	04 c0       	rjmp	.+8      	; 0x35de <vfprintf+0x314>
    35d6:	8a 2d       	mov	r24, r10
    35d8:	86 78       	andi	r24, 0x86	; 134
    35da:	09 f0       	breq	.+2      	; 0x35de <vfprintf+0x314>
    35dc:	b3 94       	inc	r11
    35de:	a3 fc       	sbrc	r10, 3
    35e0:	10 c0       	rjmp	.+32     	; 0x3602 <vfprintf+0x338>
    35e2:	a0 fe       	sbrs	r10, 0
    35e4:	06 c0       	rjmp	.+12     	; 0x35f2 <vfprintf+0x328>
    35e6:	b2 14       	cp	r11, r2
    35e8:	80 f4       	brcc	.+32     	; 0x360a <vfprintf+0x340>
    35ea:	28 0c       	add	r2, r8
    35ec:	92 2c       	mov	r9, r2
    35ee:	9b 18       	sub	r9, r11
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <vfprintf+0x342>
    35f2:	b2 14       	cp	r11, r2
    35f4:	58 f4       	brcc	.+22     	; 0x360c <vfprintf+0x342>
    35f6:	b6 01       	movw	r22, r12
    35f8:	80 e2       	ldi	r24, 0x20	; 32
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	73 d0       	rcall	.+230    	; 0x36e4 <fputc>
    35fe:	b3 94       	inc	r11
    3600:	f8 cf       	rjmp	.-16     	; 0x35f2 <vfprintf+0x328>
    3602:	b2 14       	cp	r11, r2
    3604:	18 f4       	brcc	.+6      	; 0x360c <vfprintf+0x342>
    3606:	2b 18       	sub	r2, r11
    3608:	02 c0       	rjmp	.+4      	; 0x360e <vfprintf+0x344>
    360a:	98 2c       	mov	r9, r8
    360c:	21 2c       	mov	r2, r1
    360e:	a4 fe       	sbrs	r10, 4
    3610:	0f c0       	rjmp	.+30     	; 0x3630 <vfprintf+0x366>
    3612:	b6 01       	movw	r22, r12
    3614:	80 e3       	ldi	r24, 0x30	; 48
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	65 d0       	rcall	.+202    	; 0x36e4 <fputc>
    361a:	a2 fe       	sbrs	r10, 2
    361c:	16 c0       	rjmp	.+44     	; 0x364a <vfprintf+0x380>
    361e:	a1 fc       	sbrc	r10, 1
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <vfprintf+0x35e>
    3622:	88 e7       	ldi	r24, 0x78	; 120
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	02 c0       	rjmp	.+4      	; 0x362c <vfprintf+0x362>
    3628:	88 e5       	ldi	r24, 0x58	; 88
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	b6 01       	movw	r22, r12
    362e:	0c c0       	rjmp	.+24     	; 0x3648 <vfprintf+0x37e>
    3630:	8a 2d       	mov	r24, r10
    3632:	86 78       	andi	r24, 0x86	; 134
    3634:	51 f0       	breq	.+20     	; 0x364a <vfprintf+0x380>
    3636:	a1 fe       	sbrs	r10, 1
    3638:	02 c0       	rjmp	.+4      	; 0x363e <vfprintf+0x374>
    363a:	8b e2       	ldi	r24, 0x2B	; 43
    363c:	01 c0       	rjmp	.+2      	; 0x3640 <vfprintf+0x376>
    363e:	80 e2       	ldi	r24, 0x20	; 32
    3640:	a7 fc       	sbrc	r10, 7
    3642:	8d e2       	ldi	r24, 0x2D	; 45
    3644:	b6 01       	movw	r22, r12
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	4d d0       	rcall	.+154    	; 0x36e4 <fputc>
    364a:	89 14       	cp	r8, r9
    364c:	30 f4       	brcc	.+12     	; 0x365a <vfprintf+0x390>
    364e:	b6 01       	movw	r22, r12
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	47 d0       	rcall	.+142    	; 0x36e4 <fputc>
    3656:	9a 94       	dec	r9
    3658:	f8 cf       	rjmp	.-16     	; 0x364a <vfprintf+0x380>
    365a:	8a 94       	dec	r8
    365c:	f3 01       	movw	r30, r6
    365e:	e8 0d       	add	r30, r8
    3660:	f1 1d       	adc	r31, r1
    3662:	80 81       	ld	r24, Z
    3664:	b6 01       	movw	r22, r12
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	3d d0       	rcall	.+122    	; 0x36e4 <fputc>
    366a:	81 10       	cpse	r8, r1
    366c:	f6 cf       	rjmp	.-20     	; 0x365a <vfprintf+0x390>
    366e:	22 20       	and	r2, r2
    3670:	09 f4       	brne	.+2      	; 0x3674 <vfprintf+0x3aa>
    3672:	4e ce       	rjmp	.-868    	; 0x3310 <vfprintf+0x46>
    3674:	b6 01       	movw	r22, r12
    3676:	80 e2       	ldi	r24, 0x20	; 32
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	34 d0       	rcall	.+104    	; 0x36e4 <fputc>
    367c:	2a 94       	dec	r2
    367e:	f7 cf       	rjmp	.-18     	; 0x366e <vfprintf+0x3a4>
    3680:	f6 01       	movw	r30, r12
    3682:	86 81       	ldd	r24, Z+6	; 0x06
    3684:	97 81       	ldd	r25, Z+7	; 0x07
    3686:	02 c0       	rjmp	.+4      	; 0x368c <vfprintf+0x3c2>
    3688:	8f ef       	ldi	r24, 0xFF	; 255
    368a:	9f ef       	ldi	r25, 0xFF	; 255
    368c:	2b 96       	adiw	r28, 0x0b	; 11
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	bf 90       	pop	r11
    36a4:	af 90       	pop	r10
    36a6:	9f 90       	pop	r9
    36a8:	8f 90       	pop	r8
    36aa:	7f 90       	pop	r7
    36ac:	6f 90       	pop	r6
    36ae:	5f 90       	pop	r5
    36b0:	4f 90       	pop	r4
    36b2:	3f 90       	pop	r3
    36b4:	2f 90       	pop	r2
    36b6:	08 95       	ret

000036b8 <strnlen_P>:
    36b8:	fc 01       	movw	r30, r24
    36ba:	05 90       	lpm	r0, Z+
    36bc:	61 50       	subi	r22, 0x01	; 1
    36be:	70 40       	sbci	r23, 0x00	; 0
    36c0:	01 10       	cpse	r0, r1
    36c2:	d8 f7       	brcc	.-10     	; 0x36ba <strnlen_P+0x2>
    36c4:	80 95       	com	r24
    36c6:	90 95       	com	r25
    36c8:	8e 0f       	add	r24, r30
    36ca:	9f 1f       	adc	r25, r31
    36cc:	08 95       	ret

000036ce <strnlen>:
    36ce:	fc 01       	movw	r30, r24
    36d0:	61 50       	subi	r22, 0x01	; 1
    36d2:	70 40       	sbci	r23, 0x00	; 0
    36d4:	01 90       	ld	r0, Z+
    36d6:	01 10       	cpse	r0, r1
    36d8:	d8 f7       	brcc	.-10     	; 0x36d0 <strnlen+0x2>
    36da:	80 95       	com	r24
    36dc:	90 95       	com	r25
    36de:	8e 0f       	add	r24, r30
    36e0:	9f 1f       	adc	r25, r31
    36e2:	08 95       	ret

000036e4 <fputc>:
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	fb 01       	movw	r30, r22
    36ee:	23 81       	ldd	r18, Z+3	; 0x03
    36f0:	21 fd       	sbrc	r18, 1
    36f2:	03 c0       	rjmp	.+6      	; 0x36fa <fputc+0x16>
    36f4:	8f ef       	ldi	r24, 0xFF	; 255
    36f6:	9f ef       	ldi	r25, 0xFF	; 255
    36f8:	2c c0       	rjmp	.+88     	; 0x3752 <fputc+0x6e>
    36fa:	22 ff       	sbrs	r18, 2
    36fc:	16 c0       	rjmp	.+44     	; 0x372a <fputc+0x46>
    36fe:	46 81       	ldd	r20, Z+6	; 0x06
    3700:	57 81       	ldd	r21, Z+7	; 0x07
    3702:	24 81       	ldd	r18, Z+4	; 0x04
    3704:	35 81       	ldd	r19, Z+5	; 0x05
    3706:	42 17       	cp	r20, r18
    3708:	53 07       	cpc	r21, r19
    370a:	44 f4       	brge	.+16     	; 0x371c <fputc+0x38>
    370c:	a0 81       	ld	r26, Z
    370e:	b1 81       	ldd	r27, Z+1	; 0x01
    3710:	9d 01       	movw	r18, r26
    3712:	2f 5f       	subi	r18, 0xFF	; 255
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	20 83       	st	Z, r18
    3718:	31 83       	std	Z+1, r19	; 0x01
    371a:	8c 93       	st	X, r24
    371c:	26 81       	ldd	r18, Z+6	; 0x06
    371e:	37 81       	ldd	r19, Z+7	; 0x07
    3720:	2f 5f       	subi	r18, 0xFF	; 255
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	26 83       	std	Z+6, r18	; 0x06
    3726:	37 83       	std	Z+7, r19	; 0x07
    3728:	14 c0       	rjmp	.+40     	; 0x3752 <fputc+0x6e>
    372a:	8b 01       	movw	r16, r22
    372c:	ec 01       	movw	r28, r24
    372e:	fb 01       	movw	r30, r22
    3730:	00 84       	ldd	r0, Z+8	; 0x08
    3732:	f1 85       	ldd	r31, Z+9	; 0x09
    3734:	e0 2d       	mov	r30, r0
    3736:	19 95       	eicall
    3738:	89 2b       	or	r24, r25
    373a:	e1 f6       	brne	.-72     	; 0x36f4 <fputc+0x10>
    373c:	d8 01       	movw	r26, r16
    373e:	16 96       	adiw	r26, 0x06	; 6
    3740:	8d 91       	ld	r24, X+
    3742:	9c 91       	ld	r25, X
    3744:	17 97       	sbiw	r26, 0x07	; 7
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	16 96       	adiw	r26, 0x06	; 6
    374a:	8d 93       	st	X+, r24
    374c:	9c 93       	st	X, r25
    374e:	17 97       	sbiw	r26, 0x07	; 7
    3750:	ce 01       	movw	r24, r28
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	08 95       	ret

0000375c <__ultoa_invert>:
    375c:	fa 01       	movw	r30, r20
    375e:	aa 27       	eor	r26, r26
    3760:	28 30       	cpi	r18, 0x08	; 8
    3762:	51 f1       	breq	.+84     	; 0x37b8 <__ultoa_invert+0x5c>
    3764:	20 31       	cpi	r18, 0x10	; 16
    3766:	81 f1       	breq	.+96     	; 0x37c8 <__ultoa_invert+0x6c>
    3768:	e8 94       	clt
    376a:	6f 93       	push	r22
    376c:	6e 7f       	andi	r22, 0xFE	; 254
    376e:	6e 5f       	subi	r22, 0xFE	; 254
    3770:	7f 4f       	sbci	r23, 0xFF	; 255
    3772:	8f 4f       	sbci	r24, 0xFF	; 255
    3774:	9f 4f       	sbci	r25, 0xFF	; 255
    3776:	af 4f       	sbci	r26, 0xFF	; 255
    3778:	b1 e0       	ldi	r27, 0x01	; 1
    377a:	3e d0       	rcall	.+124    	; 0x37f8 <__ultoa_invert+0x9c>
    377c:	b4 e0       	ldi	r27, 0x04	; 4
    377e:	3c d0       	rcall	.+120    	; 0x37f8 <__ultoa_invert+0x9c>
    3780:	67 0f       	add	r22, r23
    3782:	78 1f       	adc	r23, r24
    3784:	89 1f       	adc	r24, r25
    3786:	9a 1f       	adc	r25, r26
    3788:	a1 1d       	adc	r26, r1
    378a:	68 0f       	add	r22, r24
    378c:	79 1f       	adc	r23, r25
    378e:	8a 1f       	adc	r24, r26
    3790:	91 1d       	adc	r25, r1
    3792:	a1 1d       	adc	r26, r1
    3794:	6a 0f       	add	r22, r26
    3796:	71 1d       	adc	r23, r1
    3798:	81 1d       	adc	r24, r1
    379a:	91 1d       	adc	r25, r1
    379c:	a1 1d       	adc	r26, r1
    379e:	20 d0       	rcall	.+64     	; 0x37e0 <__ultoa_invert+0x84>
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <__ultoa_invert+0x48>
    37a2:	68 94       	set
    37a4:	3f 91       	pop	r19
    37a6:	2a e0       	ldi	r18, 0x0A	; 10
    37a8:	26 9f       	mul	r18, r22
    37aa:	11 24       	eor	r1, r1
    37ac:	30 19       	sub	r19, r0
    37ae:	30 5d       	subi	r19, 0xD0	; 208
    37b0:	31 93       	st	Z+, r19
    37b2:	de f6       	brtc	.-74     	; 0x376a <__ultoa_invert+0xe>
    37b4:	cf 01       	movw	r24, r30
    37b6:	08 95       	ret
    37b8:	46 2f       	mov	r20, r22
    37ba:	47 70       	andi	r20, 0x07	; 7
    37bc:	40 5d       	subi	r20, 0xD0	; 208
    37be:	41 93       	st	Z+, r20
    37c0:	b3 e0       	ldi	r27, 0x03	; 3
    37c2:	0f d0       	rcall	.+30     	; 0x37e2 <__ultoa_invert+0x86>
    37c4:	c9 f7       	brne	.-14     	; 0x37b8 <__ultoa_invert+0x5c>
    37c6:	f6 cf       	rjmp	.-20     	; 0x37b4 <__ultoa_invert+0x58>
    37c8:	46 2f       	mov	r20, r22
    37ca:	4f 70       	andi	r20, 0x0F	; 15
    37cc:	40 5d       	subi	r20, 0xD0	; 208
    37ce:	4a 33       	cpi	r20, 0x3A	; 58
    37d0:	18 f0       	brcs	.+6      	; 0x37d8 <__ultoa_invert+0x7c>
    37d2:	49 5d       	subi	r20, 0xD9	; 217
    37d4:	31 fd       	sbrc	r19, 1
    37d6:	40 52       	subi	r20, 0x20	; 32
    37d8:	41 93       	st	Z+, r20
    37da:	02 d0       	rcall	.+4      	; 0x37e0 <__ultoa_invert+0x84>
    37dc:	a9 f7       	brne	.-22     	; 0x37c8 <__ultoa_invert+0x6c>
    37de:	ea cf       	rjmp	.-44     	; 0x37b4 <__ultoa_invert+0x58>
    37e0:	b4 e0       	ldi	r27, 0x04	; 4
    37e2:	a6 95       	lsr	r26
    37e4:	97 95       	ror	r25
    37e6:	87 95       	ror	r24
    37e8:	77 95       	ror	r23
    37ea:	67 95       	ror	r22
    37ec:	ba 95       	dec	r27
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <__ultoa_invert+0x86>
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	61 05       	cpc	r22, r1
    37f4:	71 05       	cpc	r23, r1
    37f6:	08 95       	ret
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	0a 2e       	mov	r0, r26
    37fe:	06 94       	lsr	r0
    3800:	57 95       	ror	r21
    3802:	47 95       	ror	r20
    3804:	37 95       	ror	r19
    3806:	27 95       	ror	r18
    3808:	ba 95       	dec	r27
    380a:	c9 f7       	brne	.-14     	; 0x37fe <__ultoa_invert+0xa2>
    380c:	62 0f       	add	r22, r18
    380e:	73 1f       	adc	r23, r19
    3810:	84 1f       	adc	r24, r20
    3812:	95 1f       	adc	r25, r21
    3814:	a0 1d       	adc	r26, r0
    3816:	08 95       	ret

00003818 <_exit>:
    3818:	f8 94       	cli

0000381a <__stop_program>:
    381a:	ff cf       	rjmp	.-2      	; 0x381a <__stop_program>
